
F303-ECOPENS4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800f248  0800f248  0001f248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f764  0800f764  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f764  0800f764  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f764  0800f764  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f764  0800f764  0001f764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f768  0800f768  0001f768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f76c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          000040f4  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042ec  200042ec  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024db5  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004415  00000000  00000000  00044fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a10  00000000  00000000  000493f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001868  00000000  00000000  0004ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a4f  00000000  00000000  0004c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ffbc  00000000  00000000  0006f0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3ed7  00000000  00000000  0008f07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00162f52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007df8  00000000  00000000  00162fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000003c  00000000  00000000  0016ada0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000076  00000000  00000000  0016addc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f22c 	.word	0x0800f22c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800f22c 	.word	0x0800f22c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <DWT_Init+0x38>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10e      	bne.n	8000bd6 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <DWT_Init+0x38>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <DWT_Init+0x38>)
 8000bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bc2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <DWT_Init+0x3c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <DWT_Init+0x3c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <DWT_Init+0x3c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6013      	str	r3, [r2, #0]
    }
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000edf0 	.word	0xe000edf0
 8000be4:	e0001000 	.word	0xe0001000

08000be8 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <DWT_Delay+0x40>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <DWT_Delay+0x44>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <DWT_Delay+0x48>)
 8000bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000c00:	0c9a      	lsrs	r2, r3, #18
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000c0a:	bf00      	nop
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <DWT_Delay+0x40>)
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d8f8      	bhi.n	8000c0c <DWT_Delay+0x24>
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e0001000 	.word	0xe0001000
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	431bde83 	.word	0x431bde83

08000c34 <commutateNow_0>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void commutateNow_0(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //PHASE A HIGH
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <commutateNow_0+0x48>)
 8000c3e:	f004 fcad 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2108      	movs	r1, #8
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <commutateNow_0+0x48>)
 8000c48:	f004 fca8 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET); //PHASE B FLOATING
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <commutateNow_0+0x48>)
 8000c52:	f004 fca3 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2120      	movs	r1, #32
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <commutateNow_0+0x48>)
 8000c5c:	f004 fc9e 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //PHASE C LOW
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <commutateNow_0+0x48>)
 8000c68:	f004 fc98 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <commutateNow_0+0x48>)
 8000c72:	f004 fc93 	bl	800559c <HAL_GPIO_WritePin>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	48000400 	.word	0x48000400

08000c80 <commutateNow_1>:

void commutateNow_1(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_RESET); //PHASE A FLOATING
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <commutateNow_1+0x48>)
 8000c8a:	f004 fc87 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <commutateNow_1+0x48>)
 8000c94:	f004 fc82 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //PHASE B HIGH
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <commutateNow_1+0x48>)
 8000c9e:	f004 fc7d 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <commutateNow_1+0x48>)
 8000ca8:	f004 fc78 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //PHASE C LOW
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <commutateNow_1+0x48>)
 8000cb4:	f004 fc72 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <commutateNow_1+0x48>)
 8000cbe:	f004 fc6d 	bl	800559c <HAL_GPIO_WritePin>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	48000400 	.word	0x48000400

08000ccc <commutateNow_2>:

void commutateNow_2(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //PHASE A LOW
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	480f      	ldr	r0, [pc, #60]	; (8000d14 <commutateNow_2+0x48>)
 8000cd6:	f004 fc61 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2108      	movs	r1, #8
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <commutateNow_2+0x48>)
 8000ce0:	f004 fc5c 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //PHASE B HIGH
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2140      	movs	r1, #64	; 0x40
 8000ce8:	480a      	ldr	r0, [pc, #40]	; (8000d14 <commutateNow_2+0x48>)
 8000cea:	f004 fc57 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <commutateNow_2+0x48>)
 8000cf4:	f004 fc52 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_RESET); //PHASE C FLOATING
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <commutateNow_2+0x48>)
 8000d00:	f004 fc4c 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <commutateNow_2+0x48>)
 8000d0a:	f004 fc47 	bl	800559c <HAL_GPIO_WritePin>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	48000400 	.word	0x48000400

08000d18 <commutateNow_3>:

void commutateNow_3(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //PHASE A LOW
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2110      	movs	r1, #16
 8000d20:	480f      	ldr	r0, [pc, #60]	; (8000d60 <commutateNow_3+0x48>)
 8000d22:	f004 fc3b 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2108      	movs	r1, #8
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <commutateNow_3+0x48>)
 8000d2c:	f004 fc36 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET); //PHASE B FLOATING
 8000d30:	2200      	movs	r2, #0
 8000d32:	2140      	movs	r1, #64	; 0x40
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <commutateNow_3+0x48>)
 8000d36:	f004 fc31 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <commutateNow_3+0x48>)
 8000d40:	f004 fc2c 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //PHASE C HIGH
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <commutateNow_3+0x48>)
 8000d4c:	f004 fc26 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <commutateNow_3+0x48>)
 8000d56:	f004 fc21 	bl	800559c <HAL_GPIO_WritePin>

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	48000400 	.word	0x48000400

08000d64 <commutateNow_4>:

void commutateNow_4(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_RESET); //PHASE A FLOATING
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <commutateNow_4+0x48>)
 8000d6e:	f004 fc15 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2108      	movs	r1, #8
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <commutateNow_4+0x48>)
 8000d78:	f004 fc10 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //PHASE B LOW
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <commutateNow_4+0x48>)
 8000d82:	f004 fc0b 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2120      	movs	r1, #32
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <commutateNow_4+0x48>)
 8000d8c:	f004 fc06 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //PHASE C HIGH
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <commutateNow_4+0x48>)
 8000d98:	f004 fc00 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <commutateNow_4+0x48>)
 8000da2:	f004 fbfb 	bl	800559c <HAL_GPIO_WritePin>

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	48000400 	.word	0x48000400

08000db0 <commutateNow_5>:
void commutateNow_5(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //PHASE A HIGH
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	480f      	ldr	r0, [pc, #60]	; (8000df8 <commutateNow_5+0x48>)
 8000dba:	f004 fbef 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <commutateNow_5+0x48>)
 8000dc4:	f004 fbea 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //PHASE B LOW
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <commutateNow_5+0x48>)
 8000dce:	f004 fbe5 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	4808      	ldr	r0, [pc, #32]	; (8000df8 <commutateNow_5+0x48>)
 8000dd8:	f004 fbe0 	bl	800559c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_RESET); //PHASE C FLOATING
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <commutateNow_5+0x48>)
 8000de4:	f004 fbda 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <commutateNow_5+0x48>)
 8000dee:	f004 fbd5 	bl	800559c <HAL_GPIO_WritePin>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	48000400 	.word	0x48000400

08000dfc <commutationPattern>:

void commutationPattern(uint8_t step) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	if (step == NEXT && waitForCommutation == 1) {
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b09      	cmp	r3, #9
 8000e0a:	f040 80cc 	bne.w	8000fa6 <commutationPattern+0x1aa>
 8000e0e:	4b7b      	ldr	r3, [pc, #492]	; (8000ffc <commutationPattern+0x200>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	f040 80c6 	bne.w	8000fa6 <commutationPattern+0x1aa>
		bemf_dir = !bemf_dir;
 8000e1a:	4b79      	ldr	r3, [pc, #484]	; (8001000 <commutationPattern+0x204>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf0c      	ite	eq
 8000e22:	2301      	moveq	r3, #1
 8000e24:	2300      	movne	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b75      	ldr	r3, [pc, #468]	; (8001000 <commutationPattern+0x204>)
 8000e2c:	701a      	strb	r2, [r3, #0]
		if (commutationStepCounter < STEP_5)
 8000e2e:	4b75      	ldr	r3, [pc, #468]	; (8001004 <commutationPattern+0x208>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d807      	bhi.n	8000e48 <commutationPattern+0x4c>
			commutationStepCounter++;
 8000e38:	4b72      	ldr	r3, [pc, #456]	; (8001004 <commutationPattern+0x208>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b70      	ldr	r3, [pc, #448]	; (8001004 <commutationPattern+0x208>)
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e002      	b.n	8000e4e <commutationPattern+0x52>
		else {
			commutationStepCounter = STEP_0;
 8000e48:	4b6e      	ldr	r3, [pc, #440]	; (8001004 <commutationPattern+0x208>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
		}
		switch (commutationStepCounter) {
 8000e4e:	4b6d      	ldr	r3, [pc, #436]	; (8001004 <commutationPattern+0x208>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	f200 80cd 	bhi.w	8000ff4 <commutationPattern+0x1f8>
 8000e5a:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <commutationPattern+0x64>)
 8000e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000eab 	.word	0x08000eab
 8000e68:	08000edd 	.word	0x08000edd
 8000e6c:	08000f0f 	.word	0x08000f0f
 8000e70:	08000f41 	.word	0x08000f41
 8000e74:	08000f73 	.word	0x08000f73
		case STEP_0:
			commutateNow_0();
 8000e78:	f7ff fedc 	bl	8000c34 <commutateNow_0>
			COMPDELAY
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	e003      	b.n	8000e8a <commutationPattern+0x8e>
 8000e82:	bf00      	nop
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	3301      	adds	r3, #1
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	2bf9      	cmp	r3, #249	; 0xf9
 8000e8e:	d9f8      	bls.n	8000e82 <commutationPattern+0x86>
			;
			waitForCommutation = 0;
 8000e90:	4b5a      	ldr	r3, [pc, #360]	; (8000ffc <commutationPattern+0x200>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_B;
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <commutationPattern+0x20c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_RISING;
 8000e9c:	4b58      	ldr	r3, [pc, #352]	; (8001000 <commutationPattern+0x204>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp2);
 8000ea2:	485a      	ldr	r0, [pc, #360]	; (800100c <commutationPattern+0x210>)
 8000ea4:	f003 fbf8 	bl	8004698 <HAL_COMP_Start_IT>
			break;
 8000ea8:	e07c      	b.n	8000fa4 <commutationPattern+0x1a8>
		case STEP_1:
			commutateNow_1();
 8000eaa:	f7ff fee9 	bl	8000c80 <commutateNow_1>
			COMPDELAY
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
 8000eb2:	e003      	b.n	8000ebc <commutationPattern+0xc0>
 8000eb4:	bf00      	nop
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	2bf9      	cmp	r3, #249	; 0xf9
 8000ec0:	d9f8      	bls.n	8000eb4 <commutationPattern+0xb8>
			;
			waitForCommutation = 0;
 8000ec2:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <commutationPattern+0x200>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_A;
 8000ec8:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <commutationPattern+0x20c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_FALLING;
 8000ece:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <commutationPattern+0x204>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 8000ed4:	484e      	ldr	r0, [pc, #312]	; (8001010 <commutationPattern+0x214>)
 8000ed6:	f003 fbdf 	bl	8004698 <HAL_COMP_Start_IT>
			break;
 8000eda:	e063      	b.n	8000fa4 <commutationPattern+0x1a8>
		case STEP_2:
			commutateNow_2();
 8000edc:	f7ff fef6 	bl	8000ccc <commutateNow_2>
			COMPDELAY
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e003      	b.n	8000eee <commutationPattern+0xf2>
 8000ee6:	bf00      	nop
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2bf9      	cmp	r3, #249	; 0xf9
 8000ef2:	d9f8      	bls.n	8000ee6 <commutationPattern+0xea>
			;
			waitForCommutation = 0;
 8000ef4:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <commutationPattern+0x200>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_C;
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <commutationPattern+0x20c>)
 8000efc:	2202      	movs	r2, #2
 8000efe:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_RISING;
 8000f00:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <commutationPattern+0x204>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp3);
 8000f06:	4843      	ldr	r0, [pc, #268]	; (8001014 <commutationPattern+0x218>)
 8000f08:	f003 fbc6 	bl	8004698 <HAL_COMP_Start_IT>
			break;
 8000f0c:	e04a      	b.n	8000fa4 <commutationPattern+0x1a8>
		case STEP_3:
			commutateNow_3();
 8000f0e:	f7ff ff03 	bl	8000d18 <commutateNow_3>
			COMPDELAY
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	e003      	b.n	8000f20 <commutationPattern+0x124>
 8000f18:	bf00      	nop
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	2bf9      	cmp	r3, #249	; 0xf9
 8000f24:	d9f8      	bls.n	8000f18 <commutationPattern+0x11c>
			;
			waitForCommutation = 0;
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <commutationPattern+0x200>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_B;
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <commutationPattern+0x20c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_FALLING;
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <commutationPattern+0x204>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp2);
 8000f38:	4834      	ldr	r0, [pc, #208]	; (800100c <commutationPattern+0x210>)
 8000f3a:	f003 fbad 	bl	8004698 <HAL_COMP_Start_IT>
			break;
 8000f3e:	e031      	b.n	8000fa4 <commutationPattern+0x1a8>
		case STEP_4:
			commutateNow_4();
 8000f40:	f7ff ff10 	bl	8000d64 <commutateNow_4>
			COMPDELAY
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e003      	b.n	8000f52 <commutationPattern+0x156>
 8000f4a:	bf00      	nop
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2bf9      	cmp	r3, #249	; 0xf9
 8000f56:	d9f8      	bls.n	8000f4a <commutationPattern+0x14e>
			;
			waitForCommutation = 0;
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <commutationPattern+0x200>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_A;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <commutationPattern+0x20c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_RISING;
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <commutationPattern+0x204>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 8000f6a:	4829      	ldr	r0, [pc, #164]	; (8001010 <commutationPattern+0x214>)
 8000f6c:	f003 fb94 	bl	8004698 <HAL_COMP_Start_IT>
			break;
 8000f70:	e018      	b.n	8000fa4 <commutationPattern+0x1a8>
		case STEP_5:
			commutateNow_5();
 8000f72:	f7ff ff1d 	bl	8000db0 <commutateNow_5>
			COMPDELAY
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	e003      	b.n	8000f84 <commutationPattern+0x188>
 8000f7c:	bf00      	nop
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	3301      	adds	r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2bf9      	cmp	r3, #249	; 0xf9
 8000f88:	d9f8      	bls.n	8000f7c <commutationPattern+0x180>
			;
			waitForCommutation = 0;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <commutationPattern+0x200>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_C;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <commutationPattern+0x20c>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_FALLING;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <commutationPattern+0x204>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp3);
 8000f9c:	481d      	ldr	r0, [pc, #116]	; (8001014 <commutationPattern+0x218>)
 8000f9e:	f003 fb7b 	bl	8004698 <HAL_COMP_Start_IT>
			break;
 8000fa2:	bf00      	nop
		switch (commutationStepCounter) {
 8000fa4:	e026      	b.n	8000ff4 <commutationPattern+0x1f8>
		}
	} else {
		waitForCommutation = 0;
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <commutationPattern+0x200>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
		switch (step) {
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d820      	bhi.n	8000ff4 <commutationPattern+0x1f8>
 8000fb2:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <commutationPattern+0x1bc>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	08000fd1 	.word	0x08000fd1
 8000fbc:	08000fd7 	.word	0x08000fd7
 8000fc0:	08000fdd 	.word	0x08000fdd
 8000fc4:	08000fe3 	.word	0x08000fe3
 8000fc8:	08000fe9 	.word	0x08000fe9
 8000fcc:	08000fef 	.word	0x08000fef
		case STEP_0:
			commutateNow_0();
 8000fd0:	f7ff fe30 	bl	8000c34 <commutateNow_0>
			break;
 8000fd4:	e00e      	b.n	8000ff4 <commutationPattern+0x1f8>
		case STEP_1:
			commutateNow_1();
 8000fd6:	f7ff fe53 	bl	8000c80 <commutateNow_1>
			break;
 8000fda:	e00b      	b.n	8000ff4 <commutationPattern+0x1f8>
		case STEP_2:
			commutateNow_2();
 8000fdc:	f7ff fe76 	bl	8000ccc <commutateNow_2>
			break;
 8000fe0:	e008      	b.n	8000ff4 <commutationPattern+0x1f8>
		case STEP_3:
			commutateNow_3();
 8000fe2:	f7ff fe99 	bl	8000d18 <commutateNow_3>
			break;
 8000fe6:	e005      	b.n	8000ff4 <commutationPattern+0x1f8>
		case STEP_4:
			commutateNow_4();
 8000fe8:	f7ff febc 	bl	8000d64 <commutateNow_4>
			break;
 8000fec:	e002      	b.n	8000ff4 <commutationPattern+0x1f8>
		case STEP_5:
			commutateNow_5();
 8000fee:	f7ff fedf 	bl	8000db0 <commutateNow_5>
			break;
 8000ff2:	bf00      	nop
		}
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000224 	.word	0x20000224
 8001004:	20003c84 	.word	0x20003c84
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20003fec 	.word	0x20003fec
 8001010:	20003d24 	.word	0x20003d24
 8001014:	2000401c 	.word	0x2000401c

08001018 <startMotor>:

void startMotor() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
	setPWM = newPWM = 150;
 800101e:	2196      	movs	r1, #150	; 0x96
 8001020:	4b40      	ldr	r3, [pc, #256]	; (8001124 <startMotor+0x10c>)
 8001022:	460a      	mov	r2, r1
 8001024:	801a      	strh	r2, [r3, #0]
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <startMotor+0x110>)
 8001028:	460a      	mov	r2, r1
 800102a:	801a      	strh	r2, [r3, #0]

	TIM1->CCR1 = setPWM;
 800102c:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <startMotor+0x110>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	b21a      	sxth	r2, r3
 8001032:	4b3e      	ldr	r3, [pc, #248]	; (800112c <startMotor+0x114>)
 8001034:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR5 = setPWM + compWindowOffset;
 8001036:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <startMotor+0x110>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b21b      	sxth	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <startMotor+0x118>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	b21b      	sxth	r3, r3
 8001044:	441a      	add	r2, r3
 8001046:	4b39      	ldr	r3, [pc, #228]	; (800112c <startMotor+0x114>)
 8001048:	659a      	str	r2, [r3, #88]	; 0x58

	commutateNow_0();
 800104a:	f7ff fdf3 	bl	8000c34 <commutateNow_0>
	HAL_Delay(20);
 800104e:	2014      	movs	r0, #20
 8001050:	f001 ff4c 	bl	8002eec <HAL_Delay>
	commutateNow_1();
 8001054:	f7ff fe14 	bl	8000c80 <commutateNow_1>
	HAL_Delay(20);
 8001058:	2014      	movs	r0, #20
 800105a:	f001 ff47 	bl	8002eec <HAL_Delay>
	commutateNow_2();
 800105e:	f7ff fe35 	bl	8000ccc <commutateNow_2>
	HAL_Delay(20);
 8001062:	2014      	movs	r0, #20
 8001064:	f001 ff42 	bl	8002eec <HAL_Delay>
	commutateNow_3();
 8001068:	f7ff fe56 	bl	8000d18 <commutateNow_3>
	HAL_Delay(20);
 800106c:	2014      	movs	r0, #20
 800106e:	f001 ff3d 	bl	8002eec <HAL_Delay>
	commutateNow_4();
 8001072:	f7ff fe77 	bl	8000d64 <commutateNow_4>
	HAL_Delay(20);
 8001076:	2014      	movs	r0, #20
 8001078:	f001 ff38 	bl	8002eec <HAL_Delay>
	commutateNow_5();
 800107c:	f7ff fe98 	bl	8000db0 <commutateNow_5>
	HAL_Delay(20);
 8001080:	2014      	movs	r0, #20
 8001082:	f001 ff33 	bl	8002eec <HAL_Delay>

	uint8_t step = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 4300;
 800108a:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800108e:	80bb      	strh	r3, [r7, #4]


	while (i > 1300) {
 8001090:	e033      	b.n	80010fa <startMotor+0xe2>
		DWT_Delay(i);
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fda7 	bl	8000be8 <DWT_Delay>
		commutationPattern(step);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fead 	bl	8000dfc <commutationPattern>
		setPWM += 1;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <startMotor+0x110>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	3301      	adds	r3, #1
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <startMotor+0x110>)
 80010b2:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = newPWM = setPWM;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <startMotor+0x110>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <startMotor+0x10c>)
 80010bc:	4611      	mov	r1, r2
 80010be:	8019      	strh	r1, [r3, #0]
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <startMotor+0x114>)
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR1 = setPWM + compWindowOffset;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <startMotor+0x110>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <startMotor+0x118>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	441a      	add	r2, r3
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <startMotor+0x114>)
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34
		step += 1;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	3301      	adds	r3, #1
 80010dc:	71fb      	strb	r3, [r7, #7]
		step %= 6;
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <startMotor+0x11c>)
 80010e2:	fba3 1302 	umull	r1, r3, r3, r2
 80010e6:	0899      	lsrs	r1, r3, #2
 80010e8:	460b      	mov	r3, r1
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	440b      	add	r3, r1
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	71fb      	strb	r3, [r7, #7]
		i -= 30;
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	3b1e      	subs	r3, #30
 80010f8:	80bb      	strh	r3, [r7, #4]
	while (i > 1300) {
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	f240 5214 	movw	r2, #1300	; 0x514
 8001100:	4293      	cmp	r3, r2
 8001102:	d8c6      	bhi.n	8001092 <startMotor+0x7a>
	}

	waitForCommutation = 1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <startMotor+0x120>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]

	commutationStepCounter = step;
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <startMotor+0x124>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	7013      	strb	r3, [r2, #0]
	commutationPattern(NEXT);
 8001110:	2009      	movs	r0, #9
 8001112:	f7ff fe73 	bl	8000dfc <commutationPattern>

	mode_motor = MODE_MOTOR_RUN;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <startMotor+0x128>)
 8001118:	2204      	movs	r2, #4
 800111a:	701a      	strb	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000002 	.word	0x20000002
 8001128:	20000004 	.word	0x20000004
 800112c:	40012c00 	.word	0x40012c00
 8001130:	20000006 	.word	0x20000006
 8001134:	aaaaaaab 	.word	0xaaaaaaab
 8001138:	20000000 	.word	0x20000000
 800113c:	20003c84 	.word	0x20003c84
 8001140:	20000225 	.word	0x20000225

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f001 fe9a 	bl	8002e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f8f0 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 fd0a 	bl	8001b68 <MX_GPIO_Init>
  MX_DMA_Init();
 8001154:	f000 fcd6 	bl	8001b04 <MX_DMA_Init>
  MX_COMP1_Init();
 8001158:	f000 f9c6 	bl	80014e8 <MX_COMP1_Init>
  MX_COMP2_Init();
 800115c:	f000 f9f4 	bl	8001548 <MX_COMP2_Init>
  MX_COMP3_Init();
 8001160:	f000 fa22 	bl	80015a8 <MX_COMP3_Init>
  MX_DAC_Init();
 8001164:	f000 fa50 	bl	8001608 <MX_DAC_Init>
  MX_TIM1_Init();
 8001168:	f000 fa78 	bl	800165c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800116c:	f000 fc9a 	bl	8001aa4 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8001170:	f000 f93e 	bl	80013f0 <MX_ADC2_Init>
  MX_TIM15_Init();
 8001174:	f000 fbec 	bl	8001950 <MX_TIM15_Init>
  MX_TIM2_Init();
 8001178:	f000 fb0e 	bl	8001798 <MX_TIM2_Init>
  MX_TIM6_Init();
 800117c:	f000 fbb2 	bl	80018e4 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001180:	f000 fc6a 	bl	8001a58 <MX_TIM16_Init>
  MX_TIM3_Init();
 8001184:	f000 fb56 	bl	8001834 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	RetargetInit(&huart1);
 8001188:	484d      	ldr	r0, [pc, #308]	; (80012c0 <main+0x17c>)
 800118a:	f001 f955 	bl	8002438 <RetargetInit>
	DWT_Init();
 800118e:	f7ff fd0b 	bl	8000ba8 <DWT_Init>
	printf("Test\r\n");
 8001192:	484c      	ldr	r0, [pc, #304]	; (80012c4 <main+0x180>)
 8001194:	f00b ff12 	bl	800cfbc <puts>
	printf("asdf\r\n");
 8001198:	484b      	ldr	r0, [pc, #300]	; (80012c8 <main+0x184>)
 800119a:	f00b ff0f 	bl	800cfbc <puts>
//	while (__HAL_ADC_GET_FLAG(&hadc4, ADC_FLAG_EOC) != SET)
//		;

//	adcVbus = HAL_ADC_GetValue(&hadc4);

	sConfigOC5B.OCMode = TIM_OCMODE_PWM1;
 800119e:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <main+0x188>)
 80011a0:	2260      	movs	r2, #96	; 0x60
 80011a2:	601a      	str	r2, [r3, #0]
	sConfigOC5B.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <main+0x188>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
	sConfigOC5B.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011aa:	4b48      	ldr	r3, [pc, #288]	; (80012cc <main+0x188>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
	sConfigOC5B.OCPolarity = TIM_OCPOLARITY_HIGH; //HIGH for PWM low detection
 80011b0:	4b46      	ldr	r3, [pc, #280]	; (80012cc <main+0x188>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]

	sConfigOC5A.OCMode = TIM_OCMODE_PWM1;
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <main+0x18c>)
 80011b8:	2260      	movs	r2, #96	; 0x60
 80011ba:	601a      	str	r2, [r3, #0]
	sConfigOC5A.OCFastMode = TIM_OCFAST_DISABLE; //DISABLE
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <main+0x18c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
	sConfigOC5A.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <main+0x18c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
	sConfigOC5A.OCPolarity = TIM_OCPOLARITY_LOW; //LOW for PWM high detection
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <main+0x18c>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	609a      	str	r2, [r3, #8]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011ce:	2100      	movs	r1, #0
 80011d0:	4840      	ldr	r0, [pc, #256]	; (80012d4 <main+0x190>)
 80011d2:	f005 feef 	bl	8006fb4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 80011d6:	2110      	movs	r1, #16
 80011d8:	483e      	ldr	r0, [pc, #248]	; (80012d4 <main+0x190>)
 80011da:	f005 feeb 	bl	8006fb4 <HAL_TIM_PWM_Start>
	//HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
	HAL_TIM_Base_Start(&htim2);
 80011de:	483e      	ldr	r0, [pc, #248]	; (80012d8 <main+0x194>)
 80011e0:	f005 fd6e 	bl	8006cc0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 80011e4:	483d      	ldr	r0, [pc, #244]	; (80012dc <main+0x198>)
 80011e6:	f005 fd6b 	bl	8006cc0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80011ea:	2100      	movs	r1, #0
 80011ec:	483c      	ldr	r0, [pc, #240]	; (80012e0 <main+0x19c>)
 80011ee:	f006 f8d9 	bl	80073a4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 80011f2:	2104      	movs	r1, #4
 80011f4:	483a      	ldr	r0, [pc, #232]	; (80012e0 <main+0x19c>)
 80011f6:	f006 f8d5 	bl	80073a4 <HAL_TIM_IC_Start_IT>

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80011fa:	2100      	movs	r1, #0
 80011fc:	4839      	ldr	r0, [pc, #228]	; (80012e4 <main+0x1a0>)
 80011fe:	f003 fda3 	bl	8004d48 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001202:	2300      	movs	r3, #0
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	4836      	ldr	r0, [pc, #216]	; (80012e4 <main+0x1a0>)
 800120a:	f003 fd78 	bl	8004cfe <HAL_DAC_SetValue>

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc2DMA, 3);
 800120e:	2203      	movs	r2, #3
 8001210:	4935      	ldr	r1, [pc, #212]	; (80012e8 <main+0x1a4>)
 8001212:	4836      	ldr	r0, [pc, #216]	; (80012ec <main+0x1a8>)
 8001214:	f002 f88c 	bl	8003330 <HAL_ADC_Start_DMA>

	__HAL_DMA_DISABLE_IT(&hdma_adc2, DMA_IT_TC);
 8001218:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <main+0x1ac>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <main+0x1ac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0202 	bic.w	r2, r2, #2
 8001226:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_adc2, DMA_IT_HT);
 8001228:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <main+0x1ac>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <main+0x1ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0204 	bic.w	r2, r2, #4
 8001236:	601a      	str	r2, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, ADC_IT_EOS);
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <main+0x1a8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <main+0x1a8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0208 	bic.w	r2, r2, #8
 8001246:	605a      	str	r2, [r3, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, ADC_IT_EOC);
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <main+0x1a8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <main+0x1a8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0204 	bic.w	r2, r2, #4
 8001256:	605a      	str	r2, [r3, #4]

	HAL_TIM_Base_Start(&htim2);
 8001258:	481f      	ldr	r0, [pc, #124]	; (80012d8 <main+0x194>)
 800125a:	f005 fd31 	bl	8006cc0 <HAL_TIM_Base_Start>

	setPWM = TIM1->CCR1 = TIM1->CCR5 = 0;
 800125e:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <main+0x1b0>)
 8001260:	2300      	movs	r3, #0
 8001262:	6593      	str	r3, [r2, #88]	; 0x58
 8001264:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <main+0x1b0>)
 8001266:	6353      	str	r3, [r2, #52]	; 0x34
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <main+0x1b4>)
 800126c:	801a      	strh	r2, [r3, #0]

	printf("Mulai!\r\n");
 800126e:	4823      	ldr	r0, [pc, #140]	; (80012fc <main+0x1b8>)
 8001270:	f00b fea4 	bl	800cfbc <puts>
//	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001274:	f008 f984 	bl	8009580 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of comparatorTask */
  comparatorTaskHandle = osThreadNew(StartComparatorTask, NULL, &comparatorTask_attributes);
 8001278:	4a21      	ldr	r2, [pc, #132]	; (8001300 <main+0x1bc>)
 800127a:	2100      	movs	r1, #0
 800127c:	4821      	ldr	r0, [pc, #132]	; (8001304 <main+0x1c0>)
 800127e:	f008 f9e7 	bl	8009650 <osThreadNew>
 8001282:	4603      	mov	r3, r0
 8001284:	4a20      	ldr	r2, [pc, #128]	; (8001308 <main+0x1c4>)
 8001286:	6013      	str	r3, [r2, #0]

  /* creation of analogInTask */
  analogInTaskHandle = osThreadNew(StartAnalogInTask, NULL, &analogInTask_attributes);
 8001288:	4a20      	ldr	r2, [pc, #128]	; (800130c <main+0x1c8>)
 800128a:	2100      	movs	r1, #0
 800128c:	4820      	ldr	r0, [pc, #128]	; (8001310 <main+0x1cc>)
 800128e:	f008 f9df 	bl	8009650 <osThreadNew>
 8001292:	4603      	mov	r3, r0
 8001294:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <main+0x1d0>)
 8001296:	6013      	str	r3, [r2, #0]

  /* creation of controllerTask */
  controllerTaskHandle = osThreadNew(StartControllerTask, NULL, &controllerTask_attributes);
 8001298:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <main+0x1d4>)
 800129a:	2100      	movs	r1, #0
 800129c:	481f      	ldr	r0, [pc, #124]	; (800131c <main+0x1d8>)
 800129e:	f008 f9d7 	bl	8009650 <osThreadNew>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <main+0x1dc>)
 80012a6:	6013      	str	r3, [r2, #0]

  /* creation of positioningTask */
  positioningTaskHandle = osThreadNew(StartPositioningTask, NULL, &positioningTask_attributes);
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <main+0x1e0>)
 80012aa:	2100      	movs	r1, #0
 80012ac:	481e      	ldr	r0, [pc, #120]	; (8001328 <main+0x1e4>)
 80012ae:	f008 f9cf 	bl	8009650 <osThreadNew>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a1d      	ldr	r2, [pc, #116]	; (800132c <main+0x1e8>)
 80012b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012b8:	f008 f996 	bl	80095e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80012bc:	e7fe      	b.n	80012bc <main+0x178>
 80012be:	bf00      	nop
 80012c0:	20003de8 	.word	0x20003de8
 80012c4:	0800f288 	.word	0x0800f288
 80012c8:	0800f290 	.word	0x0800f290
 80012cc:	20004064 	.word	0x20004064
 80012d0:	2000422c 	.word	0x2000422c
 80012d4:	20003fa0 	.word	0x20003fa0
 80012d8:	20004148 	.word	0x20004148
 80012dc:	20003f50 	.word	0x20003f50
 80012e0:	20003cd8 	.word	0x20003cd8
 80012e4:	20003e70 	.word	0x20003e70
 80012e8:	20000228 	.word	0x20000228
 80012ec:	20003c88 	.word	0x20003c88
 80012f0:	20004194 	.word	0x20004194
 80012f4:	40012c00 	.word	0x40012c00
 80012f8:	20000004 	.word	0x20000004
 80012fc:	0800f298 	.word	0x0800f298
 8001300:	0800f2b8 	.word	0x0800f2b8
 8001304:	08001ee5 	.word	0x08001ee5
 8001308:	20003d54 	.word	0x20003d54
 800130c:	0800f2dc 	.word	0x0800f2dc
 8001310:	08002095 	.word	0x08002095
 8001314:	20003f4c 	.word	0x20003f4c
 8001318:	0800f300 	.word	0x0800f300
 800131c:	08002241 	.word	0x08002241
 8001320:	20004224 	.word	0x20004224
 8001324:	0800f324 	.word	0x0800f324
 8001328:	080023f5 	.word	0x080023f5
 800132c:	20003e6c 	.word	0x20003e6c

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b09e      	sub	sp, #120	; 0x78
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800133a:	2228      	movs	r2, #40	; 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00b f95c 	bl	800c5fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	223c      	movs	r2, #60	; 0x3c
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f00b f94e 	bl	800c5fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001360:	2301      	movs	r3, #1
 8001362:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001368:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800136a:	2301      	movs	r3, #1
 800136c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136e:	2301      	movs	r3, #1
 8001370:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800137c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001380:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001386:	4618      	mov	r0, r3
 8001388:	f004 f920 	bl	80055cc <HAL_RCC_OscConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001392:	f001 f84b 	bl	800242c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001396:	230f      	movs	r3, #15
 8001398:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139a:	2302      	movs	r3, #2
 800139c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013b0:	2102      	movs	r1, #2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 f812 	bl	80063dc <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013be:	f001 f835 	bl	800242c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80013c2:	f241 0381 	movw	r3, #4225	; 0x1081
 80013c6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV2;
 80013cc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 fa69 	bl	80068b0 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80013e4:	f001 f822 	bl	800242c <Error_Handler>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3778      	adds	r7, #120	; 0x78
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f6:	463b      	mov	r3, r7
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC2_Init 1 */
  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_ADC2_Init+0xf0>)
 8001408:	4a36      	ldr	r2, [pc, #216]	; (80014e4 <MX_ADC2_Init+0xf4>)
 800140a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <MX_ADC2_Init+0xf0>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_ADC2_Init+0xf0>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <MX_ADC2_Init+0xf0>)
 800141a:	2201      	movs	r2, #1
 800141c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_ADC2_Init+0xf0>)
 8001420:	2201      	movs	r2, #1
 8001422:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <MX_ADC2_Init+0xf0>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <MX_ADC2_Init+0xf0>)
 800142e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO2;
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_ADC2_Init+0xf0>)
 8001436:	f44f 7220 	mov.w	r2, #640	; 0x280
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143c:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <MX_ADC2_Init+0xf0>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <MX_ADC2_Init+0xf0>)
 8001444:	2203      	movs	r2, #3
 8001446:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <MX_ADC2_Init+0xf0>)
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <MX_ADC2_Init+0xf0>)
 8001452:	2208      	movs	r2, #8
 8001454:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <MX_ADC2_Init+0xf0>)
 8001458:	2200      	movs	r2, #0
 800145a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800145c:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <MX_ADC2_Init+0xf0>)
 800145e:	2200      	movs	r2, #0
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001462:	481f      	ldr	r0, [pc, #124]	; (80014e0 <MX_ADC2_Init+0xf0>)
 8001464:	f001 fd84 	bl	8002f70 <HAL_ADC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 800146e:	f000 ffdd 	bl	800242c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001472:	2302      	movs	r3, #2
 8001474:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001476:	2301      	movs	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 800147e:	2302      	movs	r3, #2
 8001480:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	4814      	ldr	r0, [pc, #80]	; (80014e0 <MX_ADC2_Init+0xf0>)
 8001490:	f002 fb9e 	bl	8003bd0 <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 800149a:	f000 ffc7 	bl	800242c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800149e:	2303      	movs	r3, #3
 80014a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_ADC2_Init+0xf0>)
 80014ac:	f002 fb90 	bl	8003bd0 <HAL_ADC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 80014b6:	f000 ffb9 	bl	800242c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014ba:	2304      	movs	r3, #4
 80014bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014be:	2303      	movs	r3, #3
 80014c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MX_ADC2_Init+0xf0>)
 80014c8:	f002 fb82 	bl	8003bd0 <HAL_ADC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC2_Init+0xe6>
  {
    Error_Handler();
 80014d2:	f000 ffab 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20003c88 	.word	0x20003c88
 80014e4:	50000100 	.word	0x50000100

080014e8 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_COMP1_Init+0x58>)
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <MX_COMP1_Init+0x5c>)
 80014f0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_COMP1_Init+0x58>)
 80014f4:	2240      	movs	r2, #64	; 0x40
 80014f6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_COMP1_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_COMP1_Init+0x58>)
 8001500:	227f      	movs	r2, #127	; 0x7f
 8001502:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_COMP1_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <MX_COMP1_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_COMP1_Init+0x58>)
 8001512:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001516:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_COMP1_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_COMP1_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_COMP1_Init+0x58>)
 8001526:	2203      	movs	r2, #3
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_COMP1_Init+0x58>)
 800152c:	f002 ff6c 	bl	8004408 <HAL_COMP_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_COMP1_Init+0x52>
  {
    Error_Handler();
 8001536:	f000 ff79 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20003d24 	.word	0x20003d24
 8001544:	4001001c 	.word	0x4001001c

08001548 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_COMP2_Init+0x58>)
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <MX_COMP2_Init+0x5c>)
 8001550:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_COMP2_Init+0x58>)
 8001554:	2240      	movs	r2, #64	; 0x40
 8001556:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_COMP2_Init+0x58>)
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_COMP2_Init+0x58>)
 8001560:	227f      	movs	r2, #127	; 0x7f
 8001562:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_COMP2_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <MX_COMP2_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_COMP2_Init+0x58>)
 8001572:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001576:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_COMP2_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_COMP2_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_COMP2_Init+0x58>)
 8001586:	2203      	movs	r2, #3
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_COMP2_Init+0x58>)
 800158c:	f002 ff3c 	bl	8004408 <HAL_COMP_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 8001596:	f000 ff49 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20003fec 	.word	0x20003fec
 80015a4:	40010020 	.word	0x40010020

080015a8 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_COMP3_Init+0x58>)
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <MX_COMP3_Init+0x5c>)
 80015b0:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_COMP3_Init+0x58>)
 80015b4:	2240      	movs	r2, #64	; 0x40
 80015b6:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_COMP3_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <MX_COMP3_Init+0x58>)
 80015c0:	227f      	movs	r2, #127	; 0x7f
 80015c2:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_COMP3_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <MX_COMP3_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_COMP3_Init+0x58>)
 80015d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015d6:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_COMP3_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_COMP3_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_COMP3_Init+0x58>)
 80015e6:	2203      	movs	r2, #3
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_COMP3_Init+0x58>)
 80015ec:	f002 ff0c 	bl	8004408 <HAL_COMP_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_COMP3_Init+0x52>
  {
    Error_Handler();
 80015f6:	f000 ff19 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000401c 	.word	0x2000401c
 8001604:	40010024 	.word	0x40010024

08001608 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_DAC_Init+0x4c>)
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <MX_DAC_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_DAC_Init+0x4c>)
 8001620:	f003 fb41 	bl	8004ca6 <HAL_DAC_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800162a:	f000 feff 	bl	800242c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_DAC_Init+0x4c>)
 800163e:	f003 fc28 	bl	8004e92 <HAL_DAC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8001648:	f000 fef0 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20003e70 	.word	0x20003e70
 8001658:	40007400 	.word	0x40007400

0800165c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b096      	sub	sp, #88	; 0x58
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001662:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	222c      	movs	r2, #44	; 0x2c
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f00a ffb7 	bl	800c5fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800168e:	4b40      	ldr	r3, [pc, #256]	; (8001790 <MX_TIM1_Init+0x134>)
 8001690:	4a40      	ldr	r2, [pc, #256]	; (8001794 <MX_TIM1_Init+0x138>)
 8001692:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <MX_TIM1_Init+0x134>)
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <MX_TIM1_Init+0x134>)
 800169c:	2260      	movs	r2, #96	; 0x60
 800169e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1800;
 80016a0:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <MX_TIM1_Init+0x134>)
 80016a2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80016a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <MX_TIM1_Init+0x134>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <MX_TIM1_Init+0x134>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <MX_TIM1_Init+0x134>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016ba:	4835      	ldr	r0, [pc, #212]	; (8001790 <MX_TIM1_Init+0x134>)
 80016bc:	f005 fc23 	bl	8006f06 <HAL_TIM_PWM_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f000 feb1 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ca:	2320      	movs	r3, #32
 80016cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC5REF;
 80016ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80016d2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016dc:	4619      	mov	r1, r3
 80016de:	482c      	ldr	r0, [pc, #176]	; (8001790 <MX_TIM1_Init+0x134>)
 80016e0:	f007 f90e 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80016ea:	f000 fe9f 	bl	800242c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ee:	2360      	movs	r3, #96	; 0x60
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f6:	2300      	movs	r3, #0
 80016f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016fa:	2300      	movs	r3, #0
 80016fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016fe:	2304      	movs	r3, #4
 8001700:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001706:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	481e      	ldr	r0, [pc, #120]	; (8001790 <MX_TIM1_Init+0x134>)
 8001716:	f006 f9bd 	bl	8007a94 <HAL_TIM_PWM_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001720:	f000 fe84 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8001724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001728:	2210      	movs	r2, #16
 800172a:	4619      	mov	r1, r3
 800172c:	4818      	ldr	r0, [pc, #96]	; (8001790 <MX_TIM1_Init+0x134>)
 800172e:	f006 f9b1 	bl	8007a94 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8001738:	f000 fe78 	bl	800242c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001754:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800175e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <MX_TIM1_Init+0x134>)
 8001772:	f007 f945 	bl	8008a00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 800177c:	f000 fe56 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <MX_TIM1_Init+0x134>)
 8001782:	f001 f97d 	bl	8002a80 <HAL_TIM_MspPostInit>

}
 8001786:	bf00      	nop
 8001788:	3758      	adds	r7, #88	; 0x58
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20003fa0 	.word	0x20003fa0
 8001794:	40012c00 	.word	0x40012c00

08001798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_TIM2_Init+0x98>)
 80017b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_TIM2_Init+0x98>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_TIM2_Init+0x98>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_TIM2_Init+0x98>)
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_TIM2_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MX_TIM2_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017de:	4814      	ldr	r0, [pc, #80]	; (8001830 <MX_TIM2_Init+0x98>)
 80017e0:	f005 fa16 	bl	8006c10 <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017ea:	f000 fe1f 	bl	800242c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <MX_TIM2_Init+0x98>)
 80017fc:	f006 fa5e 	bl	8007cbc <HAL_TIM_ConfigClockSource>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001806:	f000 fe11 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	; (8001830 <MX_TIM2_Init+0x98>)
 8001818:	f007 f872 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001822:	f000 fe03 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20004148 	.word	0x20004148

08001834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <MX_TIM3_Init+0xa8>)
 800185a:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <MX_TIM3_Init+0xac>)
 800185c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <MX_TIM3_Init+0xa8>)
 8001860:	2201      	movs	r2, #1
 8001862:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <MX_TIM3_Init+0xa8>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_TIM3_Init+0xa8>)
 800186c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001870:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_TIM3_Init+0xa8>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_TIM3_Init+0xa8>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800187e:	4817      	ldr	r0, [pc, #92]	; (80018dc <MX_TIM3_Init+0xa8>)
 8001880:	f005 faea 	bl	8006e58 <HAL_TIM_OC_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800188a:	f000 fdcf 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	480f      	ldr	r0, [pc, #60]	; (80018dc <MX_TIM3_Init+0xa8>)
 800189e:	f007 f82f 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80018a8:	f000 fdc0 	bl	800242c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018ac:	2300      	movs	r3, #0
 80018ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80018b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_TIM3_Init+0xa8>)
 80018c6:	f005 ffcf 	bl	8007868 <HAL_TIM_OC_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80018d0:	f000 fdac 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20003d58 	.word	0x20003d58
 80018e0:	40000400 	.word	0x40000400

080018e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_TIM6_Init+0x64>)
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <MX_TIM6_Init+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <MX_TIM6_Init+0x64>)
 80018fc:	2247      	movs	r2, #71	; 0x47
 80018fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_TIM6_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <MX_TIM6_Init+0x64>)
 8001908:	220a      	movs	r2, #10
 800190a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_TIM6_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <MX_TIM6_Init+0x64>)
 8001914:	f005 f97c 	bl	8006c10 <HAL_TIM_Base_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800191e:	f000 fd85 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	4619      	mov	r1, r3
 800192e:	4806      	ldr	r0, [pc, #24]	; (8001948 <MX_TIM6_Init+0x64>)
 8001930:	f006 ffe6 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800193a:	f000 fd77 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20003f50 	.word	0x20003f50
 800194c:	40001000 	.word	0x40001000

08001950 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	; 0x30
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800197c:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <MX_TIM15_Init+0x100>)
 800197e:	4a35      	ldr	r2, [pc, #212]	; (8001a54 <MX_TIM15_Init+0x104>)
 8001980:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72 - 1;
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <MX_TIM15_Init+0x100>)
 8001984:	2247      	movs	r2, #71	; 0x47
 8001986:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <MX_TIM15_Init+0x100>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800198e:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <MX_TIM15_Init+0x100>)
 8001990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001994:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <MX_TIM15_Init+0x100>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800199c:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <MX_TIM15_Init+0x100>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <MX_TIM15_Init+0x100>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019a8:	4829      	ldr	r0, [pc, #164]	; (8001a50 <MX_TIM15_Init+0x100>)
 80019aa:	f005 f931 	bl	8006c10 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 80019b4:	f000 fd3a 	bl	800242c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80019be:	f107 0320 	add.w	r3, r7, #32
 80019c2:	4619      	mov	r1, r3
 80019c4:	4822      	ldr	r0, [pc, #136]	; (8001a50 <MX_TIM15_Init+0x100>)
 80019c6:	f006 f979 	bl	8007cbc <HAL_TIM_ConfigClockSource>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 80019d0:	f000 fd2c 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80019d4:	481e      	ldr	r0, [pc, #120]	; (8001a50 <MX_TIM15_Init+0x100>)
 80019d6:	f005 fc83 	bl	80072e0 <HAL_TIM_IC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80019e0:	f000 fd24 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	4817      	ldr	r0, [pc, #92]	; (8001a50 <MX_TIM15_Init+0x100>)
 80019f4:	f006 ff84 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 80019fe:	f000 fd15 	bl	800242c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a06:	2301      	movs	r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <MX_TIM15_Init+0x100>)
 8001a1a:	f005 ff9f 	bl	800795c <HAL_TIM_IC_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001a24:	f000 fd02 	bl	800242c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2204      	movs	r2, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	; (8001a50 <MX_TIM15_Init+0x100>)
 8001a38:	f005 ff90 	bl	800795c <HAL_TIM_IC_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001a42:	f000 fcf3 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	3730      	adds	r7, #48	; 0x30
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20003cd8 	.word	0x20003cd8
 8001a54:	40014000 	.word	0x40014000

08001a58 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_TIM16_Init+0x44>)
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <MX_TIM16_Init+0x48>)
 8001a60:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72 - 1;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_TIM16_Init+0x44>)
 8001a64:	2247      	movs	r2, #71	; 0x47
 8001a66:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_TIM16_Init+0x44>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_TIM16_Init+0x44>)
 8001a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a74:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_TIM16_Init+0x44>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <MX_TIM16_Init+0x44>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_TIM16_Init+0x44>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <MX_TIM16_Init+0x44>)
 8001a8a:	f005 f8c1 	bl	8006c10 <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001a94:	f000 fcca 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200041d8 	.word	0x200041d8
 8001aa0:	40014400 	.word	0x40014400

08001aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <MX_USART1_UART_Init+0x5c>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ae8:	f007 f826 	bl	8008b38 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001af2:	f000 fc9b 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20003de8 	.word	0x20003de8
 8001b00:	40013800 	.word	0x40013800

08001b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <MX_DMA_Init+0x60>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <MX_DMA_Init+0x60>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6153      	str	r3, [r2, #20]
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <MX_DMA_Init+0x60>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <MX_DMA_Init+0x60>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <MX_DMA_Init+0x60>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6153      	str	r3, [r2, #20]
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <MX_DMA_Init+0x60>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	200f      	movs	r0, #15
 8001b40:	f003 f883 	bl	8004c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b44:	200f      	movs	r0, #15
 8001b46:	f003 f89c 	bl	8004c82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	2038      	movs	r0, #56	; 0x38
 8001b50:	f003 f87b 	bl	8004c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001b54:	2038      	movs	r0, #56	; 0x38
 8001b56:	f003 f894 	bl	8004c82 <HAL_NVIC_EnableIRQ>

}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000

08001b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b7e:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <MX_GPIO_Init+0xe4>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <MX_GPIO_Init+0xe4>)
 8001b84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b88:	6153      	str	r3, [r2, #20]
 8001b8a:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <MX_GPIO_Init+0xe4>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <MX_GPIO_Init+0xe4>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	4a2c      	ldr	r2, [pc, #176]	; (8001c4c <MX_GPIO_Init+0xe4>)
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba0:	6153      	str	r3, [r2, #20]
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <MX_GPIO_Init+0xe4>)
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <MX_GPIO_Init+0xe4>)
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <MX_GPIO_Init+0xe4>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb8:	6153      	str	r3, [r2, #20]
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <MX_GPIO_Init+0xe4>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|LED2_Pin
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f24a 51fb 	movw	r1, #42491	; 0xa5fb
 8001bcc:	4820      	ldr	r0, [pc, #128]	; (8001c50 <MX_GPIO_Init+0xe8>)
 8001bce:	f003 fce5 	bl	800559c <HAL_GPIO_WritePin>
                          |LED1_Pin|IN_A_Pin|INH_A_Pin|IN_B_Pin
                          |INH_B_Pin|IN_C_Pin|INH_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f003 fb5e 	bl	80052a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_A_Pin OUT_B_Pin OUT_C_Pin IN_A_Pin
                           IN_B_Pin IN_C_Pin */
  GPIO_InitStruct.Pin = OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|IN_A_Pin
 8001bec:	f240 43ab 	movw	r3, #1195	; 0x4ab
 8001bf0:	60fb      	str	r3, [r7, #12]
                          |IN_B_Pin|IN_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001bf2:	2311      	movs	r3, #17
 8001bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4619      	mov	r1, r3
 8001c04:	4812      	ldr	r0, [pc, #72]	; (8001c50 <MX_GPIO_Init+0xe8>)
 8001c06:	f003 fb4f 	bl	80052a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_VBUS_Pin */
  GPIO_InitStruct.Pin = ADC_VBUS_Pin;
 8001c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c10:	2303      	movs	r3, #3
 8001c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480c      	ldr	r0, [pc, #48]	; (8001c50 <MX_GPIO_Init+0xe8>)
 8001c20:	f003 fb42 	bl	80052a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin INH_A_Pin INH_B_Pin
                           INH_C_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|INH_A_Pin|INH_B_Pin
 8001c24:	f24a 1350 	movw	r3, #41296	; 0xa150
 8001c28:	60fb      	str	r3, [r7, #12]
                          |INH_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_GPIO_Init+0xe8>)
 8001c3e:	f003 fb33 	bl	80052a8 <HAL_GPIO_Init>

}
 8001c42:	bf00      	nop
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48000400 	.word	0x48000400

08001c54 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP1 && waitForCommutation == 0) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <HAL_COMP_TriggerCallback+0x80>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10b      	bne.n	8001c92 <HAL_COMP_TriggerCallback+0x2a>
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <HAL_COMP_TriggerCallback+0x84>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d106      	bne.n	8001c92 <HAL_COMP_TriggerCallback+0x2a>
		HAL_COMP_Stop_IT(&hcomp1);
 8001c84:	481a      	ldr	r0, [pc, #104]	; (8001cf0 <HAL_COMP_TriggerCallback+0x88>)
 8001c86:	f002 fdfb 	bl	8004880 <HAL_COMP_Stop_IT>
		compTrig = COMP1_CALLBACK;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_COMP_TriggerCallback+0x8c>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	e020      	b.n	8001cd4 <HAL_COMP_TriggerCallback+0x6c>
	} else if (hcomp->Instance == COMP2 && waitForCommutation == 0) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a18      	ldr	r2, [pc, #96]	; (8001cf8 <HAL_COMP_TriggerCallback+0x90>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_COMP_TriggerCallback+0x4c>
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_COMP_TriggerCallback+0x84>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_COMP_TriggerCallback+0x4c>
		HAL_COMP_Stop_IT(&hcomp2);
 8001ca6:	4815      	ldr	r0, [pc, #84]	; (8001cfc <HAL_COMP_TriggerCallback+0x94>)
 8001ca8:	f002 fdea 	bl	8004880 <HAL_COMP_Stop_IT>
		compTrig = COMP2_CALLBACK;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_COMP_TriggerCallback+0x8c>)
 8001cae:	2202      	movs	r2, #2
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e00f      	b.n	8001cd4 <HAL_COMP_TriggerCallback+0x6c>
	} else if (hcomp->Instance == COMP3 && waitForCommutation == 0) {
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_COMP_TriggerCallback+0x98>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d10a      	bne.n	8001cd4 <HAL_COMP_TriggerCallback+0x6c>
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_COMP_TriggerCallback+0x84>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <HAL_COMP_TriggerCallback+0x6c>
		HAL_COMP_Stop_IT(&hcomp3);
 8001cc8:	480e      	ldr	r0, [pc, #56]	; (8001d04 <HAL_COMP_TriggerCallback+0x9c>)
 8001cca:	f002 fdd9 	bl	8004880 <HAL_COMP_Stop_IT>
		compTrig = COMP3_CALLBACK;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_COMP_TriggerCallback+0x8c>)
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	701a      	strb	r2, [r3, #0]
	}
	osThreadFlagsSet(comparatorTaskHandle, 0x1);
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_COMP_TriggerCallback+0xa0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f007 fd64 	bl	80097a8 <osThreadFlagsSet>

}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	4001001c 	.word	0x4001001c
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20003d24 	.word	0x20003d24
 8001cf4:	20000214 	.word	0x20000214
 8001cf8:	40010020 	.word	0x40010020
 8001cfc:	20003fec 	.word	0x20003fec
 8001d00:	40010024 	.word	0x40010024
 8001d04:	2000401c 	.word	0x2000401c
 8001d08:	20003d54 	.word	0x20003d54

08001d0c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

	//Motor Kecil 930KV
	//float IntegralOffset = 0.0750;
//	float selisih = 0;

	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d150      	bne.n	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7f1b      	ldrb	r3, [r3, #28]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d14c      	bne.n	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
		switch (phase_bemf) {
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_TIM_PWM_PulseFinishedCallback+0xc0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d018      	beq.n	8001d60 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	dc1f      	bgt.n	8001d72 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_TIM_PWM_PulseFinishedCallback+0x30>
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d009      	beq.n	8001d4e <HAL_TIM_PWM_PulseFinishedCallback+0x42>
 8001d3a:	e01a      	b.n	8001d72 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
		case PHASE_A:
			total += adc2DMA[0];
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001d4a:	6013      	str	r3, [r2, #0]
			break;
 8001d4c:	e011      	b.n	8001d72 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
		case PHASE_B:
			total += adc2DMA[1];
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001d50:	885b      	ldrh	r3, [r3, #2]
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001d5c:	6013      	str	r3, [r2, #0]
			break;
 8001d5e:	e008      	b.n	8001d72 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
		case PHASE_C:
			total += adc2DMA[2];
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001d62:	889b      	ldrh	r3, [r3, #4]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001d6e:	6013      	str	r3, [r2, #0]
			break;
 8001d70:	bf00      	nop
//		if ((float) total * 0.000025f >= IntegralOffset) {
//			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
//			total = 0;
//			commutationPattern(NEXT);
//		}
		if (total >= IntegralOffset) {
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d320      	bcc.n	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
			if(y){
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_TIM_PWM_PulseFinishedCallback+0xd0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d016      	beq.n	8001db4 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>
				if(total - IntegralOffset > errorVal){
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	1ad2      	subs	r2, r2, r3
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d905      	bls.n	8001da4 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
					total--;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e00a      	b.n	8001dba <HAL_TIM_PWM_PulseFinishedCallback+0xae>
				}else{
//					total = 0;
					total = total - IntegralOffset;
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e002      	b.n	8001dba <HAL_TIM_PWM_PulseFinishedCallback+0xae>
				}
			}else{
				total = 0;
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
			}
			commutationPattern(NEXT);
 8001dba:	2009      	movs	r0, #9
 8001dbc:	f7ff f81e 	bl	8000dfc <commutationPattern>
		}
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40012c00 	.word	0x40012c00
 8001dcc:	2000000c 	.word	0x2000000c
 8001dd0:	20000228 	.word	0x20000228
 8001dd4:	20000248 	.word	0x20000248
 8001dd8:	20000010 	.word	0x20000010
 8001ddc:	20000244 	.word	0x20000244
 8001de0:	20000014 	.word	0x20000014

08001de4 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	static uint32_t Count_RisingEdge;
	static uint32_t Count_FallingEdge;
	static uint32_t Count_Freq1;
	static uint32_t Count_Freq2;
	static bool Freq_State;
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7f1b      	ldrb	r3, [r3, #28]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d13d      	bne.n	8001e70 <HAL_TIM_IC_CaptureCallback+0x8c>
		Count_RisingEdge = TIM15->CCR1;
 8001df4:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df8:	4a31      	ldr	r2, [pc, #196]	; (8001ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001dfa:	6013      	str	r3, [r2, #0]
		if(Freq_State == 0){
 8001dfc:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	f083 0301 	eor.w	r3, r3, #1
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_TIM_IC_CaptureCallback+0x36>
			Freq_State = 1;
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
			Count_Freq1 = Count_RisingEdge;
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2c      	ldr	r2, [pc, #176]	; (8001ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001e16:	6013      	str	r3, [r2, #0]
			Count_RisingEdge = 0;
			Count_FallingEdge = 0;
			osThreadFlagsSet(analogInTaskHandle, 0x1);
		}
	}
}
 8001e18:	e04b      	b.n	8001eb2 <HAL_TIM_IC_CaptureCallback+0xce>
		else if(Freq_State == 1){
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d047      	beq.n	8001eb2 <HAL_TIM_IC_CaptureCallback+0xce>
			Freq_State = 0;
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
			Count_Freq2 = Count_RisingEdge;
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001e2e:	6013      	str	r3, [r2, #0]
			if(Count_Freq2 > Count_Freq1) inputFrequency = 1/((float)Count_Freq2 - (float)Count_Freq1) * 1000000; //in kHz;
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d93a      	bls.n	8001eb2 <HAL_TIM_IC_CaptureCallback+0xce>
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e60:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001ed0 <HAL_TIM_IC_CaptureCallback+0xec>
 8001e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001e6a:	edc3 7a00 	vstr	s15, [r3]
}
 8001e6e:	e020      	b.n	8001eb2 <HAL_TIM_IC_CaptureCallback+0xce>
	}else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7f1b      	ldrb	r3, [r3, #28]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d11c      	bne.n	8001eb2 <HAL_TIM_IC_CaptureCallback+0xce>
		Count_FallingEdge = TIM15->CCR2;
 8001e78:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001e7e:	6013      	str	r3, [r2, #0]
		if(Count_RisingEdge < Count_FallingEdge){
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d212      	bcs.n	8001eb2 <HAL_TIM_IC_CaptureCallback+0xce>
			inputDutyCycle = Count_FallingEdge - Count_RisingEdge;
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	4a11      	ldr	r2, [pc, #68]	; (8001edc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001e98:	6013      	str	r3, [r2, #0]
			Count_RisingEdge = 0;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
			Count_FallingEdge = 0;
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
			osThreadFlagsSet(analogInTaskHandle, 0x1);
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2101      	movs	r1, #1
 8001eac:	4618      	mov	r0, r3
 8001eae:	f007 fc7b 	bl	80097a8 <osThreadFlagsSet>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40014000 	.word	0x40014000
 8001ec0:	2000024c 	.word	0x2000024c
 8001ec4:	20000250 	.word	0x20000250
 8001ec8:	20000254 	.word	0x20000254
 8001ecc:	20000258 	.word	0x20000258
 8001ed0:	49742400 	.word	0x49742400
 8001ed4:	20000220 	.word	0x20000220
 8001ed8:	2000025c 	.word	0x2000025c
 8001edc:	20000218 	.word	0x20000218
 8001ee0:	20003f4c 	.word	0x20003f4c

08001ee4 <StartComparatorTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartComparatorTask */
void StartComparatorTask(void *argument)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	bool d = false;
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x1, osFlagsWaitAny, osWaitForever);
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f007 fcb6 	bl	8009868 <osThreadFlagsWait>

		if (compTrig == COMP1_CALLBACK && waitForCommutation == 0) {
 8001efc:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <StartComparatorTask+0x184>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d110      	bne.n	8001f26 <StartComparatorTask+0x42>
 8001f04:	4b59      	ldr	r3, [pc, #356]	; (800206c <StartComparatorTask+0x188>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10b      	bne.n	8001f26 <StartComparatorTask+0x42>
//			if(!d){
//				d = true;
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001f0e:	4b58      	ldr	r3, [pc, #352]	; (8002070 <StartComparatorTask+0x18c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4b56      	ldr	r3, [pc, #344]	; (8002070 <StartComparatorTask+0x18c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0202 	orr.w	r2, r2, #2
 8001f1c:	60da      	str	r2, [r3, #12]
//			}

			waitForCommutation = 1;
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <StartComparatorTask+0x188>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e028      	b.n	8001f78 <StartComparatorTask+0x94>
		} else if (compTrig == COMP2_CALLBACK && waitForCommutation == 0) {
 8001f26:	4b50      	ldr	r3, [pc, #320]	; (8002068 <StartComparatorTask+0x184>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d110      	bne.n	8001f50 <StartComparatorTask+0x6c>
 8001f2e:	4b4f      	ldr	r3, [pc, #316]	; (800206c <StartComparatorTask+0x188>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10b      	bne.n	8001f50 <StartComparatorTask+0x6c>
//			if(!d){
//				d = true;
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001f38:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <StartComparatorTask+0x18c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	4b4c      	ldr	r3, [pc, #304]	; (8002070 <StartComparatorTask+0x18c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0202 	orr.w	r2, r2, #2
 8001f46:	60da      	str	r2, [r3, #12]
//			}

			waitForCommutation = 1;
 8001f48:	4b48      	ldr	r3, [pc, #288]	; (800206c <StartComparatorTask+0x188>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e013      	b.n	8001f78 <StartComparatorTask+0x94>
		} else if (compTrig == COMP3_CALLBACK && waitForCommutation == 0) {
 8001f50:	4b45      	ldr	r3, [pc, #276]	; (8002068 <StartComparatorTask+0x184>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d10f      	bne.n	8001f78 <StartComparatorTask+0x94>
 8001f58:	4b44      	ldr	r3, [pc, #272]	; (800206c <StartComparatorTask+0x188>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10a      	bne.n	8001f78 <StartComparatorTask+0x94>
//			if(!d){
//				d = true;
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <StartComparatorTask+0x18c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <StartComparatorTask+0x18c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0202 	orr.w	r2, r2, #2
 8001f70:	60da      	str	r2, [r3, #12]
//			}

			waitForCommutation = 1;
 8001f72:	4b3e      	ldr	r3, [pc, #248]	; (800206c <StartComparatorTask+0x188>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
		}

		if (setPWM >= 200 && !pwmState) {
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <StartComparatorTask+0x190>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	2bc7      	cmp	r3, #199	; 0xc7
 8001f80:	dd35      	ble.n	8001fee <StartComparatorTask+0x10a>
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <StartComparatorTask+0x194>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d130      	bne.n	8001fee <StartComparatorTask+0x10a>
			HAL_GPIO_WritePin(GPIOB, OUT_A_Pin | OUT_B_Pin | OUT_C_Pin,
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f240 4103 	movw	r1, #1027	; 0x403
 8001f92:	483a      	ldr	r0, [pc, #232]	; (800207c <StartComparatorTask+0x198>)
 8001f94:	f003 fb02 	bl	800559c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);

			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f9e:	4837      	ldr	r0, [pc, #220]	; (800207c <StartComparatorTask+0x198>)
 8001fa0:	f003 fafc 	bl	800559c <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_5);
 8001fa4:	2110      	movs	r1, #16
 8001fa6:	4832      	ldr	r0, [pc, #200]	; (8002070 <StartComparatorTask+0x18c>)
 8001fa8:	f005 f904 	bl	80071b4 <HAL_TIM_PWM_Stop>
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2021);
 8001fac:	f240 73e5 	movw	r3, #2021	; 0x7e5
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4832      	ldr	r0, [pc, #200]	; (8002080 <StartComparatorTask+0x19c>)
 8001fb6:	f002 fea2 	bl	8004cfe <HAL_DAC_SetValue>
			compWindowOffset = -80;
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <StartComparatorTask+0x1a0>)
 8001fbc:	f64f 72b0 	movw	r2, #65456	; 0xffb0
 8001fc0:	801a      	strh	r2, [r3, #0]

			HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC5A, TIM_CHANNEL_5);
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	4930      	ldr	r1, [pc, #192]	; (8002088 <StartComparatorTask+0x1a4>)
 8001fc6:	482a      	ldr	r0, [pc, #168]	; (8002070 <StartComparatorTask+0x18c>)
 8001fc8:	f005 fd64 	bl	8007a94 <HAL_TIM_PWM_ConfigChannel>
			TIM1->CCR5 = setPWM + compWindowOffset;
 8001fcc:	4b29      	ldr	r3, [pc, #164]	; (8002074 <StartComparatorTask+0x190>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <StartComparatorTask+0x1a0>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	441a      	add	r2, r3
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <StartComparatorTask+0x1a8>)
 8001fde:	659a      	str	r2, [r3, #88]	; 0x58
			pwmState = 1;
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <StartComparatorTask+0x194>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	4821      	ldr	r0, [pc, #132]	; (8002070 <StartComparatorTask+0x18c>)
 8001fea:	f004 ffe3 	bl	8006fb4 <HAL_TIM_PWM_Start>
		}

		if (setPWM < 200 && pwmState) {
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <StartComparatorTask+0x190>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	2bc7      	cmp	r3, #199	; 0xc7
 8001ff6:	f73f af7b 	bgt.w	8001ef0 <StartComparatorTask+0xc>
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <StartComparatorTask+0x194>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	f43f af75 	beq.w	8001ef0 <StartComparatorTask+0xc>
			HAL_GPIO_WritePin(GPIOB, OUT_A_Pin | OUT_B_Pin | OUT_C_Pin,
 8002006:	2201      	movs	r2, #1
 8002008:	f240 4103 	movw	r1, #1027	; 0x403
 800200c:	481b      	ldr	r0, [pc, #108]	; (800207c <StartComparatorTask+0x198>)
 800200e:	f003 fac5 	bl	800559c <HAL_GPIO_WritePin>
					GPIO_PIN_SET);

			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002018:	4818      	ldr	r0, [pc, #96]	; (800207c <StartComparatorTask+0x198>)
 800201a:	f003 fabf 	bl	800559c <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_5);
 800201e:	2110      	movs	r1, #16
 8002020:	4813      	ldr	r0, [pc, #76]	; (8002070 <StartComparatorTask+0x18c>)
 8002022:	f005 f8c7 	bl	80071b4 <HAL_TIM_PWM_Stop>
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002026:	2300      	movs	r3, #0
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	4814      	ldr	r0, [pc, #80]	; (8002080 <StartComparatorTask+0x19c>)
 800202e:	f002 fe66 	bl	8004cfe <HAL_DAC_SetValue>
			compWindowOffset = 250;
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <StartComparatorTask+0x1a0>)
 8002034:	22fa      	movs	r2, #250	; 0xfa
 8002036:	801a      	strh	r2, [r3, #0]

			HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC5B, TIM_CHANNEL_5);
 8002038:	2210      	movs	r2, #16
 800203a:	4915      	ldr	r1, [pc, #84]	; (8002090 <StartComparatorTask+0x1ac>)
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <StartComparatorTask+0x18c>)
 800203e:	f005 fd29 	bl	8007a94 <HAL_TIM_PWM_ConfigChannel>
			TIM1->CCR5 = setPWM + compWindowOffset;
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <StartComparatorTask+0x190>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b21b      	sxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <StartComparatorTask+0x1a0>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b21b      	sxth	r3, r3
 8002050:	441a      	add	r2, r3
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <StartComparatorTask+0x1a8>)
 8002054:	659a      	str	r2, [r3, #88]	; 0x58
			pwmState = 0;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <StartComparatorTask+0x194>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 800205c:	2110      	movs	r1, #16
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <StartComparatorTask+0x18c>)
 8002060:	f004 ffa8 	bl	8006fb4 <HAL_TIM_PWM_Start>
		osThreadFlagsWait(0x1, osFlagsWaitAny, osWaitForever);
 8002064:	e744      	b.n	8001ef0 <StartComparatorTask+0xc>
 8002066:	bf00      	nop
 8002068:	20000214 	.word	0x20000214
 800206c:	20000000 	.word	0x20000000
 8002070:	20003fa0 	.word	0x20003fa0
 8002074:	20000004 	.word	0x20000004
 8002078:	20000215 	.word	0x20000215
 800207c:	48000400 	.word	0x48000400
 8002080:	20003e70 	.word	0x20003e70
 8002084:	20000006 	.word	0x20000006
 8002088:	2000422c 	.word	0x2000422c
 800208c:	40012c00 	.word	0x40012c00
 8002090:	20004064 	.word	0x20004064

08002094 <StartAnalogInTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAnalogInTask */
void StartAnalogInTask(void *argument)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
//	uint16_t analogVbus = 0;
//	HAL_ADC_Start(&hadc3);
	/* Infinite loop */
	for (;;) {
//		analogIn = (uint16_t) HAL_ADC_GetValue(&hadc3);
		osThreadFlagsWait(0x1, osFlagsWaitAny, osWaitForever);
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	2100      	movs	r1, #0
 80020a2:	2001      	movs	r0, #1
 80020a4:	f007 fbe0 	bl	8009868 <osThreadFlagsWait>
		switch (mode_motor) {
 80020a8:	4b58      	ldr	r3, [pc, #352]	; (800220c <StartAnalogInTask+0x178>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	f200 80a7 	bhi.w	8002200 <StartAnalogInTask+0x16c>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <StartAnalogInTask+0x24>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	080020cd 	.word	0x080020cd
 80020bc:	08002201 	.word	0x08002201
 80020c0:	08002201 	.word	0x08002201
 80020c4:	080020f1 	.word	0x080020f1
 80020c8:	080020f7 	.word	0x080020f7
		case MODE_MOTOR_STOP:
//			if ((float) analogIn >= 4095.0 * 0.2) {
			if ((float) inputDutyCycle >=  1150) {
 80020cc:	4b50      	ldr	r3, [pc, #320]	; (8002210 <StartAnalogInTask+0x17c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002214 <StartAnalogInTask+0x180>
 80020dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	da00      	bge.n	80020e8 <StartAnalogInTask+0x54>
				mode_motor = MODE_MOTOR_START;
			}
			break;
 80020e6:	e08c      	b.n	8002202 <StartAnalogInTask+0x16e>
				mode_motor = MODE_MOTOR_START;
 80020e8:	4b48      	ldr	r3, [pc, #288]	; (800220c <StartAnalogInTask+0x178>)
 80020ea:	2203      	movs	r2, #3
 80020ec:	701a      	strb	r2, [r3, #0]
			break;
 80020ee:	e088      	b.n	8002202 <StartAnalogInTask+0x16e>
		case MODE_MOTOR_CALIBRATION:
			break;
		case MODE_MOTOR_START:
			startMotor();
 80020f0:	f7fe ff92 	bl	8001018 <startMotor>
			break;
 80020f4:	e085      	b.n	8002202 <StartAnalogInTask+0x16e>
		case MODE_MOTOR_RUN:

			if(inputDutyCycle > 1400){
 80020f6:	4b46      	ldr	r3, [pc, #280]	; (8002210 <StartAnalogInTask+0x17c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80020fe:	d903      	bls.n	8002108 <StartAnalogInTask+0x74>
//				if(!x){
					y = true;
 8002100:	4b45      	ldr	r3, [pc, #276]	; (8002218 <StartAnalogInTask+0x184>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e002      	b.n	800210e <StartAnalogInTask+0x7a>
//					x = true;
//				}
			}else{
//				x = false;
				y = false;
 8002108:	4b43      	ldr	r3, [pc, #268]	; (8002218 <StartAnalogInTask+0x184>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
			}

			if(pastInputDutyCycle > inputDutyCycle){
 800210e:	4b43      	ldr	r3, [pc, #268]	; (800221c <StartAnalogInTask+0x188>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <StartAnalogInTask+0x17c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d907      	bls.n	800212a <StartAnalogInTask+0x96>
				errorVal = 7;
 800211a:	4b41      	ldr	r3, [pc, #260]	; (8002220 <StartAnalogInTask+0x18c>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
				IntegralOffset = 3800;
 8002120:	4b40      	ldr	r3, [pc, #256]	; (8002224 <StartAnalogInTask+0x190>)
 8002122:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e014      	b.n	8002154 <StartAnalogInTask+0xc0>
			}else if(pastInputDutyCycle < inputDutyCycle){
 800212a:	4b3c      	ldr	r3, [pc, #240]	; (800221c <StartAnalogInTask+0x188>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b38      	ldr	r3, [pc, #224]	; (8002210 <StartAnalogInTask+0x17c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d207      	bcs.n	8002146 <StartAnalogInTask+0xb2>
				errorVal = 5;
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <StartAnalogInTask+0x18c>)
 8002138:	2205      	movs	r2, #5
 800213a:	601a      	str	r2, [r3, #0]
				IntegralOffset = 2400;
 800213c:	4b39      	ldr	r3, [pc, #228]	; (8002224 <StartAnalogInTask+0x190>)
 800213e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e006      	b.n	8002154 <StartAnalogInTask+0xc0>
			}else{
				errorVal = 5;
 8002146:	4b36      	ldr	r3, [pc, #216]	; (8002220 <StartAnalogInTask+0x18c>)
 8002148:	2205      	movs	r2, #5
 800214a:	601a      	str	r2, [r3, #0]
				IntegralOffset = 3800;
 800214c:	4b35      	ldr	r3, [pc, #212]	; (8002224 <StartAnalogInTask+0x190>)
 800214e:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002152:	601a      	str	r2, [r3, #0]
			}
			pastInputDutyCycle = inputDutyCycle;
 8002154:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <StartAnalogInTask+0x17c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a30      	ldr	r2, [pc, #192]	; (800221c <StartAnalogInTask+0x188>)
 800215a:	6013      	str	r3, [r2, #0]

			if(!y){
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <StartAnalogInTask+0x184>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	f083 0301 	eor.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d014      	beq.n	8002194 <StartAnalogInTask+0x100>
				newPWM = map(inputDutyCycle, input_pwm_min, input_pwm_max, PWM_MIN, PWM_MAX);
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <StartAnalogInTask+0x17c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2e      	ldr	r2, [pc, #184]	; (8002228 <StartAnalogInTask+0x194>)
 8002170:	8812      	ldrh	r2, [r2, #0]
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	4a2b      	ldr	r2, [pc, #172]	; (800222c <StartAnalogInTask+0x198>)
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	4611      	mov	r1, r2
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <StartAnalogInTask+0x194>)
 8002184:	8812      	ldrh	r2, [r2, #0]
 8002186:	1a8a      	subs	r2, r1, r2
 8002188:	fbb3 f3f2 	udiv	r3, r3, r2
 800218c:	b21a      	sxth	r2, r3
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <StartAnalogInTask+0x19c>)
 8002190:	801a      	strh	r2, [r3, #0]
 8002192:	e024      	b.n	80021de <StartAnalogInTask+0x14a>
			}else{
				setPWM = newPWM = map(inputDutyCycle, input_pwm_min, input_pwm_max, PWM_MIN, PWM_MAX);
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <StartAnalogInTask+0x17c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a23      	ldr	r2, [pc, #140]	; (8002228 <StartAnalogInTask+0x194>)
 800219a:	8812      	ldrh	r2, [r2, #0]
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	4a21      	ldr	r2, [pc, #132]	; (800222c <StartAnalogInTask+0x198>)
 80021a8:	8812      	ldrh	r2, [r2, #0]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <StartAnalogInTask+0x194>)
 80021ae:	8812      	ldrh	r2, [r2, #0]
 80021b0:	1a8a      	subs	r2, r1, r2
 80021b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <StartAnalogInTask+0x19c>)
 80021ba:	4611      	mov	r1, r2
 80021bc:	8019      	strh	r1, [r3, #0]
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <StartAnalogInTask+0x1a0>)
 80021c0:	801a      	strh	r2, [r3, #0]
				TIM1->CCR1 = setPWM;
 80021c2:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <StartAnalogInTask+0x1a0>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <StartAnalogInTask+0x1a4>)
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR5 = TIM1->CCR1 + compWindowOffset;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <StartAnalogInTask+0x1a4>)
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <StartAnalogInTask+0x1a8>)
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	b212      	sxth	r2, r2
 80021d6:	4611      	mov	r1, r2
 80021d8:	4a17      	ldr	r2, [pc, #92]	; (8002238 <StartAnalogInTask+0x1a4>)
 80021da:	440b      	add	r3, r1
 80021dc:	6593      	str	r3, [r2, #88]	; 0x58
//			}



//			if ((float) analogIn < 4095.0 * 0.1) {
			if ((float) inputDutyCycle < 1150) {
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <StartAnalogInTask+0x17c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ea:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002214 <StartAnalogInTask+0x180>
 80021ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f6:	d400      	bmi.n	80021fa <StartAnalogInTask+0x166>
				HAL_NVIC_SystemReset();
			}
			break;
 80021f8:	e003      	b.n	8002202 <StartAnalogInTask+0x16e>
				HAL_NVIC_SystemReset();
 80021fa:	f002 fd50 	bl	8004c9e <HAL_NVIC_SystemReset>
			break;
 80021fe:	e000      	b.n	8002202 <StartAnalogInTask+0x16e>
		default:
			break;
 8002200:	bf00      	nop
		}
		osDelay(10);
 8002202:	200a      	movs	r0, #10
 8002204:	f007 fbc4 	bl	8009990 <osDelay>
		osThreadFlagsWait(0x1, osFlagsWaitAny, osWaitForever);
 8002208:	e748      	b.n	800209c <StartAnalogInTask+0x8>
 800220a:	bf00      	nop
 800220c:	20000225 	.word	0x20000225
 8002210:	20000218 	.word	0x20000218
 8002214:	448fc000 	.word	0x448fc000
 8002218:	20000244 	.word	0x20000244
 800221c:	2000021c 	.word	0x2000021c
 8002220:	20000014 	.word	0x20000014
 8002224:	20000010 	.word	0x20000010
 8002228:	20000008 	.word	0x20000008
 800222c:	2000000a 	.word	0x2000000a
 8002230:	20000002 	.word	0x20000002
 8002234:	20000004 	.word	0x20000004
 8002238:	40012c00 	.word	0x40012c00
 800223c:	20000006 	.word	0x20000006

08002240 <StartControllerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void *argument)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
	float kp = 0.07;
 8002248:	4b5b      	ldr	r3, [pc, #364]	; (80023b8 <StartControllerTask+0x178>)
 800224a:	617b      	str	r3, [r7, #20]
	float ki = 0.005;
 800224c:	4b5b      	ldr	r3, [pc, #364]	; (80023bc <StartControllerTask+0x17c>)
 800224e:	613b      	str	r3, [r7, #16]
	float outputPWM = 0.0;
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
	float outputIntegralPWM = 0.0;
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 800225c:	2201      	movs	r2, #1
 800225e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002262:	4857      	ldr	r0, [pc, #348]	; (80023c0 <StartControllerTask+0x180>)
 8002264:	f003 f99a 	bl	800559c <HAL_GPIO_WritePin>
	for(;;)
	  {
		if(y){
 8002268:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <StartControllerTask+0x184>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <StartControllerTask+0x38>
			osDelay(5);
 8002270:	2005      	movs	r0, #5
 8002272:	f007 fb8d 	bl	8009990 <osDelay>
			continue;
 8002276:	e09d      	b.n	80023b4 <StartControllerTask+0x174>
		}
		if (mode_motor == MODE_MOTOR_RUN){
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <StartControllerTask+0x188>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b04      	cmp	r3, #4
 800227e:	f040 8096 	bne.w	80023ae <StartControllerTask+0x16e>
			errorPWM = (float) (setPWM - newPWM);
 8002282:	4b52      	ldr	r3, [pc, #328]	; (80023cc <StartControllerTask+0x18c>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b21b      	sxth	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	4b51      	ldr	r3, [pc, #324]	; (80023d0 <StartControllerTask+0x190>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b21b      	sxth	r3, r3
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229a:	4b4e      	ldr	r3, [pc, #312]	; (80023d4 <StartControllerTask+0x194>)
 800229c:	edc3 7a00 	vstr	s15, [r3]
			integralErrorPWM += errorPWM;
 80022a0:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <StartControllerTask+0x198>)
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	4b4b      	ldr	r3, [pc, #300]	; (80023d4 <StartControllerTask+0x194>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b0:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <StartControllerTask+0x198>)
 80022b2:	edc3 7a00 	vstr	s15, [r3]

			outputIntegralPWM = (integralErrorPWM * ki);
 80022b6:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <StartControllerTask+0x198>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80022c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c4:	edc7 7a02 	vstr	s15, [r7, #8]
			outputIntegralPWM = constrain(outputIntegralPWM, -500.0, 500.0);
 80022c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80022cc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80023dc <StartControllerTask+0x19c>
 80022d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	d501      	bpl.n	80022de <StartControllerTask+0x9e>
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <StartControllerTask+0x1a0>)
 80022dc:	e00b      	b.n	80022f6 <StartControllerTask+0xb6>
 80022de:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80023e4 <StartControllerTask+0x1a4>
 80022e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ee:	dd01      	ble.n	80022f4 <StartControllerTask+0xb4>
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <StartControllerTask+0x1a8>)
 80022f2:	e000      	b.n	80022f6 <StartControllerTask+0xb6>
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60bb      	str	r3, [r7, #8]

			outputPWM = -(errorPWM * kp) + (-outputIntegralPWM);
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <StartControllerTask+0x194>)
 80022fa:	ed93 7a00 	vldr	s14, [r3]
 80022fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002306:	eeb1 7a67 	vneg.f32	s14, s15
 800230a:	edd7 7a02 	vldr	s15, [r7, #8]
 800230e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002312:	edc7 7a03 	vstr	s15, [r7, #12]
			outputPWM = constrain(outputPWM, -500.0, 500.0);
 8002316:	edd7 7a03 	vldr	s15, [r7, #12]
 800231a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80023dc <StartControllerTask+0x19c>
 800231e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	d501      	bpl.n	800232c <StartControllerTask+0xec>
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <StartControllerTask+0x1a0>)
 800232a:	e00b      	b.n	8002344 <StartControllerTask+0x104>
 800232c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002330:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80023e4 <StartControllerTask+0x1a4>
 8002334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	dd01      	ble.n	8002342 <StartControllerTask+0x102>
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <StartControllerTask+0x1a8>)
 8002340:	e000      	b.n	8002344 <StartControllerTask+0x104>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	60fb      	str	r3, [r7, #12]
			setPWM += (int16_t) outputPWM;
 8002346:	edd7 7a03 	vldr	s15, [r7, #12]
 800234a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234e:	ee17 3a90 	vmov	r3, s15
 8002352:	b21b      	sxth	r3, r3
 8002354:	b29a      	uxth	r2, r3
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <StartControllerTask+0x18c>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b21b      	sxth	r3, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	4413      	add	r3, r2
 8002360:	b29b      	uxth	r3, r3
 8002362:	b21a      	sxth	r2, r3
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <StartControllerTask+0x18c>)
 8002366:	801a      	strh	r2, [r3, #0]
			setPWM = constrain(setPWM, 0, PWM_MAX);
 8002368:	4b18      	ldr	r3, [pc, #96]	; (80023cc <StartControllerTask+0x18c>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b21b      	sxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0c      	blt.n	800238c <StartControllerTask+0x14c>
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <StartControllerTask+0x18c>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b21b      	sxth	r3, r3
 8002378:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800237c:	dc03      	bgt.n	8002386 <StartControllerTask+0x146>
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <StartControllerTask+0x18c>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b21b      	sxth	r3, r3
 8002384:	e003      	b.n	800238e <StartControllerTask+0x14e>
 8002386:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800238a:	e000      	b.n	800238e <StartControllerTask+0x14e>
 800238c:	2300      	movs	r3, #0
 800238e:	4a0f      	ldr	r2, [pc, #60]	; (80023cc <StartControllerTask+0x18c>)
 8002390:	8013      	strh	r3, [r2, #0]
			TIM1->CCR1 = setPWM;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <StartControllerTask+0x18c>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b21a      	sxth	r2, r3
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <StartControllerTask+0x1ac>)
 800239a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR5 = TIM1->CCR1 + compWindowOffset;
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <StartControllerTask+0x1ac>)
 800239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a0:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <StartControllerTask+0x1b0>)
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	b212      	sxth	r2, r2
 80023a6:	4611      	mov	r1, r2
 80023a8:	4a10      	ldr	r2, [pc, #64]	; (80023ec <StartControllerTask+0x1ac>)
 80023aa:	440b      	add	r3, r1
 80023ac:	6593      	str	r3, [r2, #88]	; 0x58
		}
		osDelay(5);
 80023ae:	2005      	movs	r0, #5
 80023b0:	f007 faee 	bl	8009990 <osDelay>
		if(y){
 80023b4:	e758      	b.n	8002268 <StartControllerTask+0x28>
 80023b6:	bf00      	nop
 80023b8:	3d8f5c29 	.word	0x3d8f5c29
 80023bc:	3ba3d70a 	.word	0x3ba3d70a
 80023c0:	48000400 	.word	0x48000400
 80023c4:	20000244 	.word	0x20000244
 80023c8:	20000225 	.word	0x20000225
 80023cc:	20000004 	.word	0x20000004
 80023d0:	20000002 	.word	0x20000002
 80023d4:	2000023c 	.word	0x2000023c
 80023d8:	20000240 	.word	0x20000240
 80023dc:	c3fa0000 	.word	0xc3fa0000
 80023e0:	c3fa0000 	.word	0xc3fa0000
 80023e4:	43fa0000 	.word	0x43fa0000
 80023e8:	43fa0000 	.word	0x43fa0000
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	20000006 	.word	0x20000006

080023f4 <StartPositioningTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPositioningTask */
void StartPositioningTask(void *argument)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPositioningTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(osWaitForever);
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f007 fac6 	bl	8009990 <osDelay>
 8002404:	e7fa      	b.n	80023fc <StartPositioningTask+0x8>
	...

08002408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800241a:	f000 fd47 	bl	8002eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40001400 	.word	0x40001400

0800242c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002430:	b672      	cpsid	i
}
 8002432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002434:	e7fe      	b.n	8002434 <Error_Handler+0x8>
	...

08002438 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <RetargetInit+0x28>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <RetargetInit+0x2c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6898      	ldr	r0, [r3, #8]
 800244c:	2300      	movs	r3, #0
 800244e:	2202      	movs	r2, #2
 8002450:	2100      	movs	r1, #0
 8002452:	f00a fdbb 	bl	800cfcc <setvbuf>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20004248 	.word	0x20004248
 8002464:	20000028 	.word	0x20000028

08002468 <_isatty>:

int _isatty(int fd) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	db04      	blt.n	8002480 <_isatty+0x18>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b02      	cmp	r3, #2
 800247a:	dc01      	bgt.n	8002480 <_isatty+0x18>
    return 1;
 800247c:	2301      	movs	r3, #1
 800247e:	e005      	b.n	800248c <_isatty+0x24>

  errno = EBADF;
 8002480:	f00a f884 	bl	800c58c <__errno>
 8002484:	4603      	mov	r3, r0
 8002486:	2209      	movs	r2, #9
 8002488:	601a      	str	r2, [r3, #0]
  return 0;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_write>:

int _write(int fd, char* ptr, int len) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d002      	beq.n	80024ac <_write+0x18>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d111      	bne.n	80024d0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <_write+0x54>)
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	f006 fb8b 	bl	8008bd4 <HAL_UART_Transmit>
 80024be:	4603      	mov	r3, r0
 80024c0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <_write+0x38>
      return len;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	e008      	b.n	80024de <_write+0x4a>
    else
      return EIO;
 80024cc:	2305      	movs	r3, #5
 80024ce:	e006      	b.n	80024de <_write+0x4a>
  }
  errno = EBADF;
 80024d0:	f00a f85c 	bl	800c58c <__errno>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2209      	movs	r2, #9
 80024d8:	601a      	str	r2, [r3, #0]
  return -1;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20004248 	.word	0x20004248

080024ec <_close>:

int _close(int fd) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db04      	blt.n	8002504 <_close+0x18>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	dc01      	bgt.n	8002504 <_close+0x18>
    return 0;
 8002500:	2300      	movs	r3, #0
 8002502:	e006      	b.n	8002512 <_close+0x26>

  errno = EBADF;
 8002504:	f00a f842 	bl	800c58c <__errno>
 8002508:	4603      	mov	r3, r0
 800250a:	2209      	movs	r2, #9
 800250c:	601a      	str	r2, [r3, #0]
  return -1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002526:	f00a f831 	bl	800c58c <__errno>
 800252a:	4603      	mov	r3, r0
 800252c:	2209      	movs	r2, #9
 800252e:	601a      	str	r2, [r3, #0]
  return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_read>:

int _read(int fd, char* ptr, int len) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d110      	bne.n	8002570 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <_read+0x4c>)
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	2201      	movs	r2, #1
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	f006 fbcf 	bl	8008cfc <HAL_UART_Receive>
 800255e:	4603      	mov	r3, r0
 8002560:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <_read+0x30>
      return 1;
 8002568:	2301      	movs	r3, #1
 800256a:	e008      	b.n	800257e <_read+0x42>
    else
      return EIO;
 800256c:	2305      	movs	r3, #5
 800256e:	e006      	b.n	800257e <_read+0x42>
  }
  errno = EBADF;
 8002570:	f00a f80c 	bl	800c58c <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	2209      	movs	r2, #9
 8002578:	601a      	str	r2, [r3, #0]
  return -1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20004248 	.word	0x20004248

0800258c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db08      	blt.n	80025ae <_fstat+0x22>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	dc05      	bgt.n	80025ae <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a8:	605a      	str	r2, [r3, #4]
    return 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e005      	b.n	80025ba <_fstat+0x2e>
  }

  errno = EBADF;
 80025ae:	f009 ffed 	bl	800c58c <__errno>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2209      	movs	r2, #9
 80025b6:	601a      	str	r2, [r3, #0]
  return 0;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_MspInit+0x4c>)
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	4a10      	ldr	r2, [pc, #64]	; (8002610 <HAL_MspInit+0x4c>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6193      	str	r3, [r2, #24]
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_MspInit+0x4c>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_MspInit+0x4c>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_MspInit+0x4c>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_MspInit+0x4c>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	210f      	movs	r1, #15
 80025fe:	f06f 0001 	mvn.w	r0, #1
 8002602:	f002 fb22 	bl	8004c4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2d      	ldr	r2, [pc, #180]	; (80026e8 <HAL_ADC_MspInit+0xd4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d154      	bne.n	80026e0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_ADC_MspInit+0xd8>)
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	4a2c      	ldr	r2, [pc, #176]	; (80026ec <HAL_ADC_MspInit+0xd8>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6153      	str	r3, [r2, #20]
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <HAL_ADC_MspInit+0xd8>)
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_ADC_MspInit+0xd8>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4a26      	ldr	r2, [pc, #152]	; (80026ec <HAL_ADC_MspInit+0xd8>)
 8002654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002658:	6153      	str	r3, [r2, #20]
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_ADC_MspInit+0xd8>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = ADC_PHASEA_Pin|ADC_PHASEB_Pin|ADC_PHASEC_Pin;
 8002666:	23e0      	movs	r3, #224	; 0xe0
 8002668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800266a:	2303      	movs	r3, #3
 800266c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267c:	f002 fe14 	bl	80052a8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_ADC_MspInit+0xe0>)
 8002684:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 8002688:	2200      	movs	r2, #0
 800268a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 800269a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 80026a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 80026aa:	2220      	movs	r2, #32
 80026ac:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80026b4:	480e      	ldr	r0, [pc, #56]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 80026b6:	f002 fc43 	bl	8004f40 <HAL_DMA_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80026c0:	f7ff feb4 	bl	800242c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
 80026ca:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <HAL_ADC_MspInit+0xdc>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2105      	movs	r1, #5
 80026d4:	2012      	movs	r0, #18
 80026d6:	f002 fab8 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80026da:	2012      	movs	r0, #18
 80026dc:	f002 fad1 	bl	8004c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80026e0:	bf00      	nop
 80026e2:	3728      	adds	r7, #40	; 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	50000100 	.word	0x50000100
 80026ec:	40021000 	.word	0x40021000
 80026f0:	20004194 	.word	0x20004194
 80026f4:	40020408 	.word	0x40020408

080026f8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a3a      	ldr	r2, [pc, #232]	; (8002800 <HAL_COMP_MspInit+0x108>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d121      	bne.n	800275e <HAL_COMP_MspInit+0x66>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_COMP_MspInit+0x10c>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4a39      	ldr	r2, [pc, #228]	; (8002804 <HAL_COMP_MspInit+0x10c>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	6153      	str	r3, [r2, #20]
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <HAL_COMP_MspInit+0x10c>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = COMP_PHASEA_Pin;
 8002732:	2302      	movs	r3, #2
 8002734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002736:	2303      	movs	r3, #3
 8002738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEA_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002748:	f002 fdae 	bl	80052a8 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	2105      	movs	r1, #5
 8002750:	2040      	movs	r0, #64	; 0x40
 8002752:	f002 fa7a 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8002756:	2040      	movs	r0, #64	; 0x40
 8002758:	f002 fa93 	bl	8004c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP3_MspInit 1 */

  /* USER CODE END COMP3_MspInit 1 */
  }

}
 800275c:	e04c      	b.n	80027f8 <HAL_COMP_MspInit+0x100>
  else if(hcomp->Instance==COMP2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a29      	ldr	r2, [pc, #164]	; (8002808 <HAL_COMP_MspInit+0x110>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d121      	bne.n	80027ac <HAL_COMP_MspInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002768:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_COMP_MspInit+0x10c>)
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	4a25      	ldr	r2, [pc, #148]	; (8002804 <HAL_COMP_MspInit+0x10c>)
 800276e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002772:	6153      	str	r3, [r2, #20]
 8002774:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_COMP_MspInit+0x10c>)
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COMP_PHASEB_Pin;
 8002780:	2308      	movs	r3, #8
 8002782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002784:	2303      	movs	r3, #3
 8002786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEB_GPIO_Port, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002796:	f002 fd87 	bl	80052a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2105      	movs	r1, #5
 800279e:	2040      	movs	r0, #64	; 0x40
 80027a0:	f002 fa53 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80027a4:	2040      	movs	r0, #64	; 0x40
 80027a6:	f002 fa6c 	bl	8004c82 <HAL_NVIC_EnableIRQ>
}
 80027aa:	e025      	b.n	80027f8 <HAL_COMP_MspInit+0x100>
  else if(hcomp->Instance==COMP3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a16      	ldr	r2, [pc, #88]	; (800280c <HAL_COMP_MspInit+0x114>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d120      	bne.n	80027f8 <HAL_COMP_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_COMP_MspInit+0x10c>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_COMP_MspInit+0x10c>)
 80027bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c0:	6153      	str	r3, [r2, #20]
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_COMP_MspInit+0x10c>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = COMP_PHASEC_Pin;
 80027ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027d4:	2303      	movs	r3, #3
 80027d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEC_GPIO_Port, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	480b      	ldr	r0, [pc, #44]	; (8002810 <HAL_COMP_MspInit+0x118>)
 80027e4:	f002 fd60 	bl	80052a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2105      	movs	r1, #5
 80027ec:	2040      	movs	r0, #64	; 0x40
 80027ee:	f002 fa2c 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80027f2:	2040      	movs	r0, #64	; 0x40
 80027f4:	f002 fa45 	bl	8004c82 <HAL_NVIC_EnableIRQ>
}
 80027f8:	bf00      	nop
 80027fa:	3728      	adds	r7, #40	; 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	4001001c 	.word	0x4001001c
 8002804:	40021000 	.word	0x40021000
 8002808:	40010020 	.word	0x40010020
 800280c:	40010024 	.word	0x40010024
 8002810:	48000400 	.word	0x48000400

08002814 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_DAC_MspInit+0x84>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d12c      	bne.n	8002890 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_DAC_MspInit+0x88>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4a18      	ldr	r2, [pc, #96]	; (800289c <HAL_DAC_MspInit+0x88>)
 800283c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002840:	61d3      	str	r3, [r2, #28]
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <HAL_DAC_MspInit+0x88>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <HAL_DAC_MspInit+0x88>)
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	4a12      	ldr	r2, [pc, #72]	; (800289c <HAL_DAC_MspInit+0x88>)
 8002854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002858:	6153      	str	r3, [r2, #20]
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_DAC_MspInit+0x88>)
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002866:	2310      	movs	r3, #16
 8002868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800286a:	2303      	movs	r3, #3
 800286c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4619      	mov	r1, r3
 8002878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800287c:	f002 fd14 	bl	80052a8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2105      	movs	r1, #5
 8002884:	2036      	movs	r0, #54	; 0x36
 8002886:	f002 f9e0 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800288a:	2036      	movs	r0, #54	; 0x36
 800288c:	f002 f9f9 	bl	8004c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002890:	bf00      	nop
 8002892:	3728      	adds	r7, #40	; 0x28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40007400 	.word	0x40007400
 800289c:	40021000 	.word	0x40021000

080028a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <HAL_TIM_PWM_MspInit+0x64>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d123      	bne.n	80028fa <HAL_TIM_PWM_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_TIM_PWM_MspInit+0x68>)
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_TIM_PWM_MspInit+0x68>)
 80028b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028bc:	6193      	str	r3, [r2, #24]
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_TIM_PWM_MspInit+0x68>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2105      	movs	r1, #5
 80028ce:	2018      	movs	r0, #24
 80028d0:	f002 f9bb 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80028d4:	2018      	movs	r0, #24
 80028d6:	f002 f9d4 	bl	8004c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2105      	movs	r1, #5
 80028de:	2019      	movs	r0, #25
 80028e0:	f002 f9b3 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80028e4:	2019      	movs	r0, #25
 80028e6:	f002 f9cc 	bl	8004c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2105      	movs	r1, #5
 80028ee:	201b      	movs	r0, #27
 80028f0:	f002 f9ab 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80028f4:	201b      	movs	r0, #27
 80028f6:	f002 f9c4 	bl	8004c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40021000 	.word	0x40021000

0800290c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	; 0x30
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d10c      	bne.n	8002948 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a3c      	ldr	r2, [pc, #240]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	61d3      	str	r3, [r2, #28]
 800293a:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002946:	e069      	b.n	8002a1c <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM6)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a36      	ldr	r2, [pc, #216]	; (8002a28 <HAL_TIM_Base_MspInit+0x11c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d114      	bne.n	800297c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002952:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4a33      	ldr	r2, [pc, #204]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 8002958:	f043 0310 	orr.w	r3, r3, #16
 800295c:	61d3      	str	r3, [r2, #28]
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2105      	movs	r1, #5
 800296e:	2036      	movs	r0, #54	; 0x36
 8002970:	f002 f96b 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002974:	2036      	movs	r0, #54	; 0x36
 8002976:	f002 f984 	bl	8004c82 <HAL_NVIC_EnableIRQ>
}
 800297a:	e04f      	b.n	8002a1c <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM15)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2a      	ldr	r2, [pc, #168]	; (8002a2c <HAL_TIM_Base_MspInit+0x120>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d131      	bne.n	80029ea <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002986:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6193      	str	r3, [r2, #24]
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	6153      	str	r3, [r2, #20]
 80029aa:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMIN_Pin;
 80029b6:	2304      	movs	r3, #4
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ba:	2302      	movs	r3, #2
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029be:	2302      	movs	r3, #2
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80029c6:	2309      	movs	r3, #9
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWMIN_GPIO_Port, &GPIO_InitStruct);
 80029ca:	f107 031c 	add.w	r3, r7, #28
 80029ce:	4619      	mov	r1, r3
 80029d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d4:	f002 fc68 	bl	80052a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80029d8:	2200      	movs	r2, #0
 80029da:	2105      	movs	r1, #5
 80029dc:	2018      	movs	r0, #24
 80029de:	f002 f934 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80029e2:	2018      	movs	r0, #24
 80029e4:	f002 f94d 	bl	8004c82 <HAL_NVIC_EnableIRQ>
}
 80029e8:	e018      	b.n	8002a1c <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM16)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a10      	ldr	r2, [pc, #64]	; (8002a30 <HAL_TIM_Base_MspInit+0x124>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d113      	bne.n	8002a1c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 80029fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fe:	6193      	str	r3, [r2, #24]
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_TIM_Base_MspInit+0x118>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2105      	movs	r1, #5
 8002a10:	2019      	movs	r0, #25
 8002a12:	f002 f91a 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a16:	2019      	movs	r0, #25
 8002a18:	f002 f933 	bl	8004c82 <HAL_NVIC_EnableIRQ>
}
 8002a1c:	bf00      	nop
 8002a1e:	3730      	adds	r7, #48	; 0x30
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40001000 	.word	0x40001000
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	40014400 	.word	0x40014400

08002a34 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_TIM_OC_MspInit+0x44>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d113      	bne.n	8002a6e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_TIM_OC_MspInit+0x48>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <HAL_TIM_OC_MspInit+0x48>)
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	61d3      	str	r3, [r2, #28]
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_TIM_OC_MspInit+0x48>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2105      	movs	r1, #5
 8002a62:	201d      	movs	r0, #29
 8002a64:	f002 f8f1 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a68:	201d      	movs	r0, #29
 8002a6a:	f002 f90a 	bl	8004c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40021000 	.word	0x40021000

08002a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <HAL_TIM_MspPostInit+0x68>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d11d      	bne.n	8002ade <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	6153      	str	r3, [r2, #20]
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMOUT_Pin;
 8002aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002abe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002acc:	2306      	movs	r3, #6
 8002ace:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOUT_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ada:	f002 fbe5 	bl	80052a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ade:	bf00      	nop
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40021000 	.word	0x40021000

08002af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <HAL_UART_MspInit+0xcc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d14f      	bne.n	8002bb2 <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b12:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_UART_MspInit+0xd0>)
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <HAL_UART_MspInit+0xd0>)
 8002b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b1c:	6193      	str	r3, [r2, #24]
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <HAL_UART_MspInit+0xd0>)
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_UART_MspInit+0xd0>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <HAL_UART_MspInit+0xd0>)
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b34:	6153      	str	r3, [r2, #20]
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_UART_MspInit+0xd0>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b50:	2303      	movs	r3, #3
 8002b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b54:	2307      	movs	r3, #7
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b62:	f002 fba1 	bl	80052a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002b66:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002b68:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <HAL_UART_MspInit+0xd8>)
 8002b6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b6c:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b84:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b96:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002b98:	f002 f9d2 	bl	8004f40 <HAL_DMA_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002ba2:	f7ff fc43 	bl	800242c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a06      	ldr	r2, [pc, #24]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002baa:	671a      	str	r2, [r3, #112]	; 0x70
 8002bac:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <HAL_UART_MspInit+0xd4>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bb2:	bf00      	nop
 8002bb4:	3728      	adds	r7, #40	; 0x28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	20003da4 	.word	0x20003da4
 8002bc8:	40020058 	.word	0x40020058

08002bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08c      	sub	sp, #48	; 0x30
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	2037      	movs	r0, #55	; 0x37
 8002be2:	f002 f832 	bl	8004c4a <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002be6:	2037      	movs	r0, #55	; 0x37
 8002be8:	f002 f84b 	bl	8004c82 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002bec:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <HAL_InitTick+0xa0>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <HAL_InitTick+0xa0>)
 8002bf2:	f043 0320 	orr.w	r3, r3, #32
 8002bf6:	61d3      	str	r3, [r2, #28]
 8002bf8:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <HAL_InitTick+0xa0>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c04:	f107 0210 	add.w	r2, r7, #16
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 fe1c 	bl	800684c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c14:	f003 fdd6 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <HAL_InitTick+0xa4>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0c9b      	lsrs	r3, r3, #18
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_InitTick+0xa8>)
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <HAL_InitTick+0xac>)
 8002c30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <HAL_InitTick+0xa8>)
 8002c34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c38:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <HAL_InitTick+0xa8>)
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_InitTick+0xa8>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_InitTick+0xa8>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002c4c:	4809      	ldr	r0, [pc, #36]	; (8002c74 <HAL_InitTick+0xa8>)
 8002c4e:	f003 ffdf 	bl	8006c10 <HAL_TIM_Base_Init>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d104      	bne.n	8002c62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002c58:	4806      	ldr	r0, [pc, #24]	; (8002c74 <HAL_InitTick+0xa8>)
 8002c5a:	f004 f893 	bl	8006d84 <HAL_TIM_Base_Start_IT>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	e000      	b.n	8002c64 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3730      	adds	r7, #48	; 0x30
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	431bde83 	.word	0x431bde83
 8002c74:	2000424c 	.word	0x2000424c
 8002c78:	40001400 	.word	0x40001400

08002c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c80:	e7fe      	b.n	8002c80 <NMI_Handler+0x4>

08002c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c86:	e7fe      	b.n	8002c86 <HardFault_Handler+0x4>

08002c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <MemManage_Handler+0x4>

08002c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c92:	e7fe      	b.n	8002c92 <BusFault_Handler+0x4>

08002c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <UsageFault_Handler+0x4>

08002c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <DMA1_Channel5_IRQHandler+0x10>)
 8002cae:	f002 f9ed 	bl	800508c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20003da4 	.word	0x20003da4

08002cbc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <ADC1_2_IRQHandler+0x10>)
 8002cc2:	f000 fc51 	bl	8003568 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20003c88 	.word	0x20003c88

08002cd0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cd4:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002cd6:	f004 fca7 	bl	8007628 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002cda:	4803      	ldr	r0, [pc, #12]	; (8002ce8 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002cdc:	f004 fca4 	bl	8007628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20003fa0 	.word	0x20003fa0
 8002ce8:	20003cd8 	.word	0x20003cd8

08002cec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cf0:	4803      	ldr	r0, [pc, #12]	; (8002d00 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002cf2:	f004 fc99 	bl	8007628 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002cf6:	4803      	ldr	r0, [pc, #12]	; (8002d04 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002cf8:	f004 fc96 	bl	8007628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20003fa0 	.word	0x20003fa0
 8002d04:	200041d8 	.word	0x200041d8

08002d08 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <TIM1_CC_IRQHandler+0x10>)
 8002d0e:	f004 fc8b 	bl	8007628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20003fa0 	.word	0x20003fa0

08002d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <TIM3_IRQHandler+0x10>)
 8002d22:	f004 fc81 	bl	8007628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20003d58 	.word	0x20003d58

08002d30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d34:	4803      	ldr	r0, [pc, #12]	; (8002d44 <TIM6_DAC_IRQHandler+0x14>)
 8002d36:	f004 fc77 	bl	8007628 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8002d3a:	4803      	ldr	r0, [pc, #12]	; (8002d48 <TIM6_DAC_IRQHandler+0x18>)
 8002d3c:	f002 f84f 	bl	8004dde <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20003f50 	.word	0x20003f50
 8002d48:	20003e70 	.word	0x20003e70

08002d4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d50:	4802      	ldr	r0, [pc, #8]	; (8002d5c <TIM7_IRQHandler+0x10>)
 8002d52:	f004 fc69 	bl	8007628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000424c 	.word	0x2000424c

08002d60 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002d64:	4802      	ldr	r0, [pc, #8]	; (8002d70 <DMA2_Channel1_IRQHandler+0x10>)
 8002d66:	f002 f991 	bl	800508c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20004194 	.word	0x20004194

08002d74 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8002d78:	4805      	ldr	r0, [pc, #20]	; (8002d90 <COMP1_2_3_IRQHandler+0x1c>)
 8002d7a:	f001 fe27 	bl	80049cc <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 8002d7e:	4805      	ldr	r0, [pc, #20]	; (8002d94 <COMP1_2_3_IRQHandler+0x20>)
 8002d80:	f001 fe24 	bl	80049cc <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp3);
 8002d84:	4804      	ldr	r0, [pc, #16]	; (8002d98 <COMP1_2_3_IRQHandler+0x24>)
 8002d86:	f001 fe21 	bl	80049cc <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20003d24 	.word	0x20003d24
 8002d94:	20003fec 	.word	0x20003fec
 8002d98:	2000401c 	.word	0x2000401c

08002d9c <_sbrk>:
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <_sbrk+0x5c>)
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <_sbrk+0x60>)
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <_sbrk+0x22>
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <_sbrk+0x64>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <_sbrk+0x68>)
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <_sbrk+0x64>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d207      	bcs.n	8002ddc <_sbrk+0x40>
 8002dcc:	f009 fbde 	bl	800c58c <__errno>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	e009      	b.n	8002df0 <_sbrk+0x54>
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <_sbrk+0x64>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <_sbrk+0x64>)
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	2000a000 	.word	0x2000a000
 8002dfc:	00000400 	.word	0x00000400
 8002e00:	20000260 	.word	0x20000260
 8002e04:	200042f0 	.word	0x200042f0

08002e08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <SystemInit+0x20>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <SystemInit+0x20>)
 8002e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <Reset_Handler>:
 8002e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e64 <LoopForever+0x2>
 8002e30:	480d      	ldr	r0, [pc, #52]	; (8002e68 <LoopForever+0x6>)
 8002e32:	490e      	ldr	r1, [pc, #56]	; (8002e6c <LoopForever+0xa>)
 8002e34:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <LoopForever+0xe>)
 8002e36:	2300      	movs	r3, #0
 8002e38:	e002      	b.n	8002e40 <LoopCopyDataInit>

08002e3a <CopyDataInit>:
 8002e3a:	58d4      	ldr	r4, [r2, r3]
 8002e3c:	50c4      	str	r4, [r0, r3]
 8002e3e:	3304      	adds	r3, #4

08002e40 <LoopCopyDataInit>:
 8002e40:	18c4      	adds	r4, r0, r3
 8002e42:	428c      	cmp	r4, r1
 8002e44:	d3f9      	bcc.n	8002e3a <CopyDataInit>
 8002e46:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <LoopForever+0x12>)
 8002e48:	4c0b      	ldr	r4, [pc, #44]	; (8002e78 <LoopForever+0x16>)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e001      	b.n	8002e52 <LoopFillZerobss>

08002e4e <FillZerobss>:
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	3204      	adds	r2, #4

08002e52 <LoopFillZerobss>:
 8002e52:	42a2      	cmp	r2, r4
 8002e54:	d3fb      	bcc.n	8002e4e <FillZerobss>
 8002e56:	f7ff ffd7 	bl	8002e08 <SystemInit>
 8002e5a:	f009 fb9d 	bl	800c598 <__libc_init_array>
 8002e5e:	f7fe f971 	bl	8001144 <main>

08002e62 <LoopForever>:
 8002e62:	e7fe      	b.n	8002e62 <LoopForever>
 8002e64:	2000a000 	.word	0x2000a000
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	200001f8 	.word	0x200001f8
 8002e70:	0800f76c 	.word	0x0800f76c
 8002e74:	200001f8 	.word	0x200001f8
 8002e78:	200042ec 	.word	0x200042ec

08002e7c <ADC3_IRQHandler>:
 8002e7c:	e7fe      	b.n	8002e7c <ADC3_IRQHandler>
	...

08002e80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_Init+0x28>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <HAL_Init+0x28>)
 8002e8a:	f043 0310 	orr.w	r3, r3, #16
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e90:	2003      	movs	r0, #3
 8002e92:	f001 fecf 	bl	8004c34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e96:	200f      	movs	r0, #15
 8002e98:	f7ff fe98 	bl	8002bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e9c:	f7ff fb92 	bl	80025c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40022000 	.word	0x40022000

08002eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x20>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_IncTick+0x24>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <HAL_IncTick+0x24>)
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000020 	.word	0x20000020
 8002ed0:	20004298 	.word	0x20004298

08002ed4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_GetTick+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20004298 	.word	0x20004298

08002eec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff ffee 	bl	8002ed4 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d005      	beq.n	8002f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_Delay+0x44>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f12:	bf00      	nop
 8002f14:	f7ff ffde 	bl	8002ed4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d8f7      	bhi.n	8002f14 <HAL_Delay+0x28>
  {
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000020 	.word	0x20000020

08002f34 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b09a      	sub	sp, #104	; 0x68
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e1c9      	b.n	8003324 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d176      	bne.n	8003090 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d152      	bne.n	8003050 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fb25 	bl	8002614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d13b      	bne.n	8003050 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f001 f9af 	bl	800433c <ADC_Disable>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d12f      	bne.n	8003050 <HAL_ADC_Init+0xe0>
 8002ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d12b      	bne.n	8003050 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003000:	f023 0302 	bic.w	r3, r3, #2
 8003004:	f043 0202 	orr.w	r2, r3, #2
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800301a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800302a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800302c:	4b86      	ldr	r3, [pc, #536]	; (8003248 <HAL_ADC_Init+0x2d8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a86      	ldr	r2, [pc, #536]	; (800324c <HAL_ADC_Init+0x2dc>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	0c9a      	lsrs	r2, r3, #18
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003042:	e002      	b.n	800304a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3b01      	subs	r3, #1
 8003048:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f9      	bne.n	8003044 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800306c:	d110      	bne.n	8003090 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f023 0312 	bic.w	r3, r3, #18
 8003076:	f043 0210 	orr.w	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	f040 8136 	bne.w	800330a <HAL_ADC_Init+0x39a>
 800309e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 8131 	bne.w	800330a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 8129 	bne.w	800330a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030c0:	f043 0202 	orr.w	r2, r3, #2
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d0:	d004      	beq.n	80030dc <HAL_ADC_Init+0x16c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a5e      	ldr	r2, [pc, #376]	; (8003250 <HAL_ADC_Init+0x2e0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d101      	bne.n	80030e0 <HAL_ADC_Init+0x170>
 80030dc:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <HAL_ADC_Init+0x2e4>)
 80030de:	e000      	b.n	80030e2 <HAL_ADC_Init+0x172>
 80030e0:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <HAL_ADC_Init+0x2e8>)
 80030e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ec:	d102      	bne.n	80030f4 <HAL_ADC_Init+0x184>
 80030ee:	4b58      	ldr	r3, [pc, #352]	; (8003250 <HAL_ADC_Init+0x2e0>)
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	e01a      	b.n	800312a <HAL_ADC_Init+0x1ba>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a55      	ldr	r2, [pc, #340]	; (8003250 <HAL_ADC_Init+0x2e0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d103      	bne.n	8003106 <HAL_ADC_Init+0x196>
 80030fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e011      	b.n	800312a <HAL_ADC_Init+0x1ba>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a54      	ldr	r2, [pc, #336]	; (800325c <HAL_ADC_Init+0x2ec>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d102      	bne.n	8003116 <HAL_ADC_Init+0x1a6>
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_ADC_Init+0x2f0>)
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e009      	b.n	800312a <HAL_ADC_Init+0x1ba>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a51      	ldr	r2, [pc, #324]	; (8003260 <HAL_ADC_Init+0x2f0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d102      	bne.n	8003126 <HAL_ADC_Init+0x1b6>
 8003120:	4b4e      	ldr	r3, [pc, #312]	; (800325c <HAL_ADC_Init+0x2ec>)
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e001      	b.n	800312a <HAL_ADC_Init+0x1ba>
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d108      	bne.n	800314a <HAL_ADC_Init+0x1da>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_ADC_Init+0x1da>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_ADC_Init+0x1dc>
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11c      	bne.n	800318a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003150:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003152:	2b00      	cmp	r3, #0
 8003154:	d010      	beq.n	8003178 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_ADC_Init+0x202>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_ADC_Init+0x202>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_ADC_Init+0x204>
 8003172:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003174:	2b00      	cmp	r3, #0
 8003176:	d108      	bne.n	800318a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	431a      	orrs	r2, r3
 8003186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003188:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	7e5b      	ldrb	r3, [r3, #25]
 800318e:	035b      	lsls	r3, r3, #13
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003194:	2a01      	cmp	r2, #1
 8003196:	d002      	beq.n	800319e <HAL_ADC_Init+0x22e>
 8003198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800319c:	e000      	b.n	80031a0 <HAL_ADC_Init+0x230>
 800319e:	2200      	movs	r2, #0
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031b0:	4313      	orrs	r3, r2
 80031b2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d11b      	bne.n	80031f6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7e5b      	ldrb	r3, [r3, #25]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	3b01      	subs	r3, #1
 80031cc:	045a      	lsls	r2, r3, #17
 80031ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d6:	663b      	str	r3, [r7, #96]	; 0x60
 80031d8:	e00d      	b.n	80031f6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80031e2:	f043 0220 	orr.w	r2, r3, #32
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d03a      	beq.n	8003274 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a16      	ldr	r2, [pc, #88]	; (800325c <HAL_ADC_Init+0x2ec>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_ADC_Init+0x2a2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <HAL_ADC_Init+0x2f0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d128      	bne.n	8003264 <HAL_ADC_Init+0x2f4>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800321a:	d012      	beq.n	8003242 <HAL_ADC_Init+0x2d2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003224:	d00a      	beq.n	800323c <HAL_ADC_Init+0x2cc>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800322e:	d002      	beq.n	8003236 <HAL_ADC_Init+0x2c6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	e018      	b.n	8003268 <HAL_ADC_Init+0x2f8>
 8003236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800323a:	e015      	b.n	8003268 <HAL_ADC_Init+0x2f8>
 800323c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003240:	e012      	b.n	8003268 <HAL_ADC_Init+0x2f8>
 8003242:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003246:	e00f      	b.n	8003268 <HAL_ADC_Init+0x2f8>
 8003248:	20000018 	.word	0x20000018
 800324c:	431bde83 	.word	0x431bde83
 8003250:	50000100 	.word	0x50000100
 8003254:	50000300 	.word	0x50000300
 8003258:	50000700 	.word	0x50000700
 800325c:	50000400 	.word	0x50000400
 8003260:	50000500 	.word	0x50000500
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800326c:	4313      	orrs	r3, r2
 800326e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003270:	4313      	orrs	r3, r2
 8003272:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b00      	cmp	r3, #0
 8003280:	d114      	bne.n	80032ac <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003290:	f023 0302 	bic.w	r3, r3, #2
 8003294:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7e1b      	ldrb	r3, [r3, #24]
 800329a:	039a      	lsls	r2, r3, #14
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4313      	orrs	r3, r2
 80032a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032a8:	4313      	orrs	r3, r2
 80032aa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	4b1e      	ldr	r3, [pc, #120]	; (800332c <HAL_ADC_Init+0x3bc>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80032bc:	430b      	orrs	r3, r1
 80032be:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10c      	bne.n	80032e2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f023 010f 	bic.w	r1, r3, #15
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
 80032e0:	e007      	b.n	80032f2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 020f 	bic.w	r2, r2, #15
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f023 0303 	bic.w	r3, r3, #3
 8003300:	f043 0201 	orr.w	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
 8003308:	e00a      	b.n	8003320 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f023 0312 	bic.w	r3, r3, #18
 8003312:	f043 0210 	orr.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003320:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003324:	4618      	mov	r0, r3
 8003326:	3768      	adds	r7, #104	; 0x68
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	fff0c007 	.word	0xfff0c007

08003330 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 80f7 	bne.w	800353e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_ADC_Start_DMA+0x2e>
 800335a:	2302      	movs	r3, #2
 800335c:	e0f2      	b.n	8003544 <HAL_ADC_Start_DMA+0x214>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800336e:	d004      	beq.n	800337a <HAL_ADC_Start_DMA+0x4a>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a75      	ldr	r2, [pc, #468]	; (800354c <HAL_ADC_Start_DMA+0x21c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d109      	bne.n	800338e <HAL_ADC_Start_DMA+0x5e>
 800337a:	4b75      	ldr	r3, [pc, #468]	; (8003550 <HAL_ADC_Start_DMA+0x220>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e008      	b.n	80033a0 <HAL_ADC_Start_DMA+0x70>
 800338e:	4b71      	ldr	r3, [pc, #452]	; (8003554 <HAL_ADC_Start_DMA+0x224>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80c5 	beq.w	8003530 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 ff64 	bl	8004274 <ADC_Enable>
 80033ac:	4603      	mov	r3, r0
 80033ae:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 80b7 	bne.w	8003526 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033d4:	d004      	beq.n	80033e0 <HAL_ADC_Start_DMA+0xb0>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a5c      	ldr	r2, [pc, #368]	; (800354c <HAL_ADC_Start_DMA+0x21c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d106      	bne.n	80033ee <HAL_ADC_Start_DMA+0xbe>
 80033e0:	4b5b      	ldr	r3, [pc, #364]	; (8003550 <HAL_ADC_Start_DMA+0x220>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d010      	beq.n	800340e <HAL_ADC_Start_DMA+0xde>
 80033ec:	e005      	b.n	80033fa <HAL_ADC_Start_DMA+0xca>
 80033ee:	4b59      	ldr	r3, [pc, #356]	; (8003554 <HAL_ADC_Start_DMA+0x224>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_ADC_Start_DMA+0xde>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003402:	d004      	beq.n	800340e <HAL_ADC_Start_DMA+0xde>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a53      	ldr	r2, [pc, #332]	; (8003558 <HAL_ADC_Start_DMA+0x228>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d115      	bne.n	800343a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d036      	beq.n	8003496 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003430:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003438:	e02d      	b.n	8003496 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344e:	d004      	beq.n	800345a <HAL_ADC_Start_DMA+0x12a>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a3d      	ldr	r2, [pc, #244]	; (800354c <HAL_ADC_Start_DMA+0x21c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d10a      	bne.n	8003470 <HAL_ADC_Start_DMA+0x140>
 800345a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e008      	b.n	8003482 <HAL_ADC_Start_DMA+0x152>
 8003470:	4b39      	ldr	r3, [pc, #228]	; (8003558 <HAL_ADC_Start_DMA+0x228>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf14      	ite	ne
 800347c:	2301      	movne	r3, #1
 800347e:	2300      	moveq	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800348e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a2:	d106      	bne.n	80034b2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f023 0206 	bic.w	r2, r3, #6
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	645a      	str	r2, [r3, #68]	; 0x44
 80034b0:	e002      	b.n	80034b8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	4a25      	ldr	r2, [pc, #148]	; (800355c <HAL_ADC_Start_DMA+0x22c>)
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	4a24      	ldr	r2, [pc, #144]	; (8003560 <HAL_ADC_Start_DMA+0x230>)
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	4a23      	ldr	r2, [pc, #140]	; (8003564 <HAL_ADC_Start_DMA+0x234>)
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	221c      	movs	r2, #28
 80034de:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0210 	orr.w	r2, r2, #16
 80034ee:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3340      	adds	r3, #64	; 0x40
 800350a:	4619      	mov	r1, r3
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f001 fd5d 	bl	8004fce <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0204 	orr.w	r2, r2, #4
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	e00d      	b.n	8003542 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800352e:	e008      	b.n	8003542 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800353c:	e001      	b.n	8003542 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	50000100 	.word	0x50000100
 8003550:	50000300 	.word	0x50000300
 8003554:	50000700 	.word	0x50000700
 8003558:	50000400 	.word	0x50000400
 800355c:	080041a9 	.word	0x080041a9
 8003560:	08004223 	.word	0x08004223
 8003564:	0800423f 	.word	0x0800423f

08003568 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d106      	bne.n	8003598 <HAL_ADC_IRQHandler+0x30>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b04      	cmp	r3, #4
 8003596:	d00f      	beq.n	80035b8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	f040 80c0 	bne.w	8003728 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	f040 80b8 	bne.w	8003728 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d8:	d004      	beq.n	80035e4 <HAL_ADC_IRQHandler+0x7c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a95      	ldr	r2, [pc, #596]	; (8003834 <HAL_ADC_IRQHandler+0x2cc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d106      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x8a>
 80035e4:	4b94      	ldr	r3, [pc, #592]	; (8003838 <HAL_ADC_IRQHandler+0x2d0>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d03e      	beq.n	800366e <HAL_ADC_IRQHandler+0x106>
 80035f0:	e005      	b.n	80035fe <HAL_ADC_IRQHandler+0x96>
 80035f2:	4b92      	ldr	r3, [pc, #584]	; (800383c <HAL_ADC_IRQHandler+0x2d4>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d037      	beq.n	800366e <HAL_ADC_IRQHandler+0x106>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003606:	d004      	beq.n	8003612 <HAL_ADC_IRQHandler+0xaa>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a89      	ldr	r2, [pc, #548]	; (8003834 <HAL_ADC_IRQHandler+0x2cc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d106      	bne.n	8003620 <HAL_ADC_IRQHandler+0xb8>
 8003612:	4b89      	ldr	r3, [pc, #548]	; (8003838 <HAL_ADC_IRQHandler+0x2d0>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	2b05      	cmp	r3, #5
 800361c:	d027      	beq.n	800366e <HAL_ADC_IRQHandler+0x106>
 800361e:	e005      	b.n	800362c <HAL_ADC_IRQHandler+0xc4>
 8003620:	4b86      	ldr	r3, [pc, #536]	; (800383c <HAL_ADC_IRQHandler+0x2d4>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2b05      	cmp	r3, #5
 800362a:	d020      	beq.n	800366e <HAL_ADC_IRQHandler+0x106>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003634:	d004      	beq.n	8003640 <HAL_ADC_IRQHandler+0xd8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a7e      	ldr	r2, [pc, #504]	; (8003834 <HAL_ADC_IRQHandler+0x2cc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d106      	bne.n	800364e <HAL_ADC_IRQHandler+0xe6>
 8003640:	4b7d      	ldr	r3, [pc, #500]	; (8003838 <HAL_ADC_IRQHandler+0x2d0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2b09      	cmp	r3, #9
 800364a:	d010      	beq.n	800366e <HAL_ADC_IRQHandler+0x106>
 800364c:	e005      	b.n	800365a <HAL_ADC_IRQHandler+0xf2>
 800364e:	4b7b      	ldr	r3, [pc, #492]	; (800383c <HAL_ADC_IRQHandler+0x2d4>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2b09      	cmp	r3, #9
 8003658:	d009      	beq.n	800366e <HAL_ADC_IRQHandler+0x106>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003662:	d004      	beq.n	800366e <HAL_ADC_IRQHandler+0x106>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a75      	ldr	r2, [pc, #468]	; (8003840 <HAL_ADC_IRQHandler+0x2d8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d104      	bne.n	8003678 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	e00f      	b.n	8003698 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003680:	d004      	beq.n	800368c <HAL_ADC_IRQHandler+0x124>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6b      	ldr	r2, [pc, #428]	; (8003834 <HAL_ADC_IRQHandler+0x2cc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d102      	bne.n	8003692 <HAL_ADC_IRQHandler+0x12a>
 800368c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003690:	e000      	b.n	8003694 <HAL_ADC_IRQHandler+0x12c>
 8003692:	4b6b      	ldr	r3, [pc, #428]	; (8003840 <HAL_ADC_IRQHandler+0x2d8>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d139      	bne.n	800371a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d134      	bne.n	800371a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d12d      	bne.n	800371a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11a      	bne.n	8003702 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 020c 	bic.w	r2, r2, #12
 80036da:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d112      	bne.n	800371a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003700:	e00b      	b.n	800371a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f043 0210 	orr.w	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f043 0201 	orr.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fe fa9a 	bl	8001c54 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	220c      	movs	r2, #12
 8003726:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b20      	cmp	r3, #32
 8003734:	d106      	bne.n	8003744 <HAL_ADC_IRQHandler+0x1dc>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b20      	cmp	r3, #32
 8003742:	d00f      	beq.n	8003764 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	f040 813c 	bne.w	80039cc <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	f040 8134 	bne.w	80039cc <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003778:	d004      	beq.n	8003784 <HAL_ADC_IRQHandler+0x21c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2d      	ldr	r2, [pc, #180]	; (8003834 <HAL_ADC_IRQHandler+0x2cc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d106      	bne.n	8003792 <HAL_ADC_IRQHandler+0x22a>
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <HAL_ADC_IRQHandler+0x2d0>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2b00      	cmp	r3, #0
 800378e:	d03e      	beq.n	800380e <HAL_ADC_IRQHandler+0x2a6>
 8003790:	e005      	b.n	800379e <HAL_ADC_IRQHandler+0x236>
 8003792:	4b2a      	ldr	r3, [pc, #168]	; (800383c <HAL_ADC_IRQHandler+0x2d4>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	2b00      	cmp	r3, #0
 800379c:	d037      	beq.n	800380e <HAL_ADC_IRQHandler+0x2a6>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a6:	d004      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x24a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a21      	ldr	r2, [pc, #132]	; (8003834 <HAL_ADC_IRQHandler+0x2cc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d106      	bne.n	80037c0 <HAL_ADC_IRQHandler+0x258>
 80037b2:	4b21      	ldr	r3, [pc, #132]	; (8003838 <HAL_ADC_IRQHandler+0x2d0>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d027      	beq.n	800380e <HAL_ADC_IRQHandler+0x2a6>
 80037be:	e005      	b.n	80037cc <HAL_ADC_IRQHandler+0x264>
 80037c0:	4b1e      	ldr	r3, [pc, #120]	; (800383c <HAL_ADC_IRQHandler+0x2d4>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d020      	beq.n	800380e <HAL_ADC_IRQHandler+0x2a6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037d4:	d004      	beq.n	80037e0 <HAL_ADC_IRQHandler+0x278>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a16      	ldr	r2, [pc, #88]	; (8003834 <HAL_ADC_IRQHandler+0x2cc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d106      	bne.n	80037ee <HAL_ADC_IRQHandler+0x286>
 80037e0:	4b15      	ldr	r3, [pc, #84]	; (8003838 <HAL_ADC_IRQHandler+0x2d0>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2b09      	cmp	r3, #9
 80037ea:	d010      	beq.n	800380e <HAL_ADC_IRQHandler+0x2a6>
 80037ec:	e005      	b.n	80037fa <HAL_ADC_IRQHandler+0x292>
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_ADC_IRQHandler+0x2d4>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2b09      	cmp	r3, #9
 80037f8:	d009      	beq.n	800380e <HAL_ADC_IRQHandler+0x2a6>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003802:	d004      	beq.n	800380e <HAL_ADC_IRQHandler+0x2a6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0d      	ldr	r2, [pc, #52]	; (8003840 <HAL_ADC_IRQHandler+0x2d8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d104      	bne.n	8003818 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	e018      	b.n	800384a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003820:	d004      	beq.n	800382c <HAL_ADC_IRQHandler+0x2c4>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a03      	ldr	r2, [pc, #12]	; (8003834 <HAL_ADC_IRQHandler+0x2cc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10b      	bne.n	8003844 <HAL_ADC_IRQHandler+0x2dc>
 800382c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003830:	e009      	b.n	8003846 <HAL_ADC_IRQHandler+0x2de>
 8003832:	bf00      	nop
 8003834:	50000100 	.word	0x50000100
 8003838:	50000300 	.word	0x50000300
 800383c:	50000700 	.word	0x50000700
 8003840:	50000400 	.word	0x50000400
 8003844:	4b9d      	ldr	r3, [pc, #628]	; (8003abc <HAL_ADC_IRQHandler+0x554>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003850:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003854:	2b00      	cmp	r3, #0
 8003856:	f040 80b2 	bne.w	80039be <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 80a5 	bne.w	80039be <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 809f 	bne.w	80039be <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	f040 8097 	bne.w	80039be <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003898:	d004      	beq.n	80038a4 <HAL_ADC_IRQHandler+0x33c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a88      	ldr	r2, [pc, #544]	; (8003ac0 <HAL_ADC_IRQHandler+0x558>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d106      	bne.n	80038b2 <HAL_ADC_IRQHandler+0x34a>
 80038a4:	4b87      	ldr	r3, [pc, #540]	; (8003ac4 <HAL_ADC_IRQHandler+0x55c>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d03e      	beq.n	800392e <HAL_ADC_IRQHandler+0x3c6>
 80038b0:	e005      	b.n	80038be <HAL_ADC_IRQHandler+0x356>
 80038b2:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <HAL_ADC_IRQHandler+0x560>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d037      	beq.n	800392e <HAL_ADC_IRQHandler+0x3c6>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038c6:	d004      	beq.n	80038d2 <HAL_ADC_IRQHandler+0x36a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a7c      	ldr	r2, [pc, #496]	; (8003ac0 <HAL_ADC_IRQHandler+0x558>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d106      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x378>
 80038d2:	4b7c      	ldr	r3, [pc, #496]	; (8003ac4 <HAL_ADC_IRQHandler+0x55c>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d027      	beq.n	800392e <HAL_ADC_IRQHandler+0x3c6>
 80038de:	e005      	b.n	80038ec <HAL_ADC_IRQHandler+0x384>
 80038e0:	4b79      	ldr	r3, [pc, #484]	; (8003ac8 <HAL_ADC_IRQHandler+0x560>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	2b06      	cmp	r3, #6
 80038ea:	d020      	beq.n	800392e <HAL_ADC_IRQHandler+0x3c6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f4:	d004      	beq.n	8003900 <HAL_ADC_IRQHandler+0x398>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a71      	ldr	r2, [pc, #452]	; (8003ac0 <HAL_ADC_IRQHandler+0x558>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d106      	bne.n	800390e <HAL_ADC_IRQHandler+0x3a6>
 8003900:	4b70      	ldr	r3, [pc, #448]	; (8003ac4 <HAL_ADC_IRQHandler+0x55c>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	2b07      	cmp	r3, #7
 800390a:	d010      	beq.n	800392e <HAL_ADC_IRQHandler+0x3c6>
 800390c:	e005      	b.n	800391a <HAL_ADC_IRQHandler+0x3b2>
 800390e:	4b6e      	ldr	r3, [pc, #440]	; (8003ac8 <HAL_ADC_IRQHandler+0x560>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2b07      	cmp	r3, #7
 8003918:	d009      	beq.n	800392e <HAL_ADC_IRQHandler+0x3c6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003922:	d004      	beq.n	800392e <HAL_ADC_IRQHandler+0x3c6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a64      	ldr	r2, [pc, #400]	; (8003abc <HAL_ADC_IRQHandler+0x554>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d104      	bne.n	8003938 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	e00f      	b.n	8003958 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003940:	d004      	beq.n	800394c <HAL_ADC_IRQHandler+0x3e4>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a5e      	ldr	r2, [pc, #376]	; (8003ac0 <HAL_ADC_IRQHandler+0x558>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d102      	bne.n	8003952 <HAL_ADC_IRQHandler+0x3ea>
 800394c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003950:	e000      	b.n	8003954 <HAL_ADC_IRQHandler+0x3ec>
 8003952:	4b5a      	ldr	r3, [pc, #360]	; (8003abc <HAL_ADC_IRQHandler+0x554>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d12d      	bne.n	80039be <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11a      	bne.n	80039a6 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800397e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d112      	bne.n	80039be <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
 80039a4:	e00b      	b.n	80039be <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f043 0210 	orr.w	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8de 	bl	8003b80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2260      	movs	r2, #96	; 0x60
 80039ca:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b80      	cmp	r3, #128	; 0x80
 80039d8:	d113      	bne.n	8003a02 <HAL_ADC_IRQHandler+0x49a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b80      	cmp	r3, #128	; 0x80
 80039e6:	d10c      	bne.n	8003a02 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff faa7 	bl	8002f48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2280      	movs	r2, #128	; 0x80
 8003a00:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a10:	d115      	bne.n	8003a3e <HAL_ADC_IRQHandler+0x4d6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a20:	d10d      	bne.n	8003a3e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8ba 	bl	8003ba8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4c:	d115      	bne.n	8003a7a <HAL_ADC_IRQHandler+0x512>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5c:	d10d      	bne.n	8003a7a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f8a6 	bl	8003bbc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a78:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d151      	bne.n	8003b2c <HAL_ADC_IRQHandler+0x5c4>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d14a      	bne.n	8003b2c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e02d      	b.n	8003b00 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aac:	d004      	beq.n	8003ab8 <HAL_ADC_IRQHandler+0x550>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a03      	ldr	r2, [pc, #12]	; (8003ac0 <HAL_ADC_IRQHandler+0x558>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d109      	bne.n	8003acc <HAL_ADC_IRQHandler+0x564>
 8003ab8:	4b02      	ldr	r3, [pc, #8]	; (8003ac4 <HAL_ADC_IRQHandler+0x55c>)
 8003aba:	e008      	b.n	8003ace <HAL_ADC_IRQHandler+0x566>
 8003abc:	50000400 	.word	0x50000400
 8003ac0:	50000100 	.word	0x50000100
 8003ac4:	50000300 	.word	0x50000300
 8003ac8:	50000700 	.word	0x50000700
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <HAL_ADC_IRQHandler+0x614>)
 8003ace:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d10a      	bne.n	8003b00 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003aea:	2301      	movs	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e007      	b.n	8003b00 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003afc:	2301      	movs	r3, #1
 8003afe:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10e      	bne.n	8003b24 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f043 0202 	orr.w	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fa1c 	bl	8002f5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2210      	movs	r2, #16
 8003b2a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3a:	d11b      	bne.n	8003b74 <HAL_ADC_IRQHandler+0x60c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4a:	d113      	bne.n	8003b74 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f043 0208 	orr.w	r2, r3, #8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b6c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f810 	bl	8003b94 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003b74:	bf00      	nop
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	50000700 	.word	0x50000700

08003b80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b09b      	sub	sp, #108	; 0x6c
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x22>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e2cb      	b.n	800418a <HAL_ADC_ConfigChannel+0x5ba>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 82af 	bne.w	8004168 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d81c      	bhi.n	8003c4c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	461a      	mov	r2, r3
 8003c26:	231f      	movs	r3, #31
 8003c28:	4093      	lsls	r3, r2
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	4019      	ands	r1, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
 8003c4a:	e063      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b09      	cmp	r3, #9
 8003c52:	d81e      	bhi.n	8003c92 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	3b1e      	subs	r3, #30
 8003c68:	221f      	movs	r2, #31
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	4019      	ands	r1, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	3b1e      	subs	r3, #30
 8003c84:	fa00 f203 	lsl.w	r2, r0, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	635a      	str	r2, [r3, #52]	; 0x34
 8003c90:	e040      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b0e      	cmp	r3, #14
 8003c98:	d81e      	bhi.n	8003cd8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	3b3c      	subs	r3, #60	; 0x3c
 8003cae:	221f      	movs	r2, #31
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	4019      	ands	r1, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	3b3c      	subs	r3, #60	; 0x3c
 8003cca:	fa00 f203 	lsl.w	r2, r0, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38
 8003cd6:	e01d      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	3b5a      	subs	r3, #90	; 0x5a
 8003cec:	221f      	movs	r2, #31
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	4019      	ands	r1, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	3b5a      	subs	r3, #90	; 0x5a
 8003d08:	fa00 f203 	lsl.w	r2, r0, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f040 80e5 	bne.w	8003eee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b09      	cmp	r3, #9
 8003d2a:	d91c      	bls.n	8003d66 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3b1e      	subs	r3, #30
 8003d3e:	2207      	movs	r2, #7
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	4019      	ands	r1, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6898      	ldr	r0, [r3, #8]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	3b1e      	subs	r3, #30
 8003d58:	fa00 f203 	lsl.w	r2, r0, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	619a      	str	r2, [r3, #24]
 8003d64:	e019      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6959      	ldr	r1, [r3, #20]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	2207      	movs	r2, #7
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	4019      	ands	r1, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	6898      	ldr	r0, [r3, #8]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d84f      	bhi.n	8003e5c <HAL_ADC_ConfigChannel+0x28c>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <HAL_ADC_ConfigChannel+0x1f4>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003df7 	.word	0x08003df7
 8003dcc:	08003e19 	.word	0x08003e19
 8003dd0:	08003e3b 	.word	0x08003e3b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dda:	4b9f      	ldr	r3, [pc, #636]	; (8004058 <HAL_ADC_ConfigChannel+0x488>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	0691      	lsls	r1, r2, #26
 8003de4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003de6:	430a      	orrs	r2, r1
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003df2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003df4:	e07e      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003dfc:	4b96      	ldr	r3, [pc, #600]	; (8004058 <HAL_ADC_ConfigChannel+0x488>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	0691      	lsls	r1, r2, #26
 8003e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e14:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003e16:	e06d      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e1e:	4b8e      	ldr	r3, [pc, #568]	; (8004058 <HAL_ADC_ConfigChannel+0x488>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	0691      	lsls	r1, r2, #26
 8003e28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e36:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003e38:	e05c      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e40:	4b85      	ldr	r3, [pc, #532]	; (8004058 <HAL_ADC_ConfigChannel+0x488>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	0691      	lsls	r1, r2, #26
 8003e4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e58:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003e5a:	e04b      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	069b      	lsls	r3, r3, #26
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e7e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	069b      	lsls	r3, r3, #26
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d107      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ea2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	069b      	lsls	r3, r3, #26
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d107      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ec6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ece:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	069b      	lsls	r3, r3, #26
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d10a      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003eea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003eec:	e001      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003ef2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x344>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x344>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x346>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f040 8131 	bne.w	800417e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d00f      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43da      	mvns	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003f42:	e049      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2201      	movs	r2, #1
 8003f52:	409a      	lsls	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b09      	cmp	r3, #9
 8003f64:	d91c      	bls.n	8003fa0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6999      	ldr	r1, [r3, #24]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	3b1b      	subs	r3, #27
 8003f78:	2207      	movs	r2, #7
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	4019      	ands	r1, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6898      	ldr	r0, [r3, #8]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	3b1b      	subs	r3, #27
 8003f92:	fa00 f203 	lsl.w	r2, r0, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	619a      	str	r2, [r3, #24]
 8003f9e:	e01b      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6959      	ldr	r1, [r3, #20]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	4613      	mov	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	2207      	movs	r2, #7
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	4019      	ands	r1, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6898      	ldr	r0, [r3, #8]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fe0:	d004      	beq.n	8003fec <HAL_ADC_ConfigChannel+0x41c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	; (800405c <HAL_ADC_ConfigChannel+0x48c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x420>
 8003fec:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <HAL_ADC_ConfigChannel+0x490>)
 8003fee:	e000      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x422>
 8003ff0:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <HAL_ADC_ConfigChannel+0x494>)
 8003ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d105      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800400c:	2b11      	cmp	r3, #17
 800400e:	d105      	bne.n	800401c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004020:	2b12      	cmp	r3, #18
 8004022:	f040 80ac 	bne.w	800417e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800402e:	2b00      	cmp	r3, #0
 8004030:	f040 80a5 	bne.w	800417e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800403c:	d102      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x474>
 800403e:	4b07      	ldr	r3, [pc, #28]	; (800405c <HAL_ADC_ConfigChannel+0x48c>)
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	e023      	b.n	800408c <HAL_ADC_ConfigChannel+0x4bc>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <HAL_ADC_ConfigChannel+0x48c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10c      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x498>
 800404e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e01a      	b.n	800408c <HAL_ADC_ConfigChannel+0x4bc>
 8004056:	bf00      	nop
 8004058:	83fff000 	.word	0x83fff000
 800405c:	50000100 	.word	0x50000100
 8004060:	50000300 	.word	0x50000300
 8004064:	50000700 	.word	0x50000700
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a4a      	ldr	r2, [pc, #296]	; (8004198 <HAL_ADC_ConfigChannel+0x5c8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d102      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x4a8>
 8004072:	4b4a      	ldr	r3, [pc, #296]	; (800419c <HAL_ADC_ConfigChannel+0x5cc>)
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	e009      	b.n	800408c <HAL_ADC_ConfigChannel+0x4bc>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a47      	ldr	r2, [pc, #284]	; (800419c <HAL_ADC_ConfigChannel+0x5cc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d102      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x4b8>
 8004082:	4b45      	ldr	r3, [pc, #276]	; (8004198 <HAL_ADC_ConfigChannel+0x5c8>)
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	e001      	b.n	800408c <HAL_ADC_ConfigChannel+0x4bc>
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d108      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x4dc>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x4dc>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <HAL_ADC_ConfigChannel+0x4de>
 80040ac:	2300      	movs	r3, #0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d150      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d010      	beq.n	80040da <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d107      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x504>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x504>
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x506>
 80040d4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d13c      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d11d      	bne.n	800411e <HAL_ADC_ConfigChannel+0x54e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ea:	d118      	bne.n	800411e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80040ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040f8:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <HAL_ADC_ConfigChannel+0x5d0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <HAL_ADC_ConfigChannel+0x5d4>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	0c9a      	lsrs	r2, r3, #18
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800410e:	e002      	b.n	8004116 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	3b01      	subs	r3, #1
 8004114:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f9      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800411c:	e02e      	b.n	800417c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b11      	cmp	r3, #17
 8004124:	d10b      	bne.n	800413e <HAL_ADC_ConfigChannel+0x56e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800412e:	d106      	bne.n	800413e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800413a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800413c:	e01e      	b.n	800417c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b12      	cmp	r3, #18
 8004144:	d11a      	bne.n	800417c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800414e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004150:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004152:	e013      	b.n	800417c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f043 0220 	orr.w	r2, r3, #32
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004166:	e00a      	b.n	800417e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800417a:	e000      	b.n	800417e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800417c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004186:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800418a:	4618      	mov	r0, r3
 800418c:	376c      	adds	r7, #108	; 0x6c
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	50000400 	.word	0x50000400
 800419c:	50000500 	.word	0x50000500
 80041a0:	20000018 	.word	0x20000018
 80041a4:	431bde83 	.word	0x431bde83

080041a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d126      	bne.n	8004210 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d115      	bne.n	8004208 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d111      	bne.n	8004208 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d105      	bne.n	8004208 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	f043 0201 	orr.w	r2, r3, #1
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7fd fd23 	bl	8001c54 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800420e:	e004      	b.n	800421a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	4798      	blx	r3
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7fe fe7f 	bl	8002f34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	f043 0204 	orr.w	r2, r3, #4
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f7fe fe79 	bl	8002f5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d108      	bne.n	80042a0 <ADC_Enable+0x2c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <ADC_Enable+0x2c>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <ADC_Enable+0x2e>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d143      	bne.n	800432e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	4b22      	ldr	r3, [pc, #136]	; (8004338 <ADC_Enable+0xc4>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	f043 0210 	orr.w	r2, r3, #16
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	f043 0201 	orr.w	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e02f      	b.n	8004330 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80042e0:	f7fe fdf8 	bl	8002ed4 <HAL_GetTick>
 80042e4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80042e6:	e01b      	b.n	8004320 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042e8:	f7fe fdf4 	bl	8002ed4 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d914      	bls.n	8004320 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d00d      	beq.n	8004320 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f043 0210 	orr.w	r2, r3, #16
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	f043 0201 	orr.w	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e007      	b.n	8004330 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d1dc      	bne.n	80042e8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	8000003f 	.word	0x8000003f

0800433c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d108      	bne.n	8004368 <ADC_Disable+0x2c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <ADC_Disable+0x2c>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <ADC_Disable+0x2e>
 8004368:	2300      	movs	r3, #0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d047      	beq.n	80043fe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030d 	and.w	r3, r3, #13
 8004378:	2b01      	cmp	r3, #1
 800437a:	d10f      	bne.n	800439c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0202 	orr.w	r2, r2, #2
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2203      	movs	r2, #3
 8004392:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004394:	f7fe fd9e 	bl	8002ed4 <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800439a:	e029      	b.n	80043f0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f043 0210 	orr.w	r2, r3, #16
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f043 0201 	orr.w	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e023      	b.n	8004400 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043b8:	f7fe fd8c 	bl	8002ed4 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d914      	bls.n	80043f0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d10d      	bne.n	80043f0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f043 0210 	orr.w	r2, r3, #16
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e007      	b.n	8004400 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d0dc      	beq.n	80043b8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <HAL_COMP_Init+0x22>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	75fb      	strb	r3, [r7, #23]
 800442e:	e064      	b.n	80044fa <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004430:	4b34      	ldr	r3, [pc, #208]	; (8004504 <HAL_COMP_Init+0xfc>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	4a33      	ldr	r2, [pc, #204]	; (8004504 <HAL_COMP_Init+0xfc>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	6193      	str	r3, [r2, #24]
 800443c:	4b31      	ldr	r3, [pc, #196]	; (8004504 <HAL_COMP_Init+0xfc>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fe f955 	bl	80026f8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f023 020c 	bic.w	r2, r3, #12
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000

08004508 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_COMP_Stop+0x22>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_COMP_Stop+0x28>
  {
    status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	e09d      	b.n	800466c <HAL_COMP_Stop+0x164>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_BUSY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	f040 8095 	bne.w	8004668 <HAL_COMP_Stop+0x160>
    {
      /* Disable the EXTI Line event mode if any */
      COMP_EXTI_DISABLE_EVENT(COMP_GET_EXTI_LINE(hcomp->Instance));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a4e      	ldr	r2, [pc, #312]	; (800467c <HAL_COMP_Stop+0x174>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d04b      	beq.n	80045e0 <HAL_COMP_Stop+0xd8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a4c      	ldr	r2, [pc, #304]	; (8004680 <HAL_COMP_Stop+0x178>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d046      	beq.n	80045e0 <HAL_COMP_Stop+0xd8>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a4b      	ldr	r2, [pc, #300]	; (8004684 <HAL_COMP_Stop+0x17c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d041      	beq.n	80045e0 <HAL_COMP_Stop+0xd8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a49      	ldr	r2, [pc, #292]	; (8004688 <HAL_COMP_Stop+0x180>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d03c      	beq.n	80045e0 <HAL_COMP_Stop+0xd8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a48      	ldr	r2, [pc, #288]	; (800468c <HAL_COMP_Stop+0x184>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d037      	beq.n	80045e0 <HAL_COMP_Stop+0xd8>
 8004570:	4b47      	ldr	r3, [pc, #284]	; (8004690 <HAL_COMP_Stop+0x188>)
 8004572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4940      	ldr	r1, [pc, #256]	; (800467c <HAL_COMP_Stop+0x174>)
 800457a:	428b      	cmp	r3, r1
 800457c:	d02a      	beq.n	80045d4 <HAL_COMP_Stop+0xcc>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	493f      	ldr	r1, [pc, #252]	; (8004680 <HAL_COMP_Stop+0x178>)
 8004584:	428b      	cmp	r3, r1
 8004586:	d022      	beq.n	80045ce <HAL_COMP_Stop+0xc6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	493d      	ldr	r1, [pc, #244]	; (8004684 <HAL_COMP_Stop+0x17c>)
 800458e:	428b      	cmp	r3, r1
 8004590:	d01a      	beq.n	80045c8 <HAL_COMP_Stop+0xc0>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	493c      	ldr	r1, [pc, #240]	; (8004688 <HAL_COMP_Stop+0x180>)
 8004598:	428b      	cmp	r3, r1
 800459a:	d012      	beq.n	80045c2 <HAL_COMP_Stop+0xba>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	493a      	ldr	r1, [pc, #232]	; (800468c <HAL_COMP_Stop+0x184>)
 80045a2:	428b      	cmp	r3, r1
 80045a4:	d00a      	beq.n	80045bc <HAL_COMP_Stop+0xb4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	493a      	ldr	r1, [pc, #232]	; (8004694 <HAL_COMP_Stop+0x18c>)
 80045ac:	428b      	cmp	r3, r1
 80045ae:	d102      	bne.n	80045b6 <HAL_COMP_Stop+0xae>
 80045b0:	f06f 0301 	mvn.w	r3, #1
 80045b4:	e010      	b.n	80045d8 <HAL_COMP_Stop+0xd0>
 80045b6:	f06f 0302 	mvn.w	r3, #2
 80045ba:	e00d      	b.n	80045d8 <HAL_COMP_Stop+0xd0>
 80045bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80045c0:	e00a      	b.n	80045d8 <HAL_COMP_Stop+0xd0>
 80045c2:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80045c6:	e007      	b.n	80045d8 <HAL_COMP_Stop+0xd0>
 80045c8:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 80045cc:	e004      	b.n	80045d8 <HAL_COMP_Stop+0xd0>
 80045ce:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 80045d2:	e001      	b.n	80045d8 <HAL_COMP_Stop+0xd0>
 80045d4:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80045d8:	492d      	ldr	r1, [pc, #180]	; (8004690 <HAL_COMP_Stop+0x188>)
 80045da:	4013      	ands	r3, r2
 80045dc:	624b      	str	r3, [r1, #36]	; 0x24
 80045de:	e036      	b.n	800464e <HAL_COMP_Stop+0x146>
 80045e0:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <HAL_COMP_Stop+0x188>)
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4924      	ldr	r1, [pc, #144]	; (800467c <HAL_COMP_Stop+0x174>)
 80045ea:	428b      	cmp	r3, r1
 80045ec:	d02a      	beq.n	8004644 <HAL_COMP_Stop+0x13c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4923      	ldr	r1, [pc, #140]	; (8004680 <HAL_COMP_Stop+0x178>)
 80045f4:	428b      	cmp	r3, r1
 80045f6:	d022      	beq.n	800463e <HAL_COMP_Stop+0x136>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4921      	ldr	r1, [pc, #132]	; (8004684 <HAL_COMP_Stop+0x17c>)
 80045fe:	428b      	cmp	r3, r1
 8004600:	d01a      	beq.n	8004638 <HAL_COMP_Stop+0x130>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4920      	ldr	r1, [pc, #128]	; (8004688 <HAL_COMP_Stop+0x180>)
 8004608:	428b      	cmp	r3, r1
 800460a:	d012      	beq.n	8004632 <HAL_COMP_Stop+0x12a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	491e      	ldr	r1, [pc, #120]	; (800468c <HAL_COMP_Stop+0x184>)
 8004612:	428b      	cmp	r3, r1
 8004614:	d00a      	beq.n	800462c <HAL_COMP_Stop+0x124>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	491e      	ldr	r1, [pc, #120]	; (8004694 <HAL_COMP_Stop+0x18c>)
 800461c:	428b      	cmp	r3, r1
 800461e:	d102      	bne.n	8004626 <HAL_COMP_Stop+0x11e>
 8004620:	f06f 0301 	mvn.w	r3, #1
 8004624:	e010      	b.n	8004648 <HAL_COMP_Stop+0x140>
 8004626:	f06f 0302 	mvn.w	r3, #2
 800462a:	e00d      	b.n	8004648 <HAL_COMP_Stop+0x140>
 800462c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004630:	e00a      	b.n	8004648 <HAL_COMP_Stop+0x140>
 8004632:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004636:	e007      	b.n	8004648 <HAL_COMP_Stop+0x140>
 8004638:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 800463c:	e004      	b.n	8004648 <HAL_COMP_Stop+0x140>
 800463e:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004642:	e001      	b.n	8004648 <HAL_COMP_Stop+0x140>
 8004644:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004648:	4911      	ldr	r1, [pc, #68]	; (8004690 <HAL_COMP_Stop+0x188>)
 800464a:	4013      	ands	r3, r2
 800464c:	604b      	str	r3, [r1, #4]

      /* Disable the selected comparator */
      __HAL_COMP_DISABLE(hcomp);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004666:	e001      	b.n	800466c <HAL_COMP_Stop+0x164>
    }
    else
    {
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	4001001c 	.word	0x4001001c
 8004680:	40010020 	.word	0x40010020
 8004684:	40010024 	.word	0x40010024
 8004688:	40010028 	.word	0x40010028
 800468c:	4001002c 	.word	0x4001002c
 8004690:	40010400 	.word	0x40010400
 8004694:	40010030 	.word	0x40010030

08004698 <HAL_COMP_Start_IT>:
  * @brief  Start the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <HAL_COMP_Start_IT+0x26>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_COMP_Start_IT+0x2c>
  {
    status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	e0c8      	b.n	8004856 <HAL_COMP_Start_IT+0x1be>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	f040 80c0 	bne.w	8004852 <HAL_COMP_Start_IT+0x1ba>
    {
      /* Configure the EXTI event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_IT_RISING | COMP_TRIGGERMODE_IT_FALLING)) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80b6 	beq.w	800484c <HAL_COMP_Start_IT+0x1b4>
      {
        /* Get the EXTI Line output configuration */
        extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a5f      	ldr	r2, [pc, #380]	; (8004864 <HAL_COMP_Start_IT+0x1cc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d028      	beq.n	800473c <HAL_COMP_Start_IT+0xa4>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a5e      	ldr	r2, [pc, #376]	; (8004868 <HAL_COMP_Start_IT+0x1d0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d020      	beq.n	8004736 <HAL_COMP_Start_IT+0x9e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a5c      	ldr	r2, [pc, #368]	; (800486c <HAL_COMP_Start_IT+0x1d4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_COMP_Start_IT+0x98>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a5b      	ldr	r2, [pc, #364]	; (8004870 <HAL_COMP_Start_IT+0x1d8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d010      	beq.n	800472a <HAL_COMP_Start_IT+0x92>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a59      	ldr	r2, [pc, #356]	; (8004874 <HAL_COMP_Start_IT+0x1dc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d008      	beq.n	8004724 <HAL_COMP_Start_IT+0x8c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a58      	ldr	r2, [pc, #352]	; (8004878 <HAL_COMP_Start_IT+0x1e0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <HAL_COMP_Start_IT+0x88>
 800471c:	2301      	movs	r3, #1
 800471e:	e00f      	b.n	8004740 <HAL_COMP_Start_IT+0xa8>
 8004720:	2302      	movs	r3, #2
 8004722:	e00d      	b.n	8004740 <HAL_COMP_Start_IT+0xa8>
 8004724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004728:	e00a      	b.n	8004740 <HAL_COMP_Start_IT+0xa8>
 800472a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800472e:	e007      	b.n	8004740 <HAL_COMP_Start_IT+0xa8>
 8004730:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004734:	e004      	b.n	8004740 <HAL_COMP_Start_IT+0xa8>
 8004736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800473a:	e001      	b.n	8004740 <HAL_COMP_Start_IT+0xa8>
 800473c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004740:	60bb      	str	r3, [r7, #8]

        /* Configure the trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d012      	beq.n	8004774 <HAL_COMP_Start_IT+0xdc>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d006      	beq.n	8004766 <HAL_COMP_Start_IT+0xce>
 8004758:	4b48      	ldr	r3, [pc, #288]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 800475a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475c:	4947      	ldr	r1, [pc, #284]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4313      	orrs	r3, r2
 8004762:	628b      	str	r3, [r1, #40]	; 0x28
 8004764:	e01a      	b.n	800479c <HAL_COMP_Start_IT+0x104>
 8004766:	4b45      	ldr	r3, [pc, #276]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	4944      	ldr	r1, [pc, #272]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
 8004772:	e013      	b.n	800479c <HAL_COMP_Start_IT+0x104>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_COMP_Start_IT+0xf6>
 800477e:	4b3f      	ldr	r3, [pc, #252]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 8004780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	43db      	mvns	r3, r3
 8004786:	493d      	ldr	r1, [pc, #244]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 8004788:	4013      	ands	r3, r2
 800478a:	628b      	str	r3, [r1, #40]	; 0x28
 800478c:	e006      	b.n	800479c <HAL_COMP_Start_IT+0x104>
 800478e:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	43db      	mvns	r3, r3
 8004796:	4939      	ldr	r1, [pc, #228]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 8004798:	4013      	ands	r3, r2
 800479a:	608b      	str	r3, [r1, #8]
        }
        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d012      	beq.n	80047ce <HAL_COMP_Start_IT+0x136>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <HAL_COMP_Start_IT+0x128>
 80047b2:	4b32      	ldr	r3, [pc, #200]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 80047b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b6:	4931      	ldr	r1, [pc, #196]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	62cb      	str	r3, [r1, #44]	; 0x2c
 80047be:	e01a      	b.n	80047f6 <HAL_COMP_Start_IT+0x15e>
 80047c0:	4b2e      	ldr	r3, [pc, #184]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	492d      	ldr	r1, [pc, #180]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60cb      	str	r3, [r1, #12]
 80047cc:	e013      	b.n	80047f6 <HAL_COMP_Start_IT+0x15e>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <HAL_COMP_Start_IT+0x150>
 80047d8:	4b28      	ldr	r3, [pc, #160]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	43db      	mvns	r3, r3
 80047e0:	4926      	ldr	r1, [pc, #152]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80047e6:	e006      	b.n	80047f6 <HAL_COMP_Start_IT+0x15e>
 80047e8:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	43db      	mvns	r3, r3
 80047f0:	4922      	ldr	r1, [pc, #136]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	60cb      	str	r3, [r1, #12]
        }

        /* Clear COMP EXTI pending bit if any */
        COMP_EXTI_CLEAR_FLAG(extiline);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_COMP_Start_IT+0x170>
 8004800:	4a1e      	ldr	r2, [pc, #120]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6353      	str	r3, [r2, #52]	; 0x34
 8004806:	e002      	b.n	800480e <HAL_COMP_Start_IT+0x176>
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	6153      	str	r3, [r2, #20]

        /* Enable EXTI interrupt mode */
        COMP_EXTI_ENABLE_IT(extiline);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d006      	beq.n	8004826 <HAL_COMP_Start_IT+0x18e>
 8004818:	4b18      	ldr	r3, [pc, #96]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 800481a:	6a1a      	ldr	r2, [r3, #32]
 800481c:	4917      	ldr	r1, [pc, #92]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4313      	orrs	r3, r2
 8004822:	620b      	str	r3, [r1, #32]
 8004824:	e005      	b.n	8004832 <HAL_COMP_Start_IT+0x19a>
 8004826:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4914      	ldr	r1, [pc, #80]	; (800487c <HAL_COMP_Start_IT+0x1e4>)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]

        /* Enable the selected comparator */
        __HAL_COMP_ENABLE(hcomp);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        hcomp->State = HAL_COMP_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800484a:	e004      	b.n	8004856 <HAL_COMP_Start_IT+0x1be>
      }
      else
      {
        status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e001      	b.n	8004856 <HAL_COMP_Start_IT+0x1be>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	4001001c 	.word	0x4001001c
 8004868:	40010020 	.word	0x40010020
 800486c:	40010024 	.word	0x40010024
 8004870:	40010028 	.word	0x40010028
 8004874:	4001002c 	.word	0x4001002c
 8004878:	40010030 	.word	0x40010030
 800487c:	40010400 	.word	0x40010400

08004880 <HAL_COMP_Stop_IT>:
  * @brief  Stop the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	73fb      	strb	r3, [r7, #15]

  /* Disable the EXTI Line interrupt mode */
  COMP_EXTI_DISABLE_IT(COMP_GET_EXTI_LINE(hcomp->Instance));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a47      	ldr	r2, [pc, #284]	; (80049b0 <HAL_COMP_Stop_IT+0x130>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d04b      	beq.n	800492e <HAL_COMP_Stop_IT+0xae>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a46      	ldr	r2, [pc, #280]	; (80049b4 <HAL_COMP_Stop_IT+0x134>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d046      	beq.n	800492e <HAL_COMP_Stop_IT+0xae>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a44      	ldr	r2, [pc, #272]	; (80049b8 <HAL_COMP_Stop_IT+0x138>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d041      	beq.n	800492e <HAL_COMP_Stop_IT+0xae>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a43      	ldr	r2, [pc, #268]	; (80049bc <HAL_COMP_Stop_IT+0x13c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d03c      	beq.n	800492e <HAL_COMP_Stop_IT+0xae>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a41      	ldr	r2, [pc, #260]	; (80049c0 <HAL_COMP_Stop_IT+0x140>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d037      	beq.n	800492e <HAL_COMP_Stop_IT+0xae>
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <HAL_COMP_Stop_IT+0x144>)
 80048c0:	6a1a      	ldr	r2, [r3, #32]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	493a      	ldr	r1, [pc, #232]	; (80049b0 <HAL_COMP_Stop_IT+0x130>)
 80048c8:	428b      	cmp	r3, r1
 80048ca:	d02a      	beq.n	8004922 <HAL_COMP_Stop_IT+0xa2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4938      	ldr	r1, [pc, #224]	; (80049b4 <HAL_COMP_Stop_IT+0x134>)
 80048d2:	428b      	cmp	r3, r1
 80048d4:	d022      	beq.n	800491c <HAL_COMP_Stop_IT+0x9c>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4937      	ldr	r1, [pc, #220]	; (80049b8 <HAL_COMP_Stop_IT+0x138>)
 80048dc:	428b      	cmp	r3, r1
 80048de:	d01a      	beq.n	8004916 <HAL_COMP_Stop_IT+0x96>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4935      	ldr	r1, [pc, #212]	; (80049bc <HAL_COMP_Stop_IT+0x13c>)
 80048e6:	428b      	cmp	r3, r1
 80048e8:	d012      	beq.n	8004910 <HAL_COMP_Stop_IT+0x90>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4934      	ldr	r1, [pc, #208]	; (80049c0 <HAL_COMP_Stop_IT+0x140>)
 80048f0:	428b      	cmp	r3, r1
 80048f2:	d00a      	beq.n	800490a <HAL_COMP_Stop_IT+0x8a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4933      	ldr	r1, [pc, #204]	; (80049c8 <HAL_COMP_Stop_IT+0x148>)
 80048fa:	428b      	cmp	r3, r1
 80048fc:	d102      	bne.n	8004904 <HAL_COMP_Stop_IT+0x84>
 80048fe:	f06f 0301 	mvn.w	r3, #1
 8004902:	e010      	b.n	8004926 <HAL_COMP_Stop_IT+0xa6>
 8004904:	f06f 0302 	mvn.w	r3, #2
 8004908:	e00d      	b.n	8004926 <HAL_COMP_Stop_IT+0xa6>
 800490a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800490e:	e00a      	b.n	8004926 <HAL_COMP_Stop_IT+0xa6>
 8004910:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004914:	e007      	b.n	8004926 <HAL_COMP_Stop_IT+0xa6>
 8004916:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 800491a:	e004      	b.n	8004926 <HAL_COMP_Stop_IT+0xa6>
 800491c:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004920:	e001      	b.n	8004926 <HAL_COMP_Stop_IT+0xa6>
 8004922:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004926:	4927      	ldr	r1, [pc, #156]	; (80049c4 <HAL_COMP_Stop_IT+0x144>)
 8004928:	4013      	ands	r3, r2
 800492a:	620b      	str	r3, [r1, #32]
 800492c:	e036      	b.n	800499c <HAL_COMP_Stop_IT+0x11c>
 800492e:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <HAL_COMP_Stop_IT+0x144>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	491e      	ldr	r1, [pc, #120]	; (80049b0 <HAL_COMP_Stop_IT+0x130>)
 8004938:	428b      	cmp	r3, r1
 800493a:	d02a      	beq.n	8004992 <HAL_COMP_Stop_IT+0x112>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	491c      	ldr	r1, [pc, #112]	; (80049b4 <HAL_COMP_Stop_IT+0x134>)
 8004942:	428b      	cmp	r3, r1
 8004944:	d022      	beq.n	800498c <HAL_COMP_Stop_IT+0x10c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	491b      	ldr	r1, [pc, #108]	; (80049b8 <HAL_COMP_Stop_IT+0x138>)
 800494c:	428b      	cmp	r3, r1
 800494e:	d01a      	beq.n	8004986 <HAL_COMP_Stop_IT+0x106>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4919      	ldr	r1, [pc, #100]	; (80049bc <HAL_COMP_Stop_IT+0x13c>)
 8004956:	428b      	cmp	r3, r1
 8004958:	d012      	beq.n	8004980 <HAL_COMP_Stop_IT+0x100>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4918      	ldr	r1, [pc, #96]	; (80049c0 <HAL_COMP_Stop_IT+0x140>)
 8004960:	428b      	cmp	r3, r1
 8004962:	d00a      	beq.n	800497a <HAL_COMP_Stop_IT+0xfa>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4917      	ldr	r1, [pc, #92]	; (80049c8 <HAL_COMP_Stop_IT+0x148>)
 800496a:	428b      	cmp	r3, r1
 800496c:	d102      	bne.n	8004974 <HAL_COMP_Stop_IT+0xf4>
 800496e:	f06f 0301 	mvn.w	r3, #1
 8004972:	e010      	b.n	8004996 <HAL_COMP_Stop_IT+0x116>
 8004974:	f06f 0302 	mvn.w	r3, #2
 8004978:	e00d      	b.n	8004996 <HAL_COMP_Stop_IT+0x116>
 800497a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800497e:	e00a      	b.n	8004996 <HAL_COMP_Stop_IT+0x116>
 8004980:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004984:	e007      	b.n	8004996 <HAL_COMP_Stop_IT+0x116>
 8004986:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 800498a:	e004      	b.n	8004996 <HAL_COMP_Stop_IT+0x116>
 800498c:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004990:	e001      	b.n	8004996 <HAL_COMP_Stop_IT+0x116>
 8004992:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004996:	490b      	ldr	r1, [pc, #44]	; (80049c4 <HAL_COMP_Stop_IT+0x144>)
 8004998:	4013      	ands	r3, r2
 800499a:	600b      	str	r3, [r1, #0]

  status = HAL_COMP_Stop(hcomp);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff fdb3 	bl	8004508 <HAL_COMP_Stop>
 80049a2:	4603      	mov	r3, r0
 80049a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	4001001c 	.word	0x4001001c
 80049b4:	40010020 	.word	0x40010020
 80049b8:	40010024 	.word	0x40010024
 80049bc:	40010028 	.word	0x40010028
 80049c0:	4001002c 	.word	0x4001002c
 80049c4:	40010400 	.word	0x40010400
 80049c8:	40010030 	.word	0x40010030

080049cc <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2d      	ldr	r2, [pc, #180]	; (8004a90 <HAL_COMP_IRQHandler+0xc4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d028      	beq.n	8004a30 <HAL_COMP_IRQHandler+0x64>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <HAL_COMP_IRQHandler+0xc8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d020      	beq.n	8004a2a <HAL_COMP_IRQHandler+0x5e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2a      	ldr	r2, [pc, #168]	; (8004a98 <HAL_COMP_IRQHandler+0xcc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d018      	beq.n	8004a24 <HAL_COMP_IRQHandler+0x58>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a29      	ldr	r2, [pc, #164]	; (8004a9c <HAL_COMP_IRQHandler+0xd0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d010      	beq.n	8004a1e <HAL_COMP_IRQHandler+0x52>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a27      	ldr	r2, [pc, #156]	; (8004aa0 <HAL_COMP_IRQHandler+0xd4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d008      	beq.n	8004a18 <HAL_COMP_IRQHandler+0x4c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <HAL_COMP_IRQHandler+0xd8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <HAL_COMP_IRQHandler+0x48>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e00f      	b.n	8004a34 <HAL_COMP_IRQHandler+0x68>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e00d      	b.n	8004a34 <HAL_COMP_IRQHandler+0x68>
 8004a18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a1c:	e00a      	b.n	8004a34 <HAL_COMP_IRQHandler+0x68>
 8004a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a22:	e007      	b.n	8004a34 <HAL_COMP_IRQHandler+0x68>
 8004a24:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004a28:	e004      	b.n	8004a34 <HAL_COMP_IRQHandler+0x68>
 8004a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a2e:	e001      	b.n	8004a34 <HAL_COMP_IRQHandler+0x68>
 8004a30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if (COMP_EXTI_GET_FLAG(extiline) != RESET)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <HAL_COMP_IRQHandler+0x88>
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_COMP_IRQHandler+0xdc>)
 8004a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e008      	b.n	8004a66 <HAL_COMP_IRQHandler+0x9a>
 8004a54:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <HAL_COMP_IRQHandler+0xdc>)
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00e      	beq.n	8004a88 <HAL_COMP_IRQHandler+0xbc>
  {
    /* Clear COMP EXTI pending bit */
    COMP_EXTI_CLEAR_FLAG(extiline);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_COMP_IRQHandler+0xb0>
 8004a74:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <HAL_COMP_IRQHandler+0xdc>)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6353      	str	r3, [r2, #52]	; 0x34
 8004a7a:	e002      	b.n	8004a82 <HAL_COMP_IRQHandler+0xb6>
 8004a7c:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <HAL_COMP_IRQHandler+0xdc>)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6153      	str	r3, [r2, #20]

    /* COMP trigger callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fd f8f0 	bl	8001c68 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	4001001c 	.word	0x4001001c
 8004a94:	40010020 	.word	0x40010020
 8004a98:	40010024 	.word	0x40010024
 8004a9c:	40010028 	.word	0x40010028
 8004aa0:	4001002c 	.word	0x4001002c
 8004aa4:	40010030 	.word	0x40010030
 8004aa8:	40010400 	.word	0x40010400

08004aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004abc:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <__NVIC_SetPriorityGrouping+0x44>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ade:	4a04      	ldr	r2, [pc, #16]	; (8004af0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	60d3      	str	r3, [r2, #12]
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <__NVIC_GetPriorityGrouping+0x18>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	0a1b      	lsrs	r3, r3, #8
 8004afe:	f003 0307 	and.w	r3, r3, #7
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	db0b      	blt.n	8004b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	f003 021f 	and.w	r2, r3, #31
 8004b28:	4907      	ldr	r1, [pc, #28]	; (8004b48 <__NVIC_EnableIRQ+0x38>)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2001      	movs	r0, #1
 8004b32:	fa00 f202 	lsl.w	r2, r0, r2
 8004b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	e000e100 	.word	0xe000e100

08004b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	db0a      	blt.n	8004b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	490c      	ldr	r1, [pc, #48]	; (8004b98 <__NVIC_SetPriority+0x4c>)
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	0112      	lsls	r2, r2, #4
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	440b      	add	r3, r1
 8004b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b74:	e00a      	b.n	8004b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4908      	ldr	r1, [pc, #32]	; (8004b9c <__NVIC_SetPriority+0x50>)
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	3b04      	subs	r3, #4
 8004b84:	0112      	lsls	r2, r2, #4
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	440b      	add	r3, r1
 8004b8a:	761a      	strb	r2, [r3, #24]
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000e100 	.word	0xe000e100
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b089      	sub	sp, #36	; 0x24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f1c3 0307 	rsb	r3, r3, #7
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	bf28      	it	cs
 8004bbe:	2304      	movcs	r3, #4
 8004bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	2b06      	cmp	r3, #6
 8004bc8:	d902      	bls.n	8004bd0 <NVIC_EncodePriority+0x30>
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3b03      	subs	r3, #3
 8004bce:	e000      	b.n	8004bd2 <NVIC_EncodePriority+0x32>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43da      	mvns	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	401a      	ands	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004be8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	43d9      	mvns	r1, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf8:	4313      	orrs	r3, r2
         );
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3724      	adds	r7, #36	; 0x24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c0c:	f3bf 8f4f 	dsb	sy
}
 8004c10:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <__NVIC_SystemReset+0x24>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c1a:	4904      	ldr	r1, [pc, #16]	; (8004c2c <__NVIC_SystemReset+0x24>)
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <__NVIC_SystemReset+0x28>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c22:	f3bf 8f4f 	dsb	sy
}
 8004c26:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004c28:	bf00      	nop
 8004c2a:	e7fd      	b.n	8004c28 <__NVIC_SystemReset+0x20>
 8004c2c:	e000ed00 	.word	0xe000ed00
 8004c30:	05fa0004 	.word	0x05fa0004

08004c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ff35 	bl	8004aac <__NVIC_SetPriorityGrouping>
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	4603      	mov	r3, r0
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c5c:	f7ff ff4a 	bl	8004af4 <__NVIC_GetPriorityGrouping>
 8004c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	6978      	ldr	r0, [r7, #20]
 8004c68:	f7ff ff9a 	bl	8004ba0 <NVIC_EncodePriority>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c72:	4611      	mov	r1, r2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff ff69 	bl	8004b4c <__NVIC_SetPriority>
}
 8004c7a:	bf00      	nop
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	4603      	mov	r3, r0
 8004c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff ff3d 	bl	8004b10 <__NVIC_EnableIRQ>
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004ca2:	f7ff ffb1 	bl	8004c08 <__NVIC_SystemReset>

08004ca6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e014      	b.n	8004ce2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	791b      	ldrb	r3, [r3, #4]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d105      	bne.n	8004cce <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7fd fda3 	bl	8002814 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004cfe:	b480      	push	{r7}
 8004d00:	b087      	sub	sp, #28
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	3308      	adds	r3, #8
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	e004      	b.n	8004d32 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	3314      	adds	r3, #20
 8004d30:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	461a      	mov	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	795b      	ldrb	r3, [r3, #5]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_DAC_Start+0x16>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e039      	b.n	8004dd2 <HAL_DAC_Start+0x8a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	2201      	movs	r2, #1
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	409a      	lsls	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10f      	bne.n	8004da4 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004d8e:	2b3c      	cmp	r3, #60	; 0x3c
 8004d90:	d118      	bne.n	8004dc4 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	605a      	str	r2, [r3, #4]
 8004da2:	e00f      	b.n	8004dc4 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004dae:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8004db2:	d107      	bne.n	8004dc4 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0202 	orr.w	r2, r2, #2
 8004dc2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df4:	d120      	bne.n	8004e38 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e04:	d118      	bne.n	8004e38 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f043 0201 	orr.w	r2, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e20:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e30:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff ff59 	bl	8004cea <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e46:	d120      	bne.n	8004e8a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e56:	d118      	bne.n	8004e8a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f043 0202 	orr.w	r2, r3, #2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e72:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f851 	bl	8004f2c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b087      	sub	sp, #28
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	795b      	ldrb	r3, [r3, #5]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_DAC_ConfigChannel+0x20>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e036      	b.n	8004f20 <HAL_DAC_ConfigChannel+0x8e>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004ec6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	22c0      	movs	r2, #192	; 0xc0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43da      	mvns	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	400a      	ands	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e037      	b.n	8004fc6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f6c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004f70:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f941 	bl	8005230 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}  
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b086      	sub	sp, #24
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_DMA_Start_IT+0x20>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e04a      	b.n	8005084 <HAL_DMA_Start_IT+0xb6>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d13a      	bne.n	8005076 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f8d4 	bl	80051d2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 020e 	orr.w	r2, r2, #14
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	e00f      	b.n	8005064 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 020a 	orr.w	r2, r2, #10
 8005052:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0204 	bic.w	r2, r2, #4
 8005062:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e005      	b.n	8005082 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800507e:	2302      	movs	r3, #2
 8005080:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005082:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	2204      	movs	r2, #4
 80050aa:	409a      	lsls	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d024      	beq.n	80050fe <HAL_DMA_IRQHandler+0x72>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01f      	beq.n	80050fe <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d107      	bne.n	80050dc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0204 	bic.w	r2, r2, #4
 80050da:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	2104      	movs	r1, #4
 80050e6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ea:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d06a      	beq.n	80051ca <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80050fc:	e065      	b.n	80051ca <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	2202      	movs	r2, #2
 8005104:	409a      	lsls	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d02c      	beq.n	8005168 <HAL_DMA_IRQHandler+0xdc>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d027      	beq.n	8005168 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 020a 	bic.w	r2, r2, #10
 8005134:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	2102      	movs	r1, #2
 8005148:	fa01 f202 	lsl.w	r2, r1, r2
 800514c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d035      	beq.n	80051ca <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005166:	e030      	b.n	80051ca <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	2208      	movs	r2, #8
 800516e:	409a      	lsls	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4013      	ands	r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d028      	beq.n	80051ca <HAL_DMA_IRQHandler+0x13e>
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d023      	beq.n	80051ca <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 020e 	bic.w	r2, r2, #14
 8005190:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	2101      	movs	r1, #1
 800519c:	fa01 f202 	lsl.w	r2, r1, r2
 80051a0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d004      	beq.n	80051ca <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
    }
  }
}  
 80051c8:	e7ff      	b.n	80051ca <HAL_DMA_IRQHandler+0x13e>
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	2101      	movs	r1, #1
 80051ea:	fa01 f202 	lsl.w	r2, r1, r2
 80051ee:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d108      	bne.n	8005212 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005210:	e007      	b.n	8005222 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	4b14      	ldr	r3, [pc, #80]	; (8005290 <DMA_CalcBaseAndBitshift+0x60>)
 8005240:	429a      	cmp	r2, r3
 8005242:	d80f      	bhi.n	8005264 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	4b12      	ldr	r3, [pc, #72]	; (8005294 <DMA_CalcBaseAndBitshift+0x64>)
 800524c:	4413      	add	r3, r2
 800524e:	4a12      	ldr	r2, [pc, #72]	; (8005298 <DMA_CalcBaseAndBitshift+0x68>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	009a      	lsls	r2, r3, #2
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a0f      	ldr	r2, [pc, #60]	; (800529c <DMA_CalcBaseAndBitshift+0x6c>)
 8005260:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005262:	e00e      	b.n	8005282 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <DMA_CalcBaseAndBitshift+0x70>)
 800526c:	4413      	add	r3, r2
 800526e:	4a0a      	ldr	r2, [pc, #40]	; (8005298 <DMA_CalcBaseAndBitshift+0x68>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	009a      	lsls	r2, r3, #2
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a09      	ldr	r2, [pc, #36]	; (80052a4 <DMA_CalcBaseAndBitshift+0x74>)
 8005280:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40020407 	.word	0x40020407
 8005294:	bffdfff8 	.word	0xbffdfff8
 8005298:	cccccccd 	.word	0xcccccccd
 800529c:	40020000 	.word	0x40020000
 80052a0:	bffdfbf8 	.word	0xbffdfbf8
 80052a4:	40020400 	.word	0x40020400

080052a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052b6:	e154      	b.n	8005562 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	2101      	movs	r1, #1
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	fa01 f303 	lsl.w	r3, r1, r3
 80052c4:	4013      	ands	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8146 	beq.w	800555c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d005      	beq.n	80052e8 <HAL_GPIO_Init+0x40>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d130      	bne.n	800534a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	2203      	movs	r2, #3
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4013      	ands	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800531e:	2201      	movs	r2, #1
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4013      	ands	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	f003 0201 	and.w	r2, r3, #1
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b03      	cmp	r3, #3
 8005354:	d017      	beq.n	8005386 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	2203      	movs	r2, #3
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43db      	mvns	r3, r3
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d123      	bne.n	80053da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	08da      	lsrs	r2, r3, #3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3208      	adds	r2, #8
 800539a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	220f      	movs	r2, #15
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	43db      	mvns	r3, r3
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4013      	ands	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	08da      	lsrs	r2, r3, #3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3208      	adds	r2, #8
 80053d4:	6939      	ldr	r1, [r7, #16]
 80053d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	2203      	movs	r2, #3
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4013      	ands	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 0203 	and.w	r2, r3, #3
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 80a0 	beq.w	800555c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800541c:	4b58      	ldr	r3, [pc, #352]	; (8005580 <HAL_GPIO_Init+0x2d8>)
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	4a57      	ldr	r2, [pc, #348]	; (8005580 <HAL_GPIO_Init+0x2d8>)
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	6193      	str	r3, [r2, #24]
 8005428:	4b55      	ldr	r3, [pc, #340]	; (8005580 <HAL_GPIO_Init+0x2d8>)
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005434:	4a53      	ldr	r2, [pc, #332]	; (8005584 <HAL_GPIO_Init+0x2dc>)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	089b      	lsrs	r3, r3, #2
 800543a:	3302      	adds	r3, #2
 800543c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	220f      	movs	r2, #15
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	43db      	mvns	r3, r3
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4013      	ands	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800545e:	d019      	beq.n	8005494 <HAL_GPIO_Init+0x1ec>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a49      	ldr	r2, [pc, #292]	; (8005588 <HAL_GPIO_Init+0x2e0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d013      	beq.n	8005490 <HAL_GPIO_Init+0x1e8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a48      	ldr	r2, [pc, #288]	; (800558c <HAL_GPIO_Init+0x2e4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00d      	beq.n	800548c <HAL_GPIO_Init+0x1e4>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a47      	ldr	r2, [pc, #284]	; (8005590 <HAL_GPIO_Init+0x2e8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <HAL_GPIO_Init+0x1e0>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a46      	ldr	r2, [pc, #280]	; (8005594 <HAL_GPIO_Init+0x2ec>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d101      	bne.n	8005484 <HAL_GPIO_Init+0x1dc>
 8005480:	2304      	movs	r3, #4
 8005482:	e008      	b.n	8005496 <HAL_GPIO_Init+0x1ee>
 8005484:	2305      	movs	r3, #5
 8005486:	e006      	b.n	8005496 <HAL_GPIO_Init+0x1ee>
 8005488:	2303      	movs	r3, #3
 800548a:	e004      	b.n	8005496 <HAL_GPIO_Init+0x1ee>
 800548c:	2302      	movs	r3, #2
 800548e:	e002      	b.n	8005496 <HAL_GPIO_Init+0x1ee>
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <HAL_GPIO_Init+0x1ee>
 8005494:	2300      	movs	r3, #0
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	f002 0203 	and.w	r2, r2, #3
 800549c:	0092      	lsls	r2, r2, #2
 800549e:	4093      	lsls	r3, r2
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054a6:	4937      	ldr	r1, [pc, #220]	; (8005584 <HAL_GPIO_Init+0x2dc>)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	3302      	adds	r3, #2
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054b4:	4b38      	ldr	r3, [pc, #224]	; (8005598 <HAL_GPIO_Init+0x2f0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	43db      	mvns	r3, r3
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4013      	ands	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80054d8:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <HAL_GPIO_Init+0x2f0>)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054de:	4b2e      	ldr	r3, [pc, #184]	; (8005598 <HAL_GPIO_Init+0x2f0>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	43db      	mvns	r3, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005502:	4a25      	ldr	r2, [pc, #148]	; (8005598 <HAL_GPIO_Init+0x2f0>)
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005508:	4b23      	ldr	r3, [pc, #140]	; (8005598 <HAL_GPIO_Init+0x2f0>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	43db      	mvns	r3, r3
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4013      	ands	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800552c:	4a1a      	ldr	r2, [pc, #104]	; (8005598 <HAL_GPIO_Init+0x2f0>)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005532:	4b19      	ldr	r3, [pc, #100]	; (8005598 <HAL_GPIO_Init+0x2f0>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	43db      	mvns	r3, r3
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4013      	ands	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005556:	4a10      	ldr	r2, [pc, #64]	; (8005598 <HAL_GPIO_Init+0x2f0>)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	3301      	adds	r3, #1
 8005560:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	f47f aea3 	bne.w	80052b8 <HAL_GPIO_Init+0x10>
  }
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	40021000 	.word	0x40021000
 8005584:	40010000 	.word	0x40010000
 8005588:	48000400 	.word	0x48000400
 800558c:	48000800 	.word	0x48000800
 8005590:	48000c00 	.word	0x48000c00
 8005594:	48001000 	.word	0x48001000
 8005598:	40010400 	.word	0x40010400

0800559c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	807b      	strh	r3, [r7, #2]
 80055a8:	4613      	mov	r3, r2
 80055aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055ac:	787b      	ldrb	r3, [r7, #1]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055b2:	887a      	ldrh	r2, [r7, #2]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055b8:	e002      	b.n	80055c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055ba:	887a      	ldrh	r2, [r7, #2]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055d8:	1d3b      	adds	r3, r7, #4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d102      	bne.n	80055e6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f000 bef4 	b.w	80063ce <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055e6:	1d3b      	adds	r3, r7, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 816a 	beq.w	80058ca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80055f6:	4bb3      	ldr	r3, [pc, #716]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d00c      	beq.n	800561c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005602:	4bb0      	ldr	r3, [pc, #704]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	2b08      	cmp	r3, #8
 800560c:	d159      	bne.n	80056c2 <HAL_RCC_OscConfig+0xf6>
 800560e:	4bad      	ldr	r3, [pc, #692]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561a:	d152      	bne.n	80056c2 <HAL_RCC_OscConfig+0xf6>
 800561c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005620:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005628:	fa93 f3a3 	rbit	r3, r3
 800562c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005630:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005634:	fab3 f383 	clz	r3, r3
 8005638:	b2db      	uxtb	r3, r3
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f043 0301 	orr.w	r3, r3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d102      	bne.n	800564e <HAL_RCC_OscConfig+0x82>
 8005648:	4b9e      	ldr	r3, [pc, #632]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	e015      	b.n	800567a <HAL_RCC_OscConfig+0xae>
 800564e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005652:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800565a:	fa93 f3a3 	rbit	r3, r3
 800565e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005666:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800566a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800566e:	fa93 f3a3 	rbit	r3, r3
 8005672:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005676:	4b93      	ldr	r3, [pc, #588]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800567e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005682:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005686:	fa92 f2a2 	rbit	r2, r2
 800568a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800568e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005692:	fab2 f282 	clz	r2, r2
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	f042 0220 	orr.w	r2, r2, #32
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	f002 021f 	and.w	r2, r2, #31
 80056a2:	2101      	movs	r1, #1
 80056a4:	fa01 f202 	lsl.w	r2, r1, r2
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 810c 	beq.w	80058c8 <HAL_RCC_OscConfig+0x2fc>
 80056b0:	1d3b      	adds	r3, r7, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f040 8106 	bne.w	80058c8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f000 be86 	b.w	80063ce <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056cc:	d106      	bne.n	80056dc <HAL_RCC_OscConfig+0x110>
 80056ce:	4b7d      	ldr	r3, [pc, #500]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a7c      	ldr	r2, [pc, #496]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 80056d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	e030      	b.n	800573e <HAL_RCC_OscConfig+0x172>
 80056dc:	1d3b      	adds	r3, r7, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10c      	bne.n	8005700 <HAL_RCC_OscConfig+0x134>
 80056e6:	4b77      	ldr	r3, [pc, #476]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a76      	ldr	r2, [pc, #472]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 80056ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	4b74      	ldr	r3, [pc, #464]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a73      	ldr	r2, [pc, #460]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 80056f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e01e      	b.n	800573e <HAL_RCC_OscConfig+0x172>
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800570a:	d10c      	bne.n	8005726 <HAL_RCC_OscConfig+0x15a>
 800570c:	4b6d      	ldr	r3, [pc, #436]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a6c      	ldr	r2, [pc, #432]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 8005712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	4b6a      	ldr	r3, [pc, #424]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a69      	ldr	r2, [pc, #420]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 800571e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	e00b      	b.n	800573e <HAL_RCC_OscConfig+0x172>
 8005726:	4b67      	ldr	r3, [pc, #412]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a66      	ldr	r2, [pc, #408]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 800572c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4b64      	ldr	r3, [pc, #400]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a63      	ldr	r2, [pc, #396]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 8005738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800573c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800573e:	4b61      	ldr	r3, [pc, #388]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	f023 020f 	bic.w	r2, r3, #15
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	495d      	ldr	r1, [pc, #372]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 800574e:	4313      	orrs	r3, r2
 8005750:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d059      	beq.n	8005810 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fd fbba 	bl	8002ed4 <HAL_GetTick>
 8005760:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005764:	e00a      	b.n	800577c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005766:	f7fd fbb5 	bl	8002ed4 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b64      	cmp	r3, #100	; 0x64
 8005774:	d902      	bls.n	800577c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	f000 be29 	b.w	80063ce <HAL_RCC_OscConfig+0xe02>
 800577c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005780:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005788:	fa93 f3a3 	rbit	r3, r3
 800578c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005790:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005794:	fab3 f383 	clz	r3, r3
 8005798:	b2db      	uxtb	r3, r3
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d102      	bne.n	80057ae <HAL_RCC_OscConfig+0x1e2>
 80057a8:	4b46      	ldr	r3, [pc, #280]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	e015      	b.n	80057da <HAL_RCC_OscConfig+0x20e>
 80057ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80057ba:	fa93 f3a3 	rbit	r3, r3
 80057be:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80057c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80057ca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80057ce:	fa93 f3a3 	rbit	r3, r3
 80057d2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80057d6:	4b3b      	ldr	r3, [pc, #236]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80057e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80057e6:	fa92 f2a2 	rbit	r2, r2
 80057ea:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80057ee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80057f2:	fab2 f282 	clz	r2, r2
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	f042 0220 	orr.w	r2, r2, #32
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	f002 021f 	and.w	r2, r2, #31
 8005802:	2101      	movs	r1, #1
 8005804:	fa01 f202 	lsl.w	r2, r1, r2
 8005808:	4013      	ands	r3, r2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ab      	beq.n	8005766 <HAL_RCC_OscConfig+0x19a>
 800580e:	e05c      	b.n	80058ca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7fd fb60 	bl	8002ed4 <HAL_GetTick>
 8005814:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005818:	e00a      	b.n	8005830 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800581a:	f7fd fb5b 	bl	8002ed4 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	; 0x64
 8005828:	d902      	bls.n	8005830 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	f000 bdcf 	b.w	80063ce <HAL_RCC_OscConfig+0xe02>
 8005830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005834:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800583c:	fa93 f3a3 	rbit	r3, r3
 8005840:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005844:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005848:	fab3 f383 	clz	r3, r3
 800584c:	b2db      	uxtb	r3, r3
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d102      	bne.n	8005862 <HAL_RCC_OscConfig+0x296>
 800585c:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	e015      	b.n	800588e <HAL_RCC_OscConfig+0x2c2>
 8005862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005866:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800587a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800587e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005882:	fa93 f3a3 	rbit	r3, r3
 8005886:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800588a:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <HAL_RCC_OscConfig+0x2f8>)
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005892:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005896:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800589a:	fa92 f2a2 	rbit	r2, r2
 800589e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80058a2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80058a6:	fab2 f282 	clz	r2, r2
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	f042 0220 	orr.w	r2, r2, #32
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	f002 021f 	and.w	r2, r2, #31
 80058b6:	2101      	movs	r1, #1
 80058b8:	fa01 f202 	lsl.w	r2, r1, r2
 80058bc:	4013      	ands	r3, r2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1ab      	bne.n	800581a <HAL_RCC_OscConfig+0x24e>
 80058c2:	e002      	b.n	80058ca <HAL_RCC_OscConfig+0x2fe>
 80058c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ca:	1d3b      	adds	r3, r7, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 816f 	beq.w	8005bb8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80058da:	4bd0      	ldr	r3, [pc, #832]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80058e6:	4bcd      	ldr	r3, [pc, #820]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d16c      	bne.n	80059cc <HAL_RCC_OscConfig+0x400>
 80058f2:	4bca      	ldr	r3, [pc, #808]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d166      	bne.n	80059cc <HAL_RCC_OscConfig+0x400>
 80058fe:	2302      	movs	r3, #2
 8005900:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005904:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005908:	fa93 f3a3 	rbit	r3, r3
 800590c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005910:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005914:	fab3 f383 	clz	r3, r3
 8005918:	b2db      	uxtb	r3, r3
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b01      	cmp	r3, #1
 8005926:	d102      	bne.n	800592e <HAL_RCC_OscConfig+0x362>
 8005928:	4bbc      	ldr	r3, [pc, #752]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	e013      	b.n	8005956 <HAL_RCC_OscConfig+0x38a>
 800592e:	2302      	movs	r3, #2
 8005930:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005934:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005938:	fa93 f3a3 	rbit	r3, r3
 800593c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005940:	2302      	movs	r3, #2
 8005942:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005946:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005952:	4bb2      	ldr	r3, [pc, #712]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	2202      	movs	r2, #2
 8005958:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800595c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005960:	fa92 f2a2 	rbit	r2, r2
 8005964:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005968:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800596c:	fab2 f282 	clz	r2, r2
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	f042 0220 	orr.w	r2, r2, #32
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	f002 021f 	and.w	r2, r2, #31
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f202 	lsl.w	r2, r1, r2
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <HAL_RCC_OscConfig+0x3cc>
 8005988:	1d3b      	adds	r3, r7, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d002      	beq.n	8005998 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f000 bd1b 	b.w	80063ce <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005998:	4ba0      	ldr	r3, [pc, #640]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a0:	1d3b      	adds	r3, r7, #4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	21f8      	movs	r1, #248	; 0xf8
 80059a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80059b0:	fa91 f1a1 	rbit	r1, r1
 80059b4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80059b8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80059bc:	fab1 f181 	clz	r1, r1
 80059c0:	b2c9      	uxtb	r1, r1
 80059c2:	408b      	lsls	r3, r1
 80059c4:	4995      	ldr	r1, [pc, #596]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ca:	e0f5      	b.n	8005bb8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059cc:	1d3b      	adds	r3, r7, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8085 	beq.w	8005ae2 <HAL_RCC_OscConfig+0x516>
 80059d8:	2301      	movs	r3, #1
 80059da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80059e2:	fa93 f3a3 	rbit	r3, r3
 80059e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80059ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059ee:	fab3 f383 	clz	r3, r3
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	461a      	mov	r2, r3
 8005a00:	2301      	movs	r3, #1
 8005a02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a04:	f7fd fa66 	bl	8002ed4 <HAL_GetTick>
 8005a08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a0e:	f7fd fa61 	bl	8002ed4 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d902      	bls.n	8005a24 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	f000 bcd5 	b.w	80063ce <HAL_RCC_OscConfig+0xe02>
 8005a24:	2302      	movs	r3, #2
 8005a26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005a2e:	fa93 f3a3 	rbit	r3, r3
 8005a32:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005a36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3a:	fab3 f383 	clz	r3, r3
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d102      	bne.n	8005a54 <HAL_RCC_OscConfig+0x488>
 8005a4e:	4b73      	ldr	r3, [pc, #460]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	e013      	b.n	8005a7c <HAL_RCC_OscConfig+0x4b0>
 8005a54:	2302      	movs	r3, #2
 8005a56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005a5e:	fa93 f3a3 	rbit	r3, r3
 8005a62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005a66:	2302      	movs	r3, #2
 8005a68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005a6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005a70:	fa93 f3a3 	rbit	r3, r3
 8005a74:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005a78:	4b68      	ldr	r3, [pc, #416]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005a82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005a86:	fa92 f2a2 	rbit	r2, r2
 8005a8a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005a8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005a92:	fab2 f282 	clz	r2, r2
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	f042 0220 	orr.w	r2, r2, #32
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	f002 021f 	and.w	r2, r2, #31
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0af      	beq.n	8005a0e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aae:	4b5b      	ldr	r3, [pc, #364]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ab6:	1d3b      	adds	r3, r7, #4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	21f8      	movs	r1, #248	; 0xf8
 8005abe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005ac6:	fa91 f1a1 	rbit	r1, r1
 8005aca:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005ace:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005ad2:	fab1 f181 	clz	r1, r1
 8005ad6:	b2c9      	uxtb	r1, r1
 8005ad8:	408b      	lsls	r3, r1
 8005ada:	4950      	ldr	r1, [pc, #320]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	600b      	str	r3, [r1, #0]
 8005ae0:	e06a      	b.n	8005bb8 <HAL_RCC_OscConfig+0x5ec>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005aec:	fa93 f3a3 	rbit	r3, r3
 8005af0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005af4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af8:	fab3 f383 	clz	r3, r3
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0e:	f7fd f9e1 	bl	8002ed4 <HAL_GetTick>
 8005b12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b16:	e00a      	b.n	8005b2e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b18:	f7fd f9dc 	bl	8002ed4 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d902      	bls.n	8005b2e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	f000 bc50 	b.w	80063ce <HAL_RCC_OscConfig+0xe02>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b38:	fa93 f3a3 	rbit	r3, r3
 8005b3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b44:	fab3 f383 	clz	r3, r3
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d102      	bne.n	8005b5e <HAL_RCC_OscConfig+0x592>
 8005b58:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	e013      	b.n	8005b86 <HAL_RCC_OscConfig+0x5ba>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b68:	fa93 f3a3 	rbit	r3, r3
 8005b6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b70:	2302      	movs	r3, #2
 8005b72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b76:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b7a:	fa93 f3a3 	rbit	r3, r3
 8005b7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b82:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <HAL_RCC_OscConfig+0x650>)
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2202      	movs	r2, #2
 8005b88:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005b8c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005b90:	fa92 f2a2 	rbit	r2, r2
 8005b94:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005b98:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005b9c:	fab2 f282 	clz	r2, r2
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	f042 0220 	orr.w	r2, r2, #32
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	f002 021f 	and.w	r2, r2, #31
 8005bac:	2101      	movs	r1, #1
 8005bae:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1af      	bne.n	8005b18 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80da 	beq.w	8005d7c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d069      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x6da>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bdc:	fa93 f3a3 	rbit	r3, r3
 8005be0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005be8:	fab3 f383 	clz	r3, r3
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <HAL_RCC_OscConfig+0x654>)
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bfc:	f7fd f96a 	bl	8002ed4 <HAL_GetTick>
 8005c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c04:	e00e      	b.n	8005c24 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c06:	f7fd f965 	bl	8002ed4 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d906      	bls.n	8005c24 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e3d9      	b.n	80063ce <HAL_RCC_OscConfig+0xe02>
 8005c1a:	bf00      	nop
 8005c1c:	40021000 	.word	0x40021000
 8005c20:	10908120 	.word	0x10908120
 8005c24:	2302      	movs	r3, #2
 8005c26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c2e:	fa93 f3a3 	rbit	r3, r3
 8005c32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c36:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	fa93 f2a3 	rbit	r2, r3
 8005c48:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005c52:	2202      	movs	r2, #2
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	fa93 f2a3 	rbit	r2, r3
 8005c60:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005c64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c66:	4ba5      	ldr	r3, [pc, #660]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c6a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005c6e:	2102      	movs	r1, #2
 8005c70:	6019      	str	r1, [r3, #0]
 8005c72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	fa93 f1a3 	rbit	r1, r3
 8005c7c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005c80:	6019      	str	r1, [r3, #0]
  return result;
 8005c82:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	fab3 f383 	clz	r3, r3
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	2101      	movs	r1, #1
 8005c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0b0      	beq.n	8005c06 <HAL_RCC_OscConfig+0x63a>
 8005ca4:	e06a      	b.n	8005d7c <HAL_RCC_OscConfig+0x7b0>
 8005ca6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	fa93 f2a3 	rbit	r2, r3
 8005cb8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005cbc:	601a      	str	r2, [r3, #0]
  return result;
 8005cbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005cc2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc4:	fab3 f383 	clz	r3, r3
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4b8c      	ldr	r3, [pc, #560]	; (8005f00 <HAL_RCC_OscConfig+0x934>)
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd8:	f7fd f8fc 	bl	8002ed4 <HAL_GetTick>
 8005cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce0:	e009      	b.n	8005cf6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ce2:	f7fd f8f7 	bl	8002ed4 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e36b      	b.n	80063ce <HAL_RCC_OscConfig+0xe02>
 8005cf6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	fa93 f2a3 	rbit	r2, r3
 8005d08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005d12:	2202      	movs	r2, #2
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	fa93 f2a3 	rbit	r2, r3
 8005d20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	fa93 f2a3 	rbit	r2, r3
 8005d38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005d3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d3e:	4b6f      	ldr	r3, [pc, #444]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005d46:	2102      	movs	r1, #2
 8005d48:	6019      	str	r1, [r3, #0]
 8005d4a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	fa93 f1a3 	rbit	r1, r3
 8005d54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005d58:	6019      	str	r1, [r3, #0]
  return result;
 8005d5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	fab3 f383 	clz	r3, r3
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	2101      	movs	r1, #1
 8005d72:	fa01 f303 	lsl.w	r3, r1, r3
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1b2      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8158 	beq.w	800603c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d92:	4b5a      	ldr	r3, [pc, #360]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d112      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d9e:	4b57      	ldr	r3, [pc, #348]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	4a56      	ldr	r2, [pc, #344]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da8:	61d3      	str	r3, [r2, #28]
 8005daa:	4b54      	ldr	r3, [pc, #336]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005db2:	f107 0308 	add.w	r3, r7, #8
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	f107 0308 	add.w	r3, r7, #8
 8005dbc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc4:	4b4f      	ldr	r3, [pc, #316]	; (8005f04 <HAL_RCC_OscConfig+0x938>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d11a      	bne.n	8005e06 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dd0:	4b4c      	ldr	r3, [pc, #304]	; (8005f04 <HAL_RCC_OscConfig+0x938>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a4b      	ldr	r2, [pc, #300]	; (8005f04 <HAL_RCC_OscConfig+0x938>)
 8005dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dda:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ddc:	f7fd f87a 	bl	8002ed4 <HAL_GetTick>
 8005de0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de4:	e009      	b.n	8005dfa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de6:	f7fd f875 	bl	8002ed4 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b64      	cmp	r3, #100	; 0x64
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e2e9      	b.n	80063ce <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfa:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <HAL_RCC_OscConfig+0x938>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0ef      	beq.n	8005de6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d106      	bne.n	8005e1e <HAL_RCC_OscConfig+0x852>
 8005e10:	4b3a      	ldr	r3, [pc, #232]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	4a39      	ldr	r2, [pc, #228]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	6213      	str	r3, [r2, #32]
 8005e1c:	e02f      	b.n	8005e7e <HAL_RCC_OscConfig+0x8b2>
 8005e1e:	1d3b      	adds	r3, r7, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10c      	bne.n	8005e42 <HAL_RCC_OscConfig+0x876>
 8005e28:	4b34      	ldr	r3, [pc, #208]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	4a33      	ldr	r2, [pc, #204]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
 8005e32:	6213      	str	r3, [r2, #32]
 8005e34:	4b31      	ldr	r3, [pc, #196]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	4a30      	ldr	r2, [pc, #192]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e3a:	f023 0304 	bic.w	r3, r3, #4
 8005e3e:	6213      	str	r3, [r2, #32]
 8005e40:	e01d      	b.n	8005e7e <HAL_RCC_OscConfig+0x8b2>
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	d10c      	bne.n	8005e66 <HAL_RCC_OscConfig+0x89a>
 8005e4c:	4b2b      	ldr	r3, [pc, #172]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	4a2a      	ldr	r2, [pc, #168]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e52:	f043 0304 	orr.w	r3, r3, #4
 8005e56:	6213      	str	r3, [r2, #32]
 8005e58:	4b28      	ldr	r3, [pc, #160]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	4a27      	ldr	r2, [pc, #156]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e5e:	f043 0301 	orr.w	r3, r3, #1
 8005e62:	6213      	str	r3, [r2, #32]
 8005e64:	e00b      	b.n	8005e7e <HAL_RCC_OscConfig+0x8b2>
 8005e66:	4b25      	ldr	r3, [pc, #148]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	4a24      	ldr	r2, [pc, #144]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	6213      	str	r3, [r2, #32]
 8005e72:	4b22      	ldr	r3, [pc, #136]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	4a21      	ldr	r2, [pc, #132]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005e78:	f023 0304 	bic.w	r3, r3, #4
 8005e7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d06b      	beq.n	8005f60 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e88:	f7fd f824 	bl	8002ed4 <HAL_GetTick>
 8005e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e90:	e00b      	b.n	8005eaa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e92:	f7fd f81f 	bl	8002ed4 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e291      	b.n	80063ce <HAL_RCC_OscConfig+0xe02>
 8005eaa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005eae:	2202      	movs	r2, #2
 8005eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	fa93 f2a3 	rbit	r2, r3
 8005ebc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	fa93 f2a3 	rbit	r2, r3
 8005ed4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005ed8:	601a      	str	r2, [r3, #0]
  return result;
 8005eda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005ede:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee0:	fab3 f383 	clz	r3, r3
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	f043 0302 	orr.w	r3, r3, #2
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d109      	bne.n	8005f08 <HAL_RCC_OscConfig+0x93c>
 8005ef4:	4b01      	ldr	r3, [pc, #4]	; (8005efc <HAL_RCC_OscConfig+0x930>)
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	e014      	b.n	8005f24 <HAL_RCC_OscConfig+0x958>
 8005efa:	bf00      	nop
 8005efc:	40021000 	.word	0x40021000
 8005f00:	10908120 	.word	0x10908120
 8005f04:	40007000 	.word	0x40007000
 8005f08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f10:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	fa93 f2a3 	rbit	r2, r3
 8005f1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	4bbb      	ldr	r3, [pc, #748]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f28:	2102      	movs	r1, #2
 8005f2a:	6011      	str	r1, [r2, #0]
 8005f2c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	fa92 f1a2 	rbit	r1, r2
 8005f36:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005f3a:	6011      	str	r1, [r2, #0]
  return result;
 8005f3c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	fab2 f282 	clz	r2, r2
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	f002 021f 	and.w	r2, r2, #31
 8005f52:	2101      	movs	r1, #1
 8005f54:	fa01 f202 	lsl.w	r2, r1, r2
 8005f58:	4013      	ands	r3, r2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d099      	beq.n	8005e92 <HAL_RCC_OscConfig+0x8c6>
 8005f5e:	e063      	b.n	8006028 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f60:	f7fc ffb8 	bl	8002ed4 <HAL_GetTick>
 8005f64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f68:	e00b      	b.n	8005f82 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f6a:	f7fc ffb3 	bl	8002ed4 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e225      	b.n	80063ce <HAL_RCC_OscConfig+0xe02>
 8005f82:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f86:	2202      	movs	r2, #2
 8005f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	fa93 f2a3 	rbit	r2, r3
 8005f94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	fa93 f2a3 	rbit	r2, r3
 8005fac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005fb0:	601a      	str	r2, [r3, #0]
  return result;
 8005fb2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005fb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fb8:	fab3 f383 	clz	r3, r3
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f043 0302 	orr.w	r3, r3, #2
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d102      	bne.n	8005fd2 <HAL_RCC_OscConfig+0xa06>
 8005fcc:	4b90      	ldr	r3, [pc, #576]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	e00d      	b.n	8005fee <HAL_RCC_OscConfig+0xa22>
 8005fd2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fda:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	fa93 f2a3 	rbit	r2, r3
 8005fe4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	4b89      	ldr	r3, [pc, #548]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005ff2:	2102      	movs	r1, #2
 8005ff4:	6011      	str	r1, [r2, #0]
 8005ff6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005ffa:	6812      	ldr	r2, [r2, #0]
 8005ffc:	fa92 f1a2 	rbit	r1, r2
 8006000:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006004:	6011      	str	r1, [r2, #0]
  return result;
 8006006:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	fab2 f282 	clz	r2, r2
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	f002 021f 	and.w	r2, r2, #31
 800601c:	2101      	movs	r1, #1
 800601e:	fa01 f202 	lsl.w	r2, r1, r2
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1a0      	bne.n	8005f6a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006028:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800602c:	2b01      	cmp	r3, #1
 800602e:	d105      	bne.n	800603c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006030:	4b77      	ldr	r3, [pc, #476]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	4a76      	ldr	r2, [pc, #472]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 8006036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800603a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800603c:	1d3b      	adds	r3, r7, #4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 81c2 	beq.w	80063cc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006048:	4b71      	ldr	r3, [pc, #452]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 030c 	and.w	r3, r3, #12
 8006050:	2b08      	cmp	r3, #8
 8006052:	f000 819c 	beq.w	800638e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	2b02      	cmp	r3, #2
 800605e:	f040 8114 	bne.w	800628a <HAL_RCC_OscConfig+0xcbe>
 8006062:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006066:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800606a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	fa93 f2a3 	rbit	r2, r3
 8006076:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800607a:	601a      	str	r2, [r3, #0]
  return result;
 800607c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006080:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006082:	fab3 f383 	clz	r3, r3
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800608c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	461a      	mov	r2, r3
 8006094:	2300      	movs	r3, #0
 8006096:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006098:	f7fc ff1c 	bl	8002ed4 <HAL_GetTick>
 800609c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060a0:	e009      	b.n	80060b6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a2:	f7fc ff17 	bl	8002ed4 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e18b      	b.n	80063ce <HAL_RCC_OscConfig+0xe02>
 80060b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80060ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	fa93 f2a3 	rbit	r2, r3
 80060ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060ce:	601a      	str	r2, [r3, #0]
  return result;
 80060d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060d6:	fab3 f383 	clz	r3, r3
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d102      	bne.n	80060f0 <HAL_RCC_OscConfig+0xb24>
 80060ea:	4b49      	ldr	r3, [pc, #292]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	e01b      	b.n	8006128 <HAL_RCC_OscConfig+0xb5c>
 80060f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80060f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	fa93 f2a3 	rbit	r2, r3
 8006104:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800610e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	fa93 f2a3 	rbit	r2, r3
 800611e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	4b3a      	ldr	r3, [pc, #232]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800612c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006130:	6011      	str	r1, [r2, #0]
 8006132:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	fa92 f1a2 	rbit	r1, r2
 800613c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006140:	6011      	str	r1, [r2, #0]
  return result;
 8006142:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	fab2 f282 	clz	r2, r2
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	f042 0220 	orr.w	r2, r2, #32
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	f002 021f 	and.w	r2, r2, #31
 8006158:	2101      	movs	r1, #1
 800615a:	fa01 f202 	lsl.w	r2, r1, r2
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d19e      	bne.n	80060a2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006164:	4b2a      	ldr	r3, [pc, #168]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006172:	1d3b      	adds	r3, r7, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	430b      	orrs	r3, r1
 800617a:	4925      	ldr	r1, [pc, #148]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 800617c:	4313      	orrs	r3, r2
 800617e:	604b      	str	r3, [r1, #4]
 8006180:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	fa93 f2a3 	rbit	r2, r3
 8006194:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006198:	601a      	str	r2, [r3, #0]
  return result;
 800619a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800619e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061a0:	fab3 f383 	clz	r3, r3
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	461a      	mov	r2, r3
 80061b2:	2301      	movs	r3, #1
 80061b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b6:	f7fc fe8d 	bl	8002ed4 <HAL_GetTick>
 80061ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061be:	e009      	b.n	80061d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c0:	f7fc fe88 	bl	8002ed4 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e0fc      	b.n	80063ce <HAL_RCC_OscConfig+0xe02>
 80061d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80061d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	fa93 f2a3 	rbit	r2, r3
 80061e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80061ec:	601a      	str	r2, [r3, #0]
  return result;
 80061ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80061f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061f4:	fab3 f383 	clz	r3, r3
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	f043 0301 	orr.w	r3, r3, #1
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d105      	bne.n	8006214 <HAL_RCC_OscConfig+0xc48>
 8006208:	4b01      	ldr	r3, [pc, #4]	; (8006210 <HAL_RCC_OscConfig+0xc44>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	e01e      	b.n	800624c <HAL_RCC_OscConfig+0xc80>
 800620e:	bf00      	nop
 8006210:	40021000 	.word	0x40021000
 8006214:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006218:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800621c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	fa93 f2a3 	rbit	r2, r3
 8006228:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006232:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	fa93 f2a3 	rbit	r2, r3
 8006242:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	4b63      	ldr	r3, [pc, #396]	; (80063d8 <HAL_RCC_OscConfig+0xe0c>)
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006250:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006254:	6011      	str	r1, [r2, #0]
 8006256:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800625a:	6812      	ldr	r2, [r2, #0]
 800625c:	fa92 f1a2 	rbit	r1, r2
 8006260:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006264:	6011      	str	r1, [r2, #0]
  return result;
 8006266:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	fab2 f282 	clz	r2, r2
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	f042 0220 	orr.w	r2, r2, #32
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	f002 021f 	and.w	r2, r2, #31
 800627c:	2101      	movs	r1, #1
 800627e:	fa01 f202 	lsl.w	r2, r1, r2
 8006282:	4013      	ands	r3, r2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d09b      	beq.n	80061c0 <HAL_RCC_OscConfig+0xbf4>
 8006288:	e0a0      	b.n	80063cc <HAL_RCC_OscConfig+0xe00>
 800628a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800628e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006294:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	fa93 f2a3 	rbit	r2, r3
 800629e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062a2:	601a      	str	r2, [r3, #0]
  return result;
 80062a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062aa:	fab3 f383 	clz	r3, r3
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	461a      	mov	r2, r3
 80062bc:	2300      	movs	r3, #0
 80062be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c0:	f7fc fe08 	bl	8002ed4 <HAL_GetTick>
 80062c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062c8:	e009      	b.n	80062de <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ca:	f7fc fe03 	bl	8002ed4 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e077      	b.n	80063ce <HAL_RCC_OscConfig+0xe02>
 80062de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	fa93 f2a3 	rbit	r2, r3
 80062f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062f6:	601a      	str	r2, [r3, #0]
  return result;
 80062f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062fe:	fab3 f383 	clz	r3, r3
 8006302:	b2db      	uxtb	r3, r3
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f043 0301 	orr.w	r3, r3, #1
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b01      	cmp	r3, #1
 8006310:	d102      	bne.n	8006318 <HAL_RCC_OscConfig+0xd4c>
 8006312:	4b31      	ldr	r3, [pc, #196]	; (80063d8 <HAL_RCC_OscConfig+0xe0c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	e01b      	b.n	8006350 <HAL_RCC_OscConfig+0xd84>
 8006318:	f107 0320 	add.w	r3, r7, #32
 800631c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006322:	f107 0320 	add.w	r3, r7, #32
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	fa93 f2a3 	rbit	r2, r3
 800632c:	f107 031c 	add.w	r3, r7, #28
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	f107 0318 	add.w	r3, r7, #24
 8006336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	f107 0318 	add.w	r3, r7, #24
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	fa93 f2a3 	rbit	r2, r3
 8006346:	f107 0314 	add.w	r3, r7, #20
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	4b22      	ldr	r3, [pc, #136]	; (80063d8 <HAL_RCC_OscConfig+0xe0c>)
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	f107 0210 	add.w	r2, r7, #16
 8006354:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006358:	6011      	str	r1, [r2, #0]
 800635a:	f107 0210 	add.w	r2, r7, #16
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	fa92 f1a2 	rbit	r1, r2
 8006364:	f107 020c 	add.w	r2, r7, #12
 8006368:	6011      	str	r1, [r2, #0]
  return result;
 800636a:	f107 020c 	add.w	r2, r7, #12
 800636e:	6812      	ldr	r2, [r2, #0]
 8006370:	fab2 f282 	clz	r2, r2
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	f042 0220 	orr.w	r2, r2, #32
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	f002 021f 	and.w	r2, r2, #31
 8006380:	2101      	movs	r1, #1
 8006382:	fa01 f202 	lsl.w	r2, r1, r2
 8006386:	4013      	ands	r3, r2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d19e      	bne.n	80062ca <HAL_RCC_OscConfig+0xcfe>
 800638c:	e01e      	b.n	80063cc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800638e:	1d3b      	adds	r3, r7, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e018      	b.n	80063ce <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <HAL_RCC_OscConfig+0xe0c>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80063a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063ac:	1d3b      	adds	r3, r7, #4
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d108      	bne.n	80063c8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80063b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80063ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063be:	1d3b      	adds	r3, r7, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40021000 	.word	0x40021000

080063dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b09e      	sub	sp, #120	; 0x78
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e162      	b.n	80066ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063f4:	4b90      	ldr	r3, [pc, #576]	; (8006638 <HAL_RCC_ClockConfig+0x25c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d910      	bls.n	8006424 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006402:	4b8d      	ldr	r3, [pc, #564]	; (8006638 <HAL_RCC_ClockConfig+0x25c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f023 0207 	bic.w	r2, r3, #7
 800640a:	498b      	ldr	r1, [pc, #556]	; (8006638 <HAL_RCC_ClockConfig+0x25c>)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	4313      	orrs	r3, r2
 8006410:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006412:	4b89      	ldr	r3, [pc, #548]	; (8006638 <HAL_RCC_ClockConfig+0x25c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d001      	beq.n	8006424 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e14a      	b.n	80066ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006430:	4b82      	ldr	r3, [pc, #520]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	497f      	ldr	r1, [pc, #508]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 800643e:	4313      	orrs	r3, r2
 8006440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 80dc 	beq.w	8006608 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d13c      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xf6>
 8006458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800645c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006460:	fa93 f3a3 	rbit	r3, r3
 8006464:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006468:	fab3 f383 	clz	r3, r3
 800646c:	b2db      	uxtb	r3, r3
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	d102      	bne.n	8006482 <HAL_RCC_ClockConfig+0xa6>
 800647c:	4b6f      	ldr	r3, [pc, #444]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	e00f      	b.n	80064a2 <HAL_RCC_ClockConfig+0xc6>
 8006482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006486:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800648a:	fa93 f3a3 	rbit	r3, r3
 800648e:	667b      	str	r3, [r7, #100]	; 0x64
 8006490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006494:	663b      	str	r3, [r7, #96]	; 0x60
 8006496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006498:	fa93 f3a3 	rbit	r3, r3
 800649c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800649e:	4b67      	ldr	r3, [pc, #412]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80064a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064aa:	fa92 f2a2 	rbit	r2, r2
 80064ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80064b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064b2:	fab2 f282 	clz	r2, r2
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	f042 0220 	orr.w	r2, r2, #32
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	f002 021f 	and.w	r2, r2, #31
 80064c2:	2101      	movs	r1, #1
 80064c4:	fa01 f202 	lsl.w	r2, r1, r2
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d17b      	bne.n	80065c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e0f3      	b.n	80066ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d13c      	bne.n	8006554 <HAL_RCC_ClockConfig+0x178>
 80064da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e2:	fa93 f3a3 	rbit	r3, r3
 80064e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80064e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ea:	fab3 f383 	clz	r3, r3
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d102      	bne.n	8006504 <HAL_RCC_ClockConfig+0x128>
 80064fe:	4b4f      	ldr	r3, [pc, #316]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	e00f      	b.n	8006524 <HAL_RCC_ClockConfig+0x148>
 8006504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006508:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800650c:	fa93 f3a3 	rbit	r3, r3
 8006510:	647b      	str	r3, [r7, #68]	; 0x44
 8006512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006516:	643b      	str	r3, [r7, #64]	; 0x40
 8006518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651a:	fa93 f3a3 	rbit	r3, r3
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006520:	4b46      	ldr	r3, [pc, #280]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006528:	63ba      	str	r2, [r7, #56]	; 0x38
 800652a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800652c:	fa92 f2a2 	rbit	r2, r2
 8006530:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006534:	fab2 f282 	clz	r2, r2
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	f042 0220 	orr.w	r2, r2, #32
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	f002 021f 	and.w	r2, r2, #31
 8006544:	2101      	movs	r1, #1
 8006546:	fa01 f202 	lsl.w	r2, r1, r2
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d13a      	bne.n	80065c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0b2      	b.n	80066ba <HAL_RCC_ClockConfig+0x2de>
 8006554:	2302      	movs	r3, #2
 8006556:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	fa93 f3a3 	rbit	r3, r3
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006562:	fab3 f383 	clz	r3, r3
 8006566:	b2db      	uxtb	r3, r3
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b01      	cmp	r3, #1
 8006574:	d102      	bne.n	800657c <HAL_RCC_ClockConfig+0x1a0>
 8006576:	4b31      	ldr	r3, [pc, #196]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	e00d      	b.n	8006598 <HAL_RCC_ClockConfig+0x1bc>
 800657c:	2302      	movs	r3, #2
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	fa93 f3a3 	rbit	r3, r3
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
 8006588:	2302      	movs	r3, #2
 800658a:	623b      	str	r3, [r7, #32]
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	fa93 f3a3 	rbit	r3, r3
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	4b29      	ldr	r3, [pc, #164]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	2202      	movs	r2, #2
 800659a:	61ba      	str	r2, [r7, #24]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	fa92 f2a2 	rbit	r2, r2
 80065a2:	617a      	str	r2, [r7, #20]
  return result;
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	fab2 f282 	clz	r2, r2
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	f042 0220 	orr.w	r2, r2, #32
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	f002 021f 	and.w	r2, r2, #31
 80065b6:	2101      	movs	r1, #1
 80065b8:	fa01 f202 	lsl.w	r2, r1, r2
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e079      	b.n	80066ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065c6:	4b1d      	ldr	r3, [pc, #116]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f023 0203 	bic.w	r2, r3, #3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	491a      	ldr	r1, [pc, #104]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d8:	f7fc fc7c 	bl	8002ed4 <HAL_GetTick>
 80065dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065de:	e00a      	b.n	80065f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e0:	f7fc fc78 	bl	8002ed4 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e061      	b.n	80066ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f6:	4b11      	ldr	r3, [pc, #68]	; (800663c <HAL_RCC_ClockConfig+0x260>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f003 020c 	and.w	r2, r3, #12
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	429a      	cmp	r2, r3
 8006606:	d1eb      	bne.n	80065e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006608:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <HAL_RCC_ClockConfig+0x25c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d214      	bcs.n	8006640 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006616:	4b08      	ldr	r3, [pc, #32]	; (8006638 <HAL_RCC_ClockConfig+0x25c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 0207 	bic.w	r2, r3, #7
 800661e:	4906      	ldr	r1, [pc, #24]	; (8006638 <HAL_RCC_ClockConfig+0x25c>)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	4313      	orrs	r3, r2
 8006624:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006626:	4b04      	ldr	r3, [pc, #16]	; (8006638 <HAL_RCC_ClockConfig+0x25c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d005      	beq.n	8006640 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e040      	b.n	80066ba <HAL_RCC_ClockConfig+0x2de>
 8006638:	40022000 	.word	0x40022000
 800663c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800664c:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <HAL_RCC_ClockConfig+0x2e8>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	491a      	ldr	r1, [pc, #104]	; (80066c4 <HAL_RCC_ClockConfig+0x2e8>)
 800665a:	4313      	orrs	r3, r2
 800665c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d009      	beq.n	800667e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800666a:	4b16      	ldr	r3, [pc, #88]	; (80066c4 <HAL_RCC_ClockConfig+0x2e8>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4912      	ldr	r1, [pc, #72]	; (80066c4 <HAL_RCC_ClockConfig+0x2e8>)
 800667a:	4313      	orrs	r3, r2
 800667c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800667e:	f000 f829 	bl	80066d4 <HAL_RCC_GetSysClockFreq>
 8006682:	4601      	mov	r1, r0
 8006684:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <HAL_RCC_ClockConfig+0x2e8>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800668c:	22f0      	movs	r2, #240	; 0xf0
 800668e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	fa92 f2a2 	rbit	r2, r2
 8006696:	60fa      	str	r2, [r7, #12]
  return result;
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	fab2 f282 	clz	r2, r2
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	40d3      	lsrs	r3, r2
 80066a2:	4a09      	ldr	r2, [pc, #36]	; (80066c8 <HAL_RCC_ClockConfig+0x2ec>)
 80066a4:	5cd3      	ldrb	r3, [r2, r3]
 80066a6:	fa21 f303 	lsr.w	r3, r1, r3
 80066aa:	4a08      	ldr	r2, [pc, #32]	; (80066cc <HAL_RCC_ClockConfig+0x2f0>)
 80066ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80066ae:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <HAL_RCC_ClockConfig+0x2f4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fc fa8a 	bl	8002bcc <HAL_InitTick>
  
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3778      	adds	r7, #120	; 0x78
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40021000 	.word	0x40021000
 80066c8:	0800f348 	.word	0x0800f348
 80066cc:	20000018 	.word	0x20000018
 80066d0:	2000001c 	.word	0x2000001c

080066d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b08b      	sub	sp, #44	; 0x2c
 80066d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
 80066de:	2300      	movs	r3, #0
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	2300      	movs	r3, #0
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80066ee:	4b29      	ldr	r3, [pc, #164]	; (8006794 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f003 030c 	and.w	r3, r3, #12
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d002      	beq.n	8006704 <HAL_RCC_GetSysClockFreq+0x30>
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d003      	beq.n	800670a <HAL_RCC_GetSysClockFreq+0x36>
 8006702:	e03c      	b.n	800677e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006704:	4b24      	ldr	r3, [pc, #144]	; (8006798 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006706:	623b      	str	r3, [r7, #32]
      break;
 8006708:	e03c      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006710:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006714:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	fa92 f2a2 	rbit	r2, r2
 800671c:	607a      	str	r2, [r7, #4]
  return result;
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	fab2 f282 	clz	r2, r2
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	40d3      	lsrs	r3, r2
 8006728:	4a1c      	ldr	r2, [pc, #112]	; (800679c <HAL_RCC_GetSysClockFreq+0xc8>)
 800672a:	5cd3      	ldrb	r3, [r2, r3]
 800672c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	220f      	movs	r2, #15
 8006738:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	fa92 f2a2 	rbit	r2, r2
 8006740:	60fa      	str	r2, [r7, #12]
  return result;
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	fab2 f282 	clz	r2, r2
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	40d3      	lsrs	r3, r2
 800674c:	4a14      	ldr	r2, [pc, #80]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800674e:	5cd3      	ldrb	r3, [r2, r3]
 8006750:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d008      	beq.n	800676e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800675c:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <HAL_RCC_GetSysClockFreq+0xc4>)
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	fbb2 f2f3 	udiv	r2, r2, r3
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
 800676c:	e004      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4a0c      	ldr	r2, [pc, #48]	; (80067a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006772:	fb02 f303 	mul.w	r3, r2, r3
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	623b      	str	r3, [r7, #32]
      break;
 800677c:	e002      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800677e:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006780:	623b      	str	r3, [r7, #32]
      break;
 8006782:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006784:	6a3b      	ldr	r3, [r7, #32]
}
 8006786:	4618      	mov	r0, r3
 8006788:	372c      	adds	r7, #44	; 0x2c
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40021000 	.word	0x40021000
 8006798:	00f42400 	.word	0x00f42400
 800679c:	0800f360 	.word	0x0800f360
 80067a0:	0800f370 	.word	0x0800f370
 80067a4:	003d0900 	.word	0x003d0900
 80067a8:	007a1200 	.word	0x007a1200

080067ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80067b2:	681b      	ldr	r3, [r3, #0]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	20000018 	.word	0x20000018

080067c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80067ca:	f7ff ffef 	bl	80067ac <HAL_RCC_GetHCLKFreq>
 80067ce:	4601      	mov	r1, r0
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80067dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	fa92 f2a2 	rbit	r2, r2
 80067e4:	603a      	str	r2, [r7, #0]
  return result;
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	fab2 f282 	clz	r2, r2
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	40d3      	lsrs	r3, r2
 80067f0:	4a04      	ldr	r2, [pc, #16]	; (8006804 <HAL_RCC_GetPCLK1Freq+0x40>)
 80067f2:	5cd3      	ldrb	r3, [r2, r3]
 80067f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40021000 	.word	0x40021000
 8006804:	0800f358 	.word	0x0800f358

08006808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800680e:	f7ff ffcd 	bl	80067ac <HAL_RCC_GetHCLKFreq>
 8006812:	4601      	mov	r1, r0
 8006814:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800681c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006820:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	fa92 f2a2 	rbit	r2, r2
 8006828:	603a      	str	r2, [r7, #0]
  return result;
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	fab2 f282 	clz	r2, r2
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	40d3      	lsrs	r3, r2
 8006834:	4a04      	ldr	r2, [pc, #16]	; (8006848 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006836:	5cd3      	ldrb	r3, [r2, r3]
 8006838:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40021000 	.word	0x40021000
 8006848:	0800f358 	.word	0x0800f358

0800684c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	220f      	movs	r2, #15
 800685a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800685c:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <HAL_RCC_GetClockConfig+0x5c>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f003 0203 	and.w	r2, r3, #3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006868:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <HAL_RCC_GetClockConfig+0x5c>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006880:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	08db      	lsrs	r3, r3, #3
 8006886:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800688e:	4b07      	ldr	r3, [pc, #28]	; (80068ac <HAL_RCC_GetClockConfig+0x60>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0207 	and.w	r2, r3, #7
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	601a      	str	r2, [r3, #0]
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40021000 	.word	0x40021000
 80068ac:	40022000 	.word	0x40022000

080068b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b092      	sub	sp, #72	; 0x48
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80068c0:	2300      	movs	r3, #0
 80068c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 80d4 	beq.w	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d4:	4b4e      	ldr	r3, [pc, #312]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10e      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e0:	4b4b      	ldr	r3, [pc, #300]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	4a4a      	ldr	r2, [pc, #296]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ea:	61d3      	str	r3, [r2, #28]
 80068ec:	4b48      	ldr	r3, [pc, #288]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068fe:	4b45      	ldr	r3, [pc, #276]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d118      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690a:	4b42      	ldr	r3, [pc, #264]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a41      	ldr	r2, [pc, #260]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006914:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006916:	f7fc fadd 	bl	8002ed4 <HAL_GetTick>
 800691a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800691c:	e008      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691e:	f7fc fad9 	bl	8002ed4 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b64      	cmp	r3, #100	; 0x64
 800692a:	d901      	bls.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e169      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006930:	4b38      	ldr	r3, [pc, #224]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800693c:	4b34      	ldr	r3, [pc, #208]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 8084 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006958:	429a      	cmp	r2, r3
 800695a:	d07c      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800695c:	4b2c      	ldr	r3, [pc, #176]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800696a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	fa93 f3a3 	rbit	r3, r3
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006976:	fab3 f383 	clz	r3, r3
 800697a:	b2db      	uxtb	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	461a      	mov	r2, r3
 8006986:	2301      	movs	r3, #1
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800698e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	fa93 f3a3 	rbit	r3, r3
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800699a:	fab3 f383 	clz	r3, r3
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	461a      	mov	r2, r3
 80069aa:	2300      	movs	r3, #0
 80069ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80069ae:	4a18      	ldr	r2, [pc, #96]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80069b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d04b      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069be:	f7fc fa89 	bl	8002ed4 <HAL_GetTick>
 80069c2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c4:	e00a      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c6:	f7fc fa85 	bl	8002ed4 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d901      	bls.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e113      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80069dc:	2302      	movs	r3, #2
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	fa93 f3a3 	rbit	r3, r3
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
 80069e8:	2302      	movs	r3, #2
 80069ea:	623b      	str	r3, [r7, #32]
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	fa93 f3a3 	rbit	r3, r3
 80069f2:	61fb      	str	r3, [r7, #28]
  return result;
 80069f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f6:	fab3 f383 	clz	r3, r3
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f043 0302 	orr.w	r3, r3, #2
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d108      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006a0a:	4b01      	ldr	r3, [pc, #4]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	e00d      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006a10:	40021000 	.word	0x40021000
 8006a14:	40007000 	.word	0x40007000
 8006a18:	10908100 	.word	0x10908100
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	fa93 f3a3 	rbit	r3, r3
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	4b78      	ldr	r3, [pc, #480]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	613a      	str	r2, [r7, #16]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	fa92 f2a2 	rbit	r2, r2
 8006a36:	60fa      	str	r2, [r7, #12]
  return result;
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	fab2 f282 	clz	r2, r2
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	f002 021f 	and.w	r2, r2, #31
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0b7      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006a56:	4b6d      	ldr	r3, [pc, #436]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	496a      	ldr	r1, [pc, #424]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d105      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a70:	4b66      	ldr	r3, [pc, #408]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	4a65      	ldr	r2, [pc, #404]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a88:	4b60      	ldr	r3, [pc, #384]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	f023 0203 	bic.w	r2, r3, #3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	495d      	ldr	r1, [pc, #372]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006aa6:	4b59      	ldr	r3, [pc, #356]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	4956      	ldr	r1, [pc, #344]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ac4:	4b51      	ldr	r3, [pc, #324]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	494e      	ldr	r1, [pc, #312]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d008      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ae2:	4b4a      	ldr	r3, [pc, #296]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	f023 0210 	bic.w	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	4947      	ldr	r1, [pc, #284]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006b00:	4b42      	ldr	r3, [pc, #264]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	493f      	ldr	r1, [pc, #252]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d008      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b1e:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	f023 0220 	bic.w	r2, r3, #32
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	4938      	ldr	r1, [pc, #224]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d008      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b3c:	4b33      	ldr	r3, [pc, #204]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	4930      	ldr	r1, [pc, #192]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0310 	and.w	r3, r3, #16
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b5a:	4b2c      	ldr	r3, [pc, #176]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	4929      	ldr	r1, [pc, #164]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d008      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b78:	4b24      	ldr	r3, [pc, #144]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	4921      	ldr	r1, [pc, #132]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d008      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b96:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	491a      	ldr	r1, [pc, #104]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d008      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006bb4:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	4912      	ldr	r1, [pc, #72]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d008      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006bd2:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	490b      	ldr	r1, [pc, #44]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfc:	4903      	ldr	r1, [pc, #12]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3748      	adds	r7, #72	; 0x48
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	40021000 	.word	0x40021000

08006c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e049      	b.n	8006cb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fb fe68 	bl	800290c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f001 f912 	bl	8007e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d001      	beq.n	8006cd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e042      	b.n	8006d5e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a21      	ldr	r2, [pc, #132]	; (8006d6c <HAL_TIM_Base_Start+0xac>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d018      	beq.n	8006d1c <HAL_TIM_Base_Start+0x5c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf2:	d013      	beq.n	8006d1c <HAL_TIM_Base_Start+0x5c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <HAL_TIM_Base_Start+0xb0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00e      	beq.n	8006d1c <HAL_TIM_Base_Start+0x5c>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1c      	ldr	r2, [pc, #112]	; (8006d74 <HAL_TIM_Base_Start+0xb4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d009      	beq.n	8006d1c <HAL_TIM_Base_Start+0x5c>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a1a      	ldr	r2, [pc, #104]	; (8006d78 <HAL_TIM_Base_Start+0xb8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d004      	beq.n	8006d1c <HAL_TIM_Base_Start+0x5c>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a19      	ldr	r2, [pc, #100]	; (8006d7c <HAL_TIM_Base_Start+0xbc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d115      	bne.n	8006d48 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	4b17      	ldr	r3, [pc, #92]	; (8006d80 <HAL_TIM_Base_Start+0xc0>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b06      	cmp	r3, #6
 8006d2c:	d015      	beq.n	8006d5a <HAL_TIM_Base_Start+0x9a>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d34:	d011      	beq.n	8006d5a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0201 	orr.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d46:	e008      	b.n	8006d5a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	e000      	b.n	8006d5c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40000800 	.word	0x40000800
 8006d78:	40013400 	.word	0x40013400
 8006d7c:	40014000 	.word	0x40014000
 8006d80:	00010007 	.word	0x00010007

08006d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d001      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e04a      	b.n	8006e32 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a21      	ldr	r2, [pc, #132]	; (8006e40 <HAL_TIM_Base_Start_IT+0xbc>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d018      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x6c>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d013      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x6c>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <HAL_TIM_Base_Start_IT+0xc0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00e      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x6c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d009      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x6c>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a1a      	ldr	r2, [pc, #104]	; (8006e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x6c>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a19      	ldr	r2, [pc, #100]	; (8006e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d115      	bne.n	8006e1c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	4b17      	ldr	r3, [pc, #92]	; (8006e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b06      	cmp	r3, #6
 8006e00:	d015      	beq.n	8006e2e <HAL_TIM_Base_Start_IT+0xaa>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e08:	d011      	beq.n	8006e2e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0201 	orr.w	r2, r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1a:	e008      	b.n	8006e2e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0201 	orr.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	e000      	b.n	8006e30 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40012c00 	.word	0x40012c00
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	40013400 	.word	0x40013400
 8006e50:	40014000 	.word	0x40014000
 8006e54:	00010007 	.word	0x00010007

08006e58 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e049      	b.n	8006efe <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fb fdd8 	bl	8002a34 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4619      	mov	r1, r3
 8006e96:	4610      	mov	r0, r2
 8006e98:	f000 ffee 	bl	8007e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e049      	b.n	8006fac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7fb fcb7 	bl	80028a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f000 ff97 	bl	8007e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d109      	bne.n	8006fd8 <HAL_TIM_PWM_Start+0x24>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	bf14      	ite	ne
 8006fd0:	2301      	movne	r3, #1
 8006fd2:	2300      	moveq	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e03c      	b.n	8007052 <HAL_TIM_PWM_Start+0x9e>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d109      	bne.n	8006ff2 <HAL_TIM_PWM_Start+0x3e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	bf14      	ite	ne
 8006fea:	2301      	movne	r3, #1
 8006fec:	2300      	moveq	r3, #0
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	e02f      	b.n	8007052 <HAL_TIM_PWM_Start+0x9e>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d109      	bne.n	800700c <HAL_TIM_PWM_Start+0x58>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	bf14      	ite	ne
 8007004:	2301      	movne	r3, #1
 8007006:	2300      	moveq	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	e022      	b.n	8007052 <HAL_TIM_PWM_Start+0x9e>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b0c      	cmp	r3, #12
 8007010:	d109      	bne.n	8007026 <HAL_TIM_PWM_Start+0x72>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b01      	cmp	r3, #1
 800701c:	bf14      	ite	ne
 800701e:	2301      	movne	r3, #1
 8007020:	2300      	moveq	r3, #0
 8007022:	b2db      	uxtb	r3, r3
 8007024:	e015      	b.n	8007052 <HAL_TIM_PWM_Start+0x9e>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b10      	cmp	r3, #16
 800702a:	d109      	bne.n	8007040 <HAL_TIM_PWM_Start+0x8c>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b01      	cmp	r3, #1
 8007036:	bf14      	ite	ne
 8007038:	2301      	movne	r3, #1
 800703a:	2300      	moveq	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	e008      	b.n	8007052 <HAL_TIM_PWM_Start+0x9e>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b01      	cmp	r3, #1
 800704a:	bf14      	ite	ne
 800704c:	2301      	movne	r3, #1
 800704e:	2300      	moveq	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e097      	b.n	800718a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d104      	bne.n	800706a <HAL_TIM_PWM_Start+0xb6>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007068:	e023      	b.n	80070b2 <HAL_TIM_PWM_Start+0xfe>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b04      	cmp	r3, #4
 800706e:	d104      	bne.n	800707a <HAL_TIM_PWM_Start+0xc6>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007078:	e01b      	b.n	80070b2 <HAL_TIM_PWM_Start+0xfe>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b08      	cmp	r3, #8
 800707e:	d104      	bne.n	800708a <HAL_TIM_PWM_Start+0xd6>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007088:	e013      	b.n	80070b2 <HAL_TIM_PWM_Start+0xfe>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b0c      	cmp	r3, #12
 800708e:	d104      	bne.n	800709a <HAL_TIM_PWM_Start+0xe6>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007098:	e00b      	b.n	80070b2 <HAL_TIM_PWM_Start+0xfe>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b10      	cmp	r3, #16
 800709e:	d104      	bne.n	80070aa <HAL_TIM_PWM_Start+0xf6>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070a8:	e003      	b.n	80070b2 <HAL_TIM_PWM_Start+0xfe>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2202      	movs	r2, #2
 80070ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2201      	movs	r2, #1
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 fbfa 	bl	80088b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a33      	ldr	r2, [pc, #204]	; (8007194 <HAL_TIM_PWM_Start+0x1e0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d013      	beq.n	80070f2 <HAL_TIM_PWM_Start+0x13e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a32      	ldr	r2, [pc, #200]	; (8007198 <HAL_TIM_PWM_Start+0x1e4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00e      	beq.n	80070f2 <HAL_TIM_PWM_Start+0x13e>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a30      	ldr	r2, [pc, #192]	; (800719c <HAL_TIM_PWM_Start+0x1e8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d009      	beq.n	80070f2 <HAL_TIM_PWM_Start+0x13e>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a2f      	ldr	r2, [pc, #188]	; (80071a0 <HAL_TIM_PWM_Start+0x1ec>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d004      	beq.n	80070f2 <HAL_TIM_PWM_Start+0x13e>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <HAL_TIM_PWM_Start+0x1f0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d101      	bne.n	80070f6 <HAL_TIM_PWM_Start+0x142>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <HAL_TIM_PWM_Start+0x144>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d007      	beq.n	800710c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800710a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a20      	ldr	r2, [pc, #128]	; (8007194 <HAL_TIM_PWM_Start+0x1e0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d018      	beq.n	8007148 <HAL_TIM_PWM_Start+0x194>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711e:	d013      	beq.n	8007148 <HAL_TIM_PWM_Start+0x194>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a20      	ldr	r2, [pc, #128]	; (80071a8 <HAL_TIM_PWM_Start+0x1f4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00e      	beq.n	8007148 <HAL_TIM_PWM_Start+0x194>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1f      	ldr	r2, [pc, #124]	; (80071ac <HAL_TIM_PWM_Start+0x1f8>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d009      	beq.n	8007148 <HAL_TIM_PWM_Start+0x194>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a17      	ldr	r2, [pc, #92]	; (8007198 <HAL_TIM_PWM_Start+0x1e4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d004      	beq.n	8007148 <HAL_TIM_PWM_Start+0x194>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a16      	ldr	r2, [pc, #88]	; (800719c <HAL_TIM_PWM_Start+0x1e8>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d115      	bne.n	8007174 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689a      	ldr	r2, [r3, #8]
 800714e:	4b18      	ldr	r3, [pc, #96]	; (80071b0 <HAL_TIM_PWM_Start+0x1fc>)
 8007150:	4013      	ands	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b06      	cmp	r3, #6
 8007158:	d015      	beq.n	8007186 <HAL_TIM_PWM_Start+0x1d2>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007160:	d011      	beq.n	8007186 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0201 	orr.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007172:	e008      	b.n	8007186 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	e000      	b.n	8007188 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007186:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40012c00 	.word	0x40012c00
 8007198:	40013400 	.word	0x40013400
 800719c:	40014000 	.word	0x40014000
 80071a0:	40014400 	.word	0x40014400
 80071a4:	40014800 	.word	0x40014800
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	00010007 	.word	0x00010007

080071b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 fb74 	bl	80088b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a3e      	ldr	r2, [pc, #248]	; (80072cc <HAL_TIM_PWM_Stop+0x118>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <HAL_TIM_PWM_Stop+0x4a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a3d      	ldr	r2, [pc, #244]	; (80072d0 <HAL_TIM_PWM_Stop+0x11c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00e      	beq.n	80071fe <HAL_TIM_PWM_Stop+0x4a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a3b      	ldr	r2, [pc, #236]	; (80072d4 <HAL_TIM_PWM_Stop+0x120>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d009      	beq.n	80071fe <HAL_TIM_PWM_Stop+0x4a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a3a      	ldr	r2, [pc, #232]	; (80072d8 <HAL_TIM_PWM_Stop+0x124>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d004      	beq.n	80071fe <HAL_TIM_PWM_Stop+0x4a>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a38      	ldr	r2, [pc, #224]	; (80072dc <HAL_TIM_PWM_Stop+0x128>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d101      	bne.n	8007202 <HAL_TIM_PWM_Stop+0x4e>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <HAL_TIM_PWM_Stop+0x50>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d017      	beq.n	8007238 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6a1a      	ldr	r2, [r3, #32]
 800720e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007212:	4013      	ands	r3, r2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10f      	bne.n	8007238 <HAL_TIM_PWM_Stop+0x84>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6a1a      	ldr	r2, [r3, #32]
 800721e:	f240 4344 	movw	r3, #1092	; 0x444
 8007222:	4013      	ands	r3, r2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d107      	bne.n	8007238 <HAL_TIM_PWM_Stop+0x84>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007236:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6a1a      	ldr	r2, [r3, #32]
 800723e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007242:	4013      	ands	r3, r2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10f      	bne.n	8007268 <HAL_TIM_PWM_Stop+0xb4>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6a1a      	ldr	r2, [r3, #32]
 800724e:	f240 4344 	movw	r3, #1092	; 0x444
 8007252:	4013      	ands	r3, r2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d107      	bne.n	8007268 <HAL_TIM_PWM_Stop+0xb4>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d104      	bne.n	8007278 <HAL_TIM_PWM_Stop+0xc4>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007276:	e023      	b.n	80072c0 <HAL_TIM_PWM_Stop+0x10c>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b04      	cmp	r3, #4
 800727c:	d104      	bne.n	8007288 <HAL_TIM_PWM_Stop+0xd4>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007286:	e01b      	b.n	80072c0 <HAL_TIM_PWM_Stop+0x10c>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b08      	cmp	r3, #8
 800728c:	d104      	bne.n	8007298 <HAL_TIM_PWM_Stop+0xe4>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007296:	e013      	b.n	80072c0 <HAL_TIM_PWM_Stop+0x10c>
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b0c      	cmp	r3, #12
 800729c:	d104      	bne.n	80072a8 <HAL_TIM_PWM_Stop+0xf4>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072a6:	e00b      	b.n	80072c0 <HAL_TIM_PWM_Stop+0x10c>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d104      	bne.n	80072b8 <HAL_TIM_PWM_Stop+0x104>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072b6:	e003      	b.n	80072c0 <HAL_TIM_PWM_Stop+0x10c>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40013400 	.word	0x40013400
 80072d4:	40014000 	.word	0x40014000
 80072d8:	40014400 	.word	0x40014400
 80072dc:	40014800 	.word	0x40014800

080072e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e049      	b.n	8007386 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d106      	bne.n	800730c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f841 	bl	800738e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	4619      	mov	r1, r3
 800731e:	4610      	mov	r0, r2
 8007320:	f000 fdaa 	bl	8007e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
	...

080073a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d104      	bne.n	80073c2 <HAL_TIM_IC_Start_IT+0x1e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	e023      	b.n	800740a <HAL_TIM_IC_Start_IT+0x66>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d104      	bne.n	80073d2 <HAL_TIM_IC_Start_IT+0x2e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	e01b      	b.n	800740a <HAL_TIM_IC_Start_IT+0x66>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d104      	bne.n	80073e2 <HAL_TIM_IC_Start_IT+0x3e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	e013      	b.n	800740a <HAL_TIM_IC_Start_IT+0x66>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b0c      	cmp	r3, #12
 80073e6:	d104      	bne.n	80073f2 <HAL_TIM_IC_Start_IT+0x4e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	e00b      	b.n	800740a <HAL_TIM_IC_Start_IT+0x66>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_IC_Start_IT+0x5e>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	e003      	b.n	800740a <HAL_TIM_IC_Start_IT+0x66>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007408:	b2db      	uxtb	r3, r3
 800740a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d104      	bne.n	800741c <HAL_TIM_IC_Start_IT+0x78>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007418:	b2db      	uxtb	r3, r3
 800741a:	e013      	b.n	8007444 <HAL_TIM_IC_Start_IT+0xa0>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b04      	cmp	r3, #4
 8007420:	d104      	bne.n	800742c <HAL_TIM_IC_Start_IT+0x88>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007428:	b2db      	uxtb	r3, r3
 800742a:	e00b      	b.n	8007444 <HAL_TIM_IC_Start_IT+0xa0>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b08      	cmp	r3, #8
 8007430:	d104      	bne.n	800743c <HAL_TIM_IC_Start_IT+0x98>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007438:	b2db      	uxtb	r3, r3
 800743a:	e003      	b.n	8007444 <HAL_TIM_IC_Start_IT+0xa0>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007442:	b2db      	uxtb	r3, r3
 8007444:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d102      	bne.n	8007452 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800744c:	7b7b      	ldrb	r3, [r7, #13]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d001      	beq.n	8007456 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e0d8      	b.n	8007608 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d104      	bne.n	8007466 <HAL_TIM_IC_Start_IT+0xc2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007464:	e023      	b.n	80074ae <HAL_TIM_IC_Start_IT+0x10a>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b04      	cmp	r3, #4
 800746a:	d104      	bne.n	8007476 <HAL_TIM_IC_Start_IT+0xd2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007474:	e01b      	b.n	80074ae <HAL_TIM_IC_Start_IT+0x10a>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b08      	cmp	r3, #8
 800747a:	d104      	bne.n	8007486 <HAL_TIM_IC_Start_IT+0xe2>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007484:	e013      	b.n	80074ae <HAL_TIM_IC_Start_IT+0x10a>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b0c      	cmp	r3, #12
 800748a:	d104      	bne.n	8007496 <HAL_TIM_IC_Start_IT+0xf2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007494:	e00b      	b.n	80074ae <HAL_TIM_IC_Start_IT+0x10a>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b10      	cmp	r3, #16
 800749a:	d104      	bne.n	80074a6 <HAL_TIM_IC_Start_IT+0x102>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074a4:	e003      	b.n	80074ae <HAL_TIM_IC_Start_IT+0x10a>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2202      	movs	r2, #2
 80074aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <HAL_TIM_IC_Start_IT+0x11a>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074bc:	e013      	b.n	80074e6 <HAL_TIM_IC_Start_IT+0x142>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d104      	bne.n	80074ce <HAL_TIM_IC_Start_IT+0x12a>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074cc:	e00b      	b.n	80074e6 <HAL_TIM_IC_Start_IT+0x142>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d104      	bne.n	80074de <HAL_TIM_IC_Start_IT+0x13a>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074dc:	e003      	b.n	80074e6 <HAL_TIM_IC_Start_IT+0x142>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2202      	movs	r2, #2
 80074e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b0c      	cmp	r3, #12
 80074ea:	d841      	bhi.n	8007570 <HAL_TIM_IC_Start_IT+0x1cc>
 80074ec:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <HAL_TIM_IC_Start_IT+0x150>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007529 	.word	0x08007529
 80074f8:	08007571 	.word	0x08007571
 80074fc:	08007571 	.word	0x08007571
 8007500:	08007571 	.word	0x08007571
 8007504:	0800753b 	.word	0x0800753b
 8007508:	08007571 	.word	0x08007571
 800750c:	08007571 	.word	0x08007571
 8007510:	08007571 	.word	0x08007571
 8007514:	0800754d 	.word	0x0800754d
 8007518:	08007571 	.word	0x08007571
 800751c:	08007571 	.word	0x08007571
 8007520:	08007571 	.word	0x08007571
 8007524:	0800755f 	.word	0x0800755f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0202 	orr.w	r2, r2, #2
 8007536:	60da      	str	r2, [r3, #12]
      break;
 8007538:	e01d      	b.n	8007576 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0204 	orr.w	r2, r2, #4
 8007548:	60da      	str	r2, [r3, #12]
      break;
 800754a:	e014      	b.n	8007576 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0208 	orr.w	r2, r2, #8
 800755a:	60da      	str	r2, [r3, #12]
      break;
 800755c:	e00b      	b.n	8007576 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0210 	orr.w	r2, r2, #16
 800756c:	60da      	str	r2, [r3, #12]
      break;
 800756e:	e002      	b.n	8007576 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
      break;
 8007574:	bf00      	nop
  }

  if (status == HAL_OK)
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d144      	bne.n	8007606 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2201      	movs	r2, #1
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f995 	bl	80088b4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a20      	ldr	r2, [pc, #128]	; (8007610 <HAL_TIM_IC_Start_IT+0x26c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d018      	beq.n	80075c6 <HAL_TIM_IC_Start_IT+0x222>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759c:	d013      	beq.n	80075c6 <HAL_TIM_IC_Start_IT+0x222>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1c      	ldr	r2, [pc, #112]	; (8007614 <HAL_TIM_IC_Start_IT+0x270>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <HAL_TIM_IC_Start_IT+0x222>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1a      	ldr	r2, [pc, #104]	; (8007618 <HAL_TIM_IC_Start_IT+0x274>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_TIM_IC_Start_IT+0x222>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a19      	ldr	r2, [pc, #100]	; (800761c <HAL_TIM_IC_Start_IT+0x278>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_TIM_IC_Start_IT+0x222>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a17      	ldr	r2, [pc, #92]	; (8007620 <HAL_TIM_IC_Start_IT+0x27c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d115      	bne.n	80075f2 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	4b15      	ldr	r3, [pc, #84]	; (8007624 <HAL_TIM_IC_Start_IT+0x280>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b06      	cmp	r3, #6
 80075d6:	d015      	beq.n	8007604 <HAL_TIM_IC_Start_IT+0x260>
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075de:	d011      	beq.n	8007604 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f0:	e008      	b.n	8007604 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f042 0201 	orr.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	e000      	b.n	8007606 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007604:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007606:	7bfb      	ldrb	r3, [r7, #15]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40012c00 	.word	0x40012c00
 8007614:	40000400 	.word	0x40000400
 8007618:	40000800 	.word	0x40000800
 800761c:	40013400 	.word	0x40013400
 8007620:	40014000 	.word	0x40014000
 8007624:	00010007 	.word	0x00010007

08007628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b02      	cmp	r3, #2
 800763c:	d122      	bne.n	8007684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b02      	cmp	r3, #2
 800764a:	d11b      	bne.n	8007684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f06f 0202 	mvn.w	r2, #2
 8007654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fa fbba 	bl	8001de4 <HAL_TIM_IC_CaptureCallback>
 8007670:	e005      	b.n	800767e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fbeb 	bl	8007e4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7fa fb47 	bl	8001d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b04      	cmp	r3, #4
 8007690:	d122      	bne.n	80076d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b04      	cmp	r3, #4
 800769e:	d11b      	bne.n	80076d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f06f 0204 	mvn.w	r2, #4
 80076a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2202      	movs	r2, #2
 80076ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fa fb90 	bl	8001de4 <HAL_TIM_IC_CaptureCallback>
 80076c4:	e005      	b.n	80076d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fbc1 	bl	8007e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7fa fb1d 	bl	8001d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d122      	bne.n	800772c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d11b      	bne.n	800772c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0208 	mvn.w	r2, #8
 80076fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2204      	movs	r2, #4
 8007702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fa fb66 	bl	8001de4 <HAL_TIM_IC_CaptureCallback>
 8007718:	e005      	b.n	8007726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fb97 	bl	8007e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7fa faf3 	bl	8001d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0310 	and.w	r3, r3, #16
 8007736:	2b10      	cmp	r3, #16
 8007738:	d122      	bne.n	8007780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f003 0310 	and.w	r3, r3, #16
 8007744:	2b10      	cmp	r3, #16
 8007746:	d11b      	bne.n	8007780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0210 	mvn.w	r2, #16
 8007750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2208      	movs	r2, #8
 8007756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fa fb3c 	bl	8001de4 <HAL_TIM_IC_CaptureCallback>
 800776c:	e005      	b.n	800777a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb6d 	bl	8007e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7fa fac9 	bl	8001d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b01      	cmp	r3, #1
 800778c:	d10e      	bne.n	80077ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b01      	cmp	r3, #1
 800779a:	d107      	bne.n	80077ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f06f 0201 	mvn.w	r2, #1
 80077a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fa fe2e 	bl	8002408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b6:	2b80      	cmp	r3, #128	; 0x80
 80077b8:	d10e      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c4:	2b80      	cmp	r3, #128	; 0x80
 80077c6:	d107      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 f99c 	bl	8008b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e6:	d10e      	bne.n	8007806 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f2:	2b80      	cmp	r3, #128	; 0x80
 80077f4:	d107      	bne.n	8007806 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80077fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 f98f 	bl	8008b24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d10e      	bne.n	8007832 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d107      	bne.n	8007832 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800782a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fb18 	bl	8007e62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b20      	cmp	r3, #32
 800783e:	d10e      	bne.n	800785e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b20      	cmp	r3, #32
 800784c:	d107      	bne.n	800785e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f06f 0220 	mvn.w	r2, #32
 8007856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f94f 	bl	8008afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007882:	2302      	movs	r3, #2
 8007884:	e066      	b.n	8007954 <HAL_TIM_OC_ConfigChannel+0xec>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b14      	cmp	r3, #20
 8007892:	d857      	bhi.n	8007944 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	080078f1 	.word	0x080078f1
 80078a0:	08007945 	.word	0x08007945
 80078a4:	08007945 	.word	0x08007945
 80078a8:	08007945 	.word	0x08007945
 80078ac:	080078ff 	.word	0x080078ff
 80078b0:	08007945 	.word	0x08007945
 80078b4:	08007945 	.word	0x08007945
 80078b8:	08007945 	.word	0x08007945
 80078bc:	0800790d 	.word	0x0800790d
 80078c0:	08007945 	.word	0x08007945
 80078c4:	08007945 	.word	0x08007945
 80078c8:	08007945 	.word	0x08007945
 80078cc:	0800791b 	.word	0x0800791b
 80078d0:	08007945 	.word	0x08007945
 80078d4:	08007945 	.word	0x08007945
 80078d8:	08007945 	.word	0x08007945
 80078dc:	08007929 	.word	0x08007929
 80078e0:	08007945 	.word	0x08007945
 80078e4:	08007945 	.word	0x08007945
 80078e8:	08007945 	.word	0x08007945
 80078ec:	08007937 	.word	0x08007937
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fb4e 	bl	8007f98 <TIM_OC1_SetConfig>
      break;
 80078fc:	e025      	b.n	800794a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68b9      	ldr	r1, [r7, #8]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fbd7 	bl	80080b8 <TIM_OC2_SetConfig>
      break;
 800790a:	e01e      	b.n	800794a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68b9      	ldr	r1, [r7, #8]
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fc5a 	bl	80081cc <TIM_OC3_SetConfig>
      break;
 8007918:	e017      	b.n	800794a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68b9      	ldr	r1, [r7, #8]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fcdb 	bl	80082dc <TIM_OC4_SetConfig>
      break;
 8007926:	e010      	b.n	800794a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fd3e 	bl	80083b0 <TIM_OC5_SetConfig>
      break;
 8007934:	e009      	b.n	800794a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fd9b 	bl	8008478 <TIM_OC6_SetConfig>
      break;
 8007942:	e002      	b.n	800794a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	75fb      	strb	r3, [r7, #23]
      break;
 8007948:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007952:	7dfb      	ldrb	r3, [r7, #23]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007976:	2302      	movs	r3, #2
 8007978:	e088      	b.n	8007a8c <HAL_TIM_IC_ConfigChannel+0x130>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d11b      	bne.n	80079c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6818      	ldr	r0, [r3, #0]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6819      	ldr	r1, [r3, #0]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f000 fdd4 	bl	8008544 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 020c 	bic.w	r2, r2, #12
 80079aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6999      	ldr	r1, [r3, #24]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	619a      	str	r2, [r3, #24]
 80079be:	e060      	b.n	8007a82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d11c      	bne.n	8007a00 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	6819      	ldr	r1, [r3, #0]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f000 fe4c 	bl	8008672 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699a      	ldr	r2, [r3, #24]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6999      	ldr	r1, [r3, #24]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	021a      	lsls	r2, r3, #8
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	619a      	str	r2, [r3, #24]
 80079fe:	e040      	b.n	8007a82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d11b      	bne.n	8007a3e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6819      	ldr	r1, [r3, #0]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f000 fe99 	bl	800874c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69da      	ldr	r2, [r3, #28]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 020c 	bic.w	r2, r2, #12
 8007a28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69d9      	ldr	r1, [r3, #28]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	61da      	str	r2, [r3, #28]
 8007a3c:	e021      	b.n	8007a82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b0c      	cmp	r3, #12
 8007a42:	d11c      	bne.n	8007a7e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	6819      	ldr	r1, [r3, #0]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f000 feb6 	bl	80087c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69da      	ldr	r2, [r3, #28]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007a66:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	69d9      	ldr	r1, [r3, #28]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	021a      	lsls	r2, r3, #8
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	61da      	str	r2, [r3, #28]
 8007a7c:	e001      	b.n	8007a82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e0ff      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b14      	cmp	r3, #20
 8007abe:	f200 80f0 	bhi.w	8007ca2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007b1d 	.word	0x08007b1d
 8007acc:	08007ca3 	.word	0x08007ca3
 8007ad0:	08007ca3 	.word	0x08007ca3
 8007ad4:	08007ca3 	.word	0x08007ca3
 8007ad8:	08007b5d 	.word	0x08007b5d
 8007adc:	08007ca3 	.word	0x08007ca3
 8007ae0:	08007ca3 	.word	0x08007ca3
 8007ae4:	08007ca3 	.word	0x08007ca3
 8007ae8:	08007b9f 	.word	0x08007b9f
 8007aec:	08007ca3 	.word	0x08007ca3
 8007af0:	08007ca3 	.word	0x08007ca3
 8007af4:	08007ca3 	.word	0x08007ca3
 8007af8:	08007bdf 	.word	0x08007bdf
 8007afc:	08007ca3 	.word	0x08007ca3
 8007b00:	08007ca3 	.word	0x08007ca3
 8007b04:	08007ca3 	.word	0x08007ca3
 8007b08:	08007c21 	.word	0x08007c21
 8007b0c:	08007ca3 	.word	0x08007ca3
 8007b10:	08007ca3 	.word	0x08007ca3
 8007b14:	08007ca3 	.word	0x08007ca3
 8007b18:	08007c61 	.word	0x08007c61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68b9      	ldr	r1, [r7, #8]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fa38 	bl	8007f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0208 	orr.w	r2, r2, #8
 8007b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0204 	bic.w	r2, r2, #4
 8007b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6999      	ldr	r1, [r3, #24]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	691a      	ldr	r2, [r3, #16]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	619a      	str	r2, [r3, #24]
      break;
 8007b5a:	e0a5      	b.n	8007ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68b9      	ldr	r1, [r7, #8]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 faa8 	bl	80080b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	699a      	ldr	r2, [r3, #24]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6999      	ldr	r1, [r3, #24]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	021a      	lsls	r2, r3, #8
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	619a      	str	r2, [r3, #24]
      break;
 8007b9c:	e084      	b.n	8007ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fb11 	bl	80081cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69da      	ldr	r2, [r3, #28]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0208 	orr.w	r2, r2, #8
 8007bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69da      	ldr	r2, [r3, #28]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0204 	bic.w	r2, r2, #4
 8007bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69d9      	ldr	r1, [r3, #28]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	691a      	ldr	r2, [r3, #16]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	61da      	str	r2, [r3, #28]
      break;
 8007bdc:	e064      	b.n	8007ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 fb79 	bl	80082dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69da      	ldr	r2, [r3, #28]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	69d9      	ldr	r1, [r3, #28]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	021a      	lsls	r2, r3, #8
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	61da      	str	r2, [r3, #28]
      break;
 8007c1e:	e043      	b.n	8007ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68b9      	ldr	r1, [r7, #8]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fbc2 	bl	80083b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0208 	orr.w	r2, r2, #8
 8007c3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0204 	bic.w	r2, r2, #4
 8007c4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	691a      	ldr	r2, [r3, #16]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c5e:	e023      	b.n	8007ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fc06 	bl	8008478 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	021a      	lsls	r2, r3, #8
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ca0:	e002      	b.n	8007ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop

08007cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d101      	bne.n	8007cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e0b6      	b.n	8007e46 <HAL_TIM_ConfigClockSource+0x18a>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d14:	d03e      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0xd8>
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d1a:	f200 8087 	bhi.w	8007e2c <HAL_TIM_ConfigClockSource+0x170>
 8007d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d22:	f000 8086 	beq.w	8007e32 <HAL_TIM_ConfigClockSource+0x176>
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2a:	d87f      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x170>
 8007d2c:	2b70      	cmp	r3, #112	; 0x70
 8007d2e:	d01a      	beq.n	8007d66 <HAL_TIM_ConfigClockSource+0xaa>
 8007d30:	2b70      	cmp	r3, #112	; 0x70
 8007d32:	d87b      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x170>
 8007d34:	2b60      	cmp	r3, #96	; 0x60
 8007d36:	d050      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x11e>
 8007d38:	2b60      	cmp	r3, #96	; 0x60
 8007d3a:	d877      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x170>
 8007d3c:	2b50      	cmp	r3, #80	; 0x50
 8007d3e:	d03c      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0xfe>
 8007d40:	2b50      	cmp	r3, #80	; 0x50
 8007d42:	d873      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x170>
 8007d44:	2b40      	cmp	r3, #64	; 0x40
 8007d46:	d058      	beq.n	8007dfa <HAL_TIM_ConfigClockSource+0x13e>
 8007d48:	2b40      	cmp	r3, #64	; 0x40
 8007d4a:	d86f      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x170>
 8007d4c:	2b30      	cmp	r3, #48	; 0x30
 8007d4e:	d064      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15e>
 8007d50:	2b30      	cmp	r3, #48	; 0x30
 8007d52:	d86b      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x170>
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	d060      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15e>
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d867      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x170>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d05c      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15e>
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d05a      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15e>
 8007d64:	e062      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	6899      	ldr	r1, [r3, #8]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f000 fd7d 	bl	8008874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	609a      	str	r2, [r3, #8]
      break;
 8007d92:	e04f      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	6899      	ldr	r1, [r3, #8]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f000 fd66 	bl	8008874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689a      	ldr	r2, [r3, #8]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007db6:	609a      	str	r2, [r3, #8]
      break;
 8007db8:	e03c      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	6859      	ldr	r1, [r3, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f000 fc24 	bl	8008614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2150      	movs	r1, #80	; 0x50
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fd33 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 8007dd8:	e02c      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6859      	ldr	r1, [r3, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f000 fc80 	bl	80086ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2160      	movs	r1, #96	; 0x60
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fd23 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 8007df8:	e01c      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	6859      	ldr	r1, [r3, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f000 fc04 	bl	8008614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2140      	movs	r1, #64	; 0x40
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fd13 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 8007e18:	e00c      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4619      	mov	r1, r3
 8007e24:	4610      	mov	r0, r2
 8007e26:	f000 fd0a 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 8007e2a:	e003      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e30:	e000      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007e32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
	...

08007e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a3c      	ldr	r2, [pc, #240]	; (8007f7c <TIM_Base_SetConfig+0x104>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d00f      	beq.n	8007eb0 <TIM_Base_SetConfig+0x38>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e96:	d00b      	beq.n	8007eb0 <TIM_Base_SetConfig+0x38>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a39      	ldr	r2, [pc, #228]	; (8007f80 <TIM_Base_SetConfig+0x108>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_Base_SetConfig+0x38>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a38      	ldr	r2, [pc, #224]	; (8007f84 <TIM_Base_SetConfig+0x10c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_Base_SetConfig+0x38>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a37      	ldr	r2, [pc, #220]	; (8007f88 <TIM_Base_SetConfig+0x110>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d108      	bne.n	8007ec2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a2d      	ldr	r2, [pc, #180]	; (8007f7c <TIM_Base_SetConfig+0x104>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d01b      	beq.n	8007f02 <TIM_Base_SetConfig+0x8a>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed0:	d017      	beq.n	8007f02 <TIM_Base_SetConfig+0x8a>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a2a      	ldr	r2, [pc, #168]	; (8007f80 <TIM_Base_SetConfig+0x108>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d013      	beq.n	8007f02 <TIM_Base_SetConfig+0x8a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a29      	ldr	r2, [pc, #164]	; (8007f84 <TIM_Base_SetConfig+0x10c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00f      	beq.n	8007f02 <TIM_Base_SetConfig+0x8a>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a28      	ldr	r2, [pc, #160]	; (8007f88 <TIM_Base_SetConfig+0x110>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00b      	beq.n	8007f02 <TIM_Base_SetConfig+0x8a>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a27      	ldr	r2, [pc, #156]	; (8007f8c <TIM_Base_SetConfig+0x114>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d007      	beq.n	8007f02 <TIM_Base_SetConfig+0x8a>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a26      	ldr	r2, [pc, #152]	; (8007f90 <TIM_Base_SetConfig+0x118>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d003      	beq.n	8007f02 <TIM_Base_SetConfig+0x8a>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a25      	ldr	r2, [pc, #148]	; (8007f94 <TIM_Base_SetConfig+0x11c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d108      	bne.n	8007f14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a10      	ldr	r2, [pc, #64]	; (8007f7c <TIM_Base_SetConfig+0x104>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d00f      	beq.n	8007f60 <TIM_Base_SetConfig+0xe8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a11      	ldr	r2, [pc, #68]	; (8007f88 <TIM_Base_SetConfig+0x110>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d00b      	beq.n	8007f60 <TIM_Base_SetConfig+0xe8>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a10      	ldr	r2, [pc, #64]	; (8007f8c <TIM_Base_SetConfig+0x114>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d007      	beq.n	8007f60 <TIM_Base_SetConfig+0xe8>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a0f      	ldr	r2, [pc, #60]	; (8007f90 <TIM_Base_SetConfig+0x118>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d003      	beq.n	8007f60 <TIM_Base_SetConfig+0xe8>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a0e      	ldr	r2, [pc, #56]	; (8007f94 <TIM_Base_SetConfig+0x11c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d103      	bne.n	8007f68 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	691a      	ldr	r2, [r3, #16]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	615a      	str	r2, [r3, #20]
}
 8007f6e:	bf00      	nop
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40012c00 	.word	0x40012c00
 8007f80:	40000400 	.word	0x40000400
 8007f84:	40000800 	.word	0x40000800
 8007f88:	40013400 	.word	0x40013400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40014400 	.word	0x40014400
 8007f94:	40014800 	.word	0x40014800

08007f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	f023 0201 	bic.w	r2, r3, #1
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f023 0302 	bic.w	r3, r3, #2
 8007fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a2c      	ldr	r2, [pc, #176]	; (80080a4 <TIM_OC1_SetConfig+0x10c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00f      	beq.n	8008018 <TIM_OC1_SetConfig+0x80>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a2b      	ldr	r2, [pc, #172]	; (80080a8 <TIM_OC1_SetConfig+0x110>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00b      	beq.n	8008018 <TIM_OC1_SetConfig+0x80>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a2a      	ldr	r2, [pc, #168]	; (80080ac <TIM_OC1_SetConfig+0x114>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d007      	beq.n	8008018 <TIM_OC1_SetConfig+0x80>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a29      	ldr	r2, [pc, #164]	; (80080b0 <TIM_OC1_SetConfig+0x118>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_OC1_SetConfig+0x80>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a28      	ldr	r2, [pc, #160]	; (80080b4 <TIM_OC1_SetConfig+0x11c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d10c      	bne.n	8008032 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f023 0308 	bic.w	r3, r3, #8
 800801e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f023 0304 	bic.w	r3, r3, #4
 8008030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a1b      	ldr	r2, [pc, #108]	; (80080a4 <TIM_OC1_SetConfig+0x10c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d00f      	beq.n	800805a <TIM_OC1_SetConfig+0xc2>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a1a      	ldr	r2, [pc, #104]	; (80080a8 <TIM_OC1_SetConfig+0x110>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00b      	beq.n	800805a <TIM_OC1_SetConfig+0xc2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a19      	ldr	r2, [pc, #100]	; (80080ac <TIM_OC1_SetConfig+0x114>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d007      	beq.n	800805a <TIM_OC1_SetConfig+0xc2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <TIM_OC1_SetConfig+0x118>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d003      	beq.n	800805a <TIM_OC1_SetConfig+0xc2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a17      	ldr	r2, [pc, #92]	; (80080b4 <TIM_OC1_SetConfig+0x11c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d111      	bne.n	800807e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	621a      	str	r2, [r3, #32]
}
 8008098:	bf00      	nop
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	40012c00 	.word	0x40012c00
 80080a8:	40013400 	.word	0x40013400
 80080ac:	40014000 	.word	0x40014000
 80080b0:	40014400 	.word	0x40014400
 80080b4:	40014800 	.word	0x40014800

080080b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f023 0210 	bic.w	r2, r3, #16
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f023 0320 	bic.w	r3, r3, #32
 8008106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	4313      	orrs	r3, r2
 8008112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a28      	ldr	r2, [pc, #160]	; (80081b8 <TIM_OC2_SetConfig+0x100>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d003      	beq.n	8008124 <TIM_OC2_SetConfig+0x6c>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a27      	ldr	r2, [pc, #156]	; (80081bc <TIM_OC2_SetConfig+0x104>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d10d      	bne.n	8008140 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800812a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	4313      	orrs	r3, r2
 8008136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800813e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a1d      	ldr	r2, [pc, #116]	; (80081b8 <TIM_OC2_SetConfig+0x100>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00f      	beq.n	8008168 <TIM_OC2_SetConfig+0xb0>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a1c      	ldr	r2, [pc, #112]	; (80081bc <TIM_OC2_SetConfig+0x104>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00b      	beq.n	8008168 <TIM_OC2_SetConfig+0xb0>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <TIM_OC2_SetConfig+0x108>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d007      	beq.n	8008168 <TIM_OC2_SetConfig+0xb0>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a1a      	ldr	r2, [pc, #104]	; (80081c4 <TIM_OC2_SetConfig+0x10c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_OC2_SetConfig+0xb0>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a19      	ldr	r2, [pc, #100]	; (80081c8 <TIM_OC2_SetConfig+0x110>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d113      	bne.n	8008190 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800816e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008176:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	40012c00 	.word	0x40012c00
 80081bc:	40013400 	.word	0x40013400
 80081c0:	40014000 	.word	0x40014000
 80081c4:	40014400 	.word	0x40014400
 80081c8:	40014800 	.word	0x40014800

080081cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0303 	bic.w	r3, r3, #3
 8008206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	021b      	lsls	r3, r3, #8
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a27      	ldr	r2, [pc, #156]	; (80082c8 <TIM_OC3_SetConfig+0xfc>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d003      	beq.n	8008236 <TIM_OC3_SetConfig+0x6a>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a26      	ldr	r2, [pc, #152]	; (80082cc <TIM_OC3_SetConfig+0x100>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d10d      	bne.n	8008252 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800823c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	4313      	orrs	r3, r2
 8008248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008250:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a1c      	ldr	r2, [pc, #112]	; (80082c8 <TIM_OC3_SetConfig+0xfc>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00f      	beq.n	800827a <TIM_OC3_SetConfig+0xae>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a1b      	ldr	r2, [pc, #108]	; (80082cc <TIM_OC3_SetConfig+0x100>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00b      	beq.n	800827a <TIM_OC3_SetConfig+0xae>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a1a      	ldr	r2, [pc, #104]	; (80082d0 <TIM_OC3_SetConfig+0x104>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d007      	beq.n	800827a <TIM_OC3_SetConfig+0xae>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a19      	ldr	r2, [pc, #100]	; (80082d4 <TIM_OC3_SetConfig+0x108>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d003      	beq.n	800827a <TIM_OC3_SetConfig+0xae>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a18      	ldr	r2, [pc, #96]	; (80082d8 <TIM_OC3_SetConfig+0x10c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d113      	bne.n	80082a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	621a      	str	r2, [r3, #32]
}
 80082bc:	bf00      	nop
 80082be:	371c      	adds	r7, #28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	40012c00 	.word	0x40012c00
 80082cc:	40013400 	.word	0x40013400
 80082d0:	40014000 	.word	0x40014000
 80082d4:	40014400 	.word	0x40014400
 80082d8:	40014800 	.word	0x40014800

080082dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800830a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800830e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	4313      	orrs	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800832a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	031b      	lsls	r3, r3, #12
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4313      	orrs	r3, r2
 8008336:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a18      	ldr	r2, [pc, #96]	; (800839c <TIM_OC4_SetConfig+0xc0>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00f      	beq.n	8008360 <TIM_OC4_SetConfig+0x84>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a17      	ldr	r2, [pc, #92]	; (80083a0 <TIM_OC4_SetConfig+0xc4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00b      	beq.n	8008360 <TIM_OC4_SetConfig+0x84>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a16      	ldr	r2, [pc, #88]	; (80083a4 <TIM_OC4_SetConfig+0xc8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d007      	beq.n	8008360 <TIM_OC4_SetConfig+0x84>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a15      	ldr	r2, [pc, #84]	; (80083a8 <TIM_OC4_SetConfig+0xcc>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d003      	beq.n	8008360 <TIM_OC4_SetConfig+0x84>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a14      	ldr	r2, [pc, #80]	; (80083ac <TIM_OC4_SetConfig+0xd0>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d109      	bne.n	8008374 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	019b      	lsls	r3, r3, #6
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	621a      	str	r2, [r3, #32]
}
 800838e:	bf00      	nop
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40012c00 	.word	0x40012c00
 80083a0:	40013400 	.word	0x40013400
 80083a4:	40014000 	.word	0x40014000
 80083a8:	40014400 	.word	0x40014400
 80083ac:	40014800 	.word	0x40014800

080083b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	041b      	lsls	r3, r3, #16
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	4313      	orrs	r3, r2
 8008400:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a17      	ldr	r2, [pc, #92]	; (8008464 <TIM_OC5_SetConfig+0xb4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00f      	beq.n	800842a <TIM_OC5_SetConfig+0x7a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a16      	ldr	r2, [pc, #88]	; (8008468 <TIM_OC5_SetConfig+0xb8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00b      	beq.n	800842a <TIM_OC5_SetConfig+0x7a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a15      	ldr	r2, [pc, #84]	; (800846c <TIM_OC5_SetConfig+0xbc>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d007      	beq.n	800842a <TIM_OC5_SetConfig+0x7a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a14      	ldr	r2, [pc, #80]	; (8008470 <TIM_OC5_SetConfig+0xc0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d003      	beq.n	800842a <TIM_OC5_SetConfig+0x7a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a13      	ldr	r2, [pc, #76]	; (8008474 <TIM_OC5_SetConfig+0xc4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d109      	bne.n	800843e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008430:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	621a      	str	r2, [r3, #32]
}
 8008458:	bf00      	nop
 800845a:	371c      	adds	r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	40012c00 	.word	0x40012c00
 8008468:	40013400 	.word	0x40013400
 800846c:	40014000 	.word	0x40014000
 8008470:	40014400 	.word	0x40014400
 8008474:	40014800 	.word	0x40014800

08008478 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	021b      	lsls	r3, r3, #8
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	051b      	lsls	r3, r3, #20
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a18      	ldr	r2, [pc, #96]	; (8008530 <TIM_OC6_SetConfig+0xb8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d00f      	beq.n	80084f4 <TIM_OC6_SetConfig+0x7c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a17      	ldr	r2, [pc, #92]	; (8008534 <TIM_OC6_SetConfig+0xbc>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00b      	beq.n	80084f4 <TIM_OC6_SetConfig+0x7c>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a16      	ldr	r2, [pc, #88]	; (8008538 <TIM_OC6_SetConfig+0xc0>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d007      	beq.n	80084f4 <TIM_OC6_SetConfig+0x7c>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a15      	ldr	r2, [pc, #84]	; (800853c <TIM_OC6_SetConfig+0xc4>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d003      	beq.n	80084f4 <TIM_OC6_SetConfig+0x7c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a14      	ldr	r2, [pc, #80]	; (8008540 <TIM_OC6_SetConfig+0xc8>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d109      	bne.n	8008508 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	029b      	lsls	r3, r3, #10
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	4313      	orrs	r3, r2
 8008506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	621a      	str	r2, [r3, #32]
}
 8008522:	bf00      	nop
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	40012c00 	.word	0x40012c00
 8008534:	40013400 	.word	0x40013400
 8008538:	40014000 	.word	0x40014000
 800853c:	40014400 	.word	0x40014400
 8008540:	40014800 	.word	0x40014800

08008544 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f023 0201 	bic.w	r2, r3, #1
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4a24      	ldr	r2, [pc, #144]	; (8008600 <TIM_TI1_SetConfig+0xbc>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d013      	beq.n	800859a <TIM_TI1_SetConfig+0x56>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008578:	d00f      	beq.n	800859a <TIM_TI1_SetConfig+0x56>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4a21      	ldr	r2, [pc, #132]	; (8008604 <TIM_TI1_SetConfig+0xc0>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00b      	beq.n	800859a <TIM_TI1_SetConfig+0x56>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	4a20      	ldr	r2, [pc, #128]	; (8008608 <TIM_TI1_SetConfig+0xc4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d007      	beq.n	800859a <TIM_TI1_SetConfig+0x56>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4a1f      	ldr	r2, [pc, #124]	; (800860c <TIM_TI1_SetConfig+0xc8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d003      	beq.n	800859a <TIM_TI1_SetConfig+0x56>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <TIM_TI1_SetConfig+0xcc>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d101      	bne.n	800859e <TIM_TI1_SetConfig+0x5a>
 800859a:	2301      	movs	r3, #1
 800859c:	e000      	b.n	80085a0 <TIM_TI1_SetConfig+0x5c>
 800859e:	2300      	movs	r3, #0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d008      	beq.n	80085b6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f023 0303 	bic.w	r3, r3, #3
 80085aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	e003      	b.n	80085be <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f043 0301 	orr.w	r3, r3, #1
 80085bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	011b      	lsls	r3, r3, #4
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f023 030a 	bic.w	r3, r3, #10
 80085d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f003 030a 	and.w	r3, r3, #10
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	621a      	str	r2, [r3, #32]
}
 80085f2:	bf00      	nop
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	40012c00 	.word	0x40012c00
 8008604:	40000400 	.word	0x40000400
 8008608:	40000800 	.word	0x40000800
 800860c:	40013400 	.word	0x40013400
 8008610:	40014000 	.word	0x40014000

08008614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f023 0201 	bic.w	r2, r3, #1
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800863e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4313      	orrs	r3, r2
 8008648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f023 030a 	bic.w	r3, r3, #10
 8008650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	621a      	str	r2, [r3, #32]
}
 8008666:	bf00      	nop
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008672:	b480      	push	{r7}
 8008674:	b087      	sub	sp, #28
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	f023 0210 	bic.w	r2, r3, #16
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	021b      	lsls	r3, r3, #8
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	031b      	lsls	r3, r3, #12
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	011b      	lsls	r3, r3, #4
 80086ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	621a      	str	r2, [r3, #32]
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	f023 0210 	bic.w	r2, r3, #16
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008716:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	031b      	lsls	r3, r3, #12
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	4313      	orrs	r3, r2
 8008720:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008728:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	4313      	orrs	r3, r2
 8008732:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	621a      	str	r2, [r3, #32]
}
 8008740:	bf00      	nop
 8008742:	371c      	adds	r7, #28
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f023 0303 	bic.w	r3, r3, #3
 8008778:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4313      	orrs	r3, r2
 8008780:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008788:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	011b      	lsls	r3, r3, #4
 800878e:	b2db      	uxtb	r3, r3
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800879c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	621a      	str	r2, [r3, #32]
}
 80087b8:	bf00      	nop
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	021b      	lsls	r3, r3, #8
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008802:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	031b      	lsls	r3, r3, #12
 8008808:	b29b      	uxth	r3, r3
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008816:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	031b      	lsls	r3, r3, #12
 800881c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	621a      	str	r2, [r3, #32]
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4313      	orrs	r3, r2
 800885c:	f043 0307 	orr.w	r3, r3, #7
 8008860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	609a      	str	r2, [r3, #8]
}
 8008868:	bf00      	nop
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800888e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	021a      	lsls	r2, r3, #8
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	431a      	orrs	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4313      	orrs	r3, r2
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	4313      	orrs	r3, r2
 80088a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	609a      	str	r2, [r3, #8]
}
 80088a8:	bf00      	nop
 80088aa:	371c      	adds	r7, #28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f003 031f 	and.w	r3, r3, #31
 80088c6:	2201      	movs	r2, #1
 80088c8:	fa02 f303 	lsl.w	r3, r2, r3
 80088cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a1a      	ldr	r2, [r3, #32]
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	43db      	mvns	r3, r3
 80088d6:	401a      	ands	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a1a      	ldr	r2, [r3, #32]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	fa01 f303 	lsl.w	r3, r1, r3
 80088ec:	431a      	orrs	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
	...

08008900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008914:	2302      	movs	r3, #2
 8008916:	e063      	b.n	80089e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a2b      	ldr	r2, [pc, #172]	; (80089ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d004      	beq.n	800894c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a2a      	ldr	r2, [pc, #168]	; (80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d108      	bne.n	800895e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008952:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008964:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a1b      	ldr	r2, [pc, #108]	; (80089ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d018      	beq.n	80089b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898a:	d013      	beq.n	80089b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a18      	ldr	r2, [pc, #96]	; (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d00e      	beq.n	80089b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a17      	ldr	r2, [pc, #92]	; (80089f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d009      	beq.n	80089b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a12      	ldr	r2, [pc, #72]	; (80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d004      	beq.n	80089b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a13      	ldr	r2, [pc, #76]	; (80089fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d10c      	bne.n	80089ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	40012c00 	.word	0x40012c00
 80089f0:	40013400 	.word	0x40013400
 80089f4:	40000400 	.word	0x40000400
 80089f8:	40000800 	.word	0x40000800
 80089fc:	40014000 	.word	0x40014000

08008a00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e065      	b.n	8008ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	041b      	lsls	r3, r3, #16
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a16      	ldr	r2, [pc, #88]	; (8008af4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d004      	beq.n	8008aaa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a14      	ldr	r2, [pc, #80]	; (8008af8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d115      	bne.n	8008ad6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	051b      	lsls	r3, r3, #20
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	40012c00 	.word	0x40012c00
 8008af8:	40013400 	.word	0x40013400

08008afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e040      	b.n	8008bcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7f9 ffc8 	bl	8002af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2224      	movs	r2, #36	; 0x24
 8008b64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f022 0201 	bic.w	r2, r2, #1
 8008b74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f97e 	bl	8008e78 <UART_SetConfig>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d101      	bne.n	8008b86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e022      	b.n	8008bcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fb46 	bl	8009220 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ba2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f042 0201 	orr.w	r2, r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fbcd 	bl	8009364 <UART_CheckIdleState>
 8008bca:	4603      	mov	r3, r0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08a      	sub	sp, #40	; 0x28
 8008bd8:	af02      	add	r7, sp, #8
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	4613      	mov	r3, r2
 8008be2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008be8:	2b20      	cmp	r3, #32
 8008bea:	f040 8082 	bne.w	8008cf2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <HAL_UART_Transmit+0x26>
 8008bf4:	88fb      	ldrh	r3, [r7, #6]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e07a      	b.n	8008cf4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d101      	bne.n	8008c0c <HAL_UART_Transmit+0x38>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e073      	b.n	8008cf4 <HAL_UART_Transmit+0x120>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2221      	movs	r2, #33	; 0x21
 8008c20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c22:	f7fa f957 	bl	8002ed4 <HAL_GetTick>
 8008c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	88fa      	ldrh	r2, [r7, #6]
 8008c2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	88fa      	ldrh	r2, [r7, #6]
 8008c34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c40:	d108      	bne.n	8008c54 <HAL_UART_Transmit+0x80>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d104      	bne.n	8008c54 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	61bb      	str	r3, [r7, #24]
 8008c52:	e003      	b.n	8008c5c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008c64:	e02d      	b.n	8008cc2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2180      	movs	r1, #128	; 0x80
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fbc0 	bl	80093f6 <UART_WaitOnFlagUntilTimeout>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e039      	b.n	8008cf4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10b      	bne.n	8008c9e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	881a      	ldrh	r2, [r3, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c92:	b292      	uxth	r2, r2
 8008c94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	3302      	adds	r3, #2
 8008c9a:	61bb      	str	r3, [r7, #24]
 8008c9c:	e008      	b.n	8008cb0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	781a      	ldrb	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	b292      	uxth	r2, r2
 8008ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	3301      	adds	r3, #1
 8008cae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1cb      	bne.n	8008c66 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2140      	movs	r1, #64	; 0x40
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 fb8c 	bl	80093f6 <UART_WaitOnFlagUntilTimeout>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e005      	b.n	8008cf4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2220      	movs	r2, #32
 8008cec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e000      	b.n	8008cf4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008cf2:	2302      	movs	r3, #2
  }
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3720      	adds	r7, #32
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	; 0x28
 8008d00:	af02      	add	r7, sp, #8
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d10:	2b20      	cmp	r3, #32
 8008d12:	f040 80ac 	bne.w	8008e6e <HAL_UART_Receive+0x172>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <HAL_UART_Receive+0x26>
 8008d1c:	88fb      	ldrh	r3, [r7, #6]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e0a4      	b.n	8008e70 <HAL_UART_Receive+0x174>
    }

    __HAL_LOCK(huart);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_UART_Receive+0x38>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e09d      	b.n	8008e70 <HAL_UART_Receive+0x174>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2222      	movs	r2, #34	; 0x22
 8008d48:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d50:	f7fa f8c0 	bl	8002ed4 <HAL_GetTick>
 8008d54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	88fa      	ldrh	r2, [r7, #6]
 8008d5a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	88fa      	ldrh	r2, [r7, #6]
 8008d62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d6e:	d10e      	bne.n	8008d8e <HAL_UART_Receive+0x92>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d105      	bne.n	8008d84 <HAL_UART_Receive+0x88>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d82:	e01a      	b.n	8008dba <HAL_UART_Receive+0xbe>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	22ff      	movs	r2, #255	; 0xff
 8008d88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d8c:	e015      	b.n	8008dba <HAL_UART_Receive+0xbe>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10d      	bne.n	8008db2 <HAL_UART_Receive+0xb6>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d104      	bne.n	8008da8 <HAL_UART_Receive+0xac>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	22ff      	movs	r2, #255	; 0xff
 8008da2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008da6:	e008      	b.n	8008dba <HAL_UART_Receive+0xbe>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	227f      	movs	r2, #127	; 0x7f
 8008dac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008db0:	e003      	b.n	8008dba <HAL_UART_Receive+0xbe>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008dc0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dca:	d108      	bne.n	8008dde <HAL_UART_Receive+0xe2>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d104      	bne.n	8008dde <HAL_UART_Receive+0xe2>
    {
      pdata8bits  = NULL;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	61bb      	str	r3, [r7, #24]
 8008ddc:	e003      	b.n	8008de6 <HAL_UART_Receive+0xea>
    }
    else
    {
      pdata8bits  = pData;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008dee:	e033      	b.n	8008e58 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2200      	movs	r2, #0
 8008df8:	2120      	movs	r1, #32
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 fafb 	bl	80093f6 <UART_WaitOnFlagUntilTimeout>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <HAL_UART_Receive+0x10e>
      {
        return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e032      	b.n	8008e70 <HAL_UART_Receive+0x174>
      }
      if (pdata8bits == NULL)
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10c      	bne.n	8008e2a <HAL_UART_Receive+0x12e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	8a7b      	ldrh	r3, [r7, #18]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	3302      	adds	r3, #2
 8008e26:	61bb      	str	r3, [r7, #24]
 8008e28:	e00d      	b.n	8008e46 <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	8a7b      	ldrh	r3, [r7, #18]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	4013      	ands	r3, r2
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	3301      	adds	r3, #1
 8008e44:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1c5      	bne.n	8008df0 <HAL_UART_Receive+0xf4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2220      	movs	r2, #32
 8008e68:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e000      	b.n	8008e70 <HAL_UART_Receive+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e6e:	2302      	movs	r3, #2
  }
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3720      	adds	r7, #32
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	431a      	orrs	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008ea6:	f023 030c 	bic.w	r3, r3, #12
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	6812      	ldr	r2, [r2, #0]
 8008eae:	6979      	ldr	r1, [r7, #20]
 8008eb0:	430b      	orrs	r3, r1
 8008eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4aae      	ldr	r2, [pc, #696]	; (80091ac <UART_SetConfig+0x334>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d120      	bne.n	8008f3a <UART_SetConfig+0xc2>
 8008ef8:	4bad      	ldr	r3, [pc, #692]	; (80091b0 <UART_SetConfig+0x338>)
 8008efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d817      	bhi.n	8008f34 <UART_SetConfig+0xbc>
 8008f04:	a201      	add	r2, pc, #4	; (adr r2, 8008f0c <UART_SetConfig+0x94>)
 8008f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0a:	bf00      	nop
 8008f0c:	08008f1d 	.word	0x08008f1d
 8008f10:	08008f29 	.word	0x08008f29
 8008f14:	08008f2f 	.word	0x08008f2f
 8008f18:	08008f23 	.word	0x08008f23
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	77fb      	strb	r3, [r7, #31]
 8008f20:	e0b5      	b.n	800908e <UART_SetConfig+0x216>
 8008f22:	2302      	movs	r3, #2
 8008f24:	77fb      	strb	r3, [r7, #31]
 8008f26:	e0b2      	b.n	800908e <UART_SetConfig+0x216>
 8008f28:	2304      	movs	r3, #4
 8008f2a:	77fb      	strb	r3, [r7, #31]
 8008f2c:	e0af      	b.n	800908e <UART_SetConfig+0x216>
 8008f2e:	2308      	movs	r3, #8
 8008f30:	77fb      	strb	r3, [r7, #31]
 8008f32:	e0ac      	b.n	800908e <UART_SetConfig+0x216>
 8008f34:	2310      	movs	r3, #16
 8008f36:	77fb      	strb	r3, [r7, #31]
 8008f38:	e0a9      	b.n	800908e <UART_SetConfig+0x216>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a9d      	ldr	r2, [pc, #628]	; (80091b4 <UART_SetConfig+0x33c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d124      	bne.n	8008f8e <UART_SetConfig+0x116>
 8008f44:	4b9a      	ldr	r3, [pc, #616]	; (80091b0 <UART_SetConfig+0x338>)
 8008f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f50:	d011      	beq.n	8008f76 <UART_SetConfig+0xfe>
 8008f52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f56:	d817      	bhi.n	8008f88 <UART_SetConfig+0x110>
 8008f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f5c:	d011      	beq.n	8008f82 <UART_SetConfig+0x10a>
 8008f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f62:	d811      	bhi.n	8008f88 <UART_SetConfig+0x110>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d003      	beq.n	8008f70 <UART_SetConfig+0xf8>
 8008f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f6c:	d006      	beq.n	8008f7c <UART_SetConfig+0x104>
 8008f6e:	e00b      	b.n	8008f88 <UART_SetConfig+0x110>
 8008f70:	2300      	movs	r3, #0
 8008f72:	77fb      	strb	r3, [r7, #31]
 8008f74:	e08b      	b.n	800908e <UART_SetConfig+0x216>
 8008f76:	2302      	movs	r3, #2
 8008f78:	77fb      	strb	r3, [r7, #31]
 8008f7a:	e088      	b.n	800908e <UART_SetConfig+0x216>
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	77fb      	strb	r3, [r7, #31]
 8008f80:	e085      	b.n	800908e <UART_SetConfig+0x216>
 8008f82:	2308      	movs	r3, #8
 8008f84:	77fb      	strb	r3, [r7, #31]
 8008f86:	e082      	b.n	800908e <UART_SetConfig+0x216>
 8008f88:	2310      	movs	r3, #16
 8008f8a:	77fb      	strb	r3, [r7, #31]
 8008f8c:	e07f      	b.n	800908e <UART_SetConfig+0x216>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a89      	ldr	r2, [pc, #548]	; (80091b8 <UART_SetConfig+0x340>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d124      	bne.n	8008fe2 <UART_SetConfig+0x16a>
 8008f98:	4b85      	ldr	r3, [pc, #532]	; (80091b0 <UART_SetConfig+0x338>)
 8008f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008fa0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008fa4:	d011      	beq.n	8008fca <UART_SetConfig+0x152>
 8008fa6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008faa:	d817      	bhi.n	8008fdc <UART_SetConfig+0x164>
 8008fac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fb0:	d011      	beq.n	8008fd6 <UART_SetConfig+0x15e>
 8008fb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fb6:	d811      	bhi.n	8008fdc <UART_SetConfig+0x164>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <UART_SetConfig+0x14c>
 8008fbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fc0:	d006      	beq.n	8008fd0 <UART_SetConfig+0x158>
 8008fc2:	e00b      	b.n	8008fdc <UART_SetConfig+0x164>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	77fb      	strb	r3, [r7, #31]
 8008fc8:	e061      	b.n	800908e <UART_SetConfig+0x216>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	77fb      	strb	r3, [r7, #31]
 8008fce:	e05e      	b.n	800908e <UART_SetConfig+0x216>
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	77fb      	strb	r3, [r7, #31]
 8008fd4:	e05b      	b.n	800908e <UART_SetConfig+0x216>
 8008fd6:	2308      	movs	r3, #8
 8008fd8:	77fb      	strb	r3, [r7, #31]
 8008fda:	e058      	b.n	800908e <UART_SetConfig+0x216>
 8008fdc:	2310      	movs	r3, #16
 8008fde:	77fb      	strb	r3, [r7, #31]
 8008fe0:	e055      	b.n	800908e <UART_SetConfig+0x216>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a75      	ldr	r2, [pc, #468]	; (80091bc <UART_SetConfig+0x344>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d124      	bne.n	8009036 <UART_SetConfig+0x1be>
 8008fec:	4b70      	ldr	r3, [pc, #448]	; (80091b0 <UART_SetConfig+0x338>)
 8008fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008ff4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ff8:	d011      	beq.n	800901e <UART_SetConfig+0x1a6>
 8008ffa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ffe:	d817      	bhi.n	8009030 <UART_SetConfig+0x1b8>
 8009000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009004:	d011      	beq.n	800902a <UART_SetConfig+0x1b2>
 8009006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800900a:	d811      	bhi.n	8009030 <UART_SetConfig+0x1b8>
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <UART_SetConfig+0x1a0>
 8009010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009014:	d006      	beq.n	8009024 <UART_SetConfig+0x1ac>
 8009016:	e00b      	b.n	8009030 <UART_SetConfig+0x1b8>
 8009018:	2300      	movs	r3, #0
 800901a:	77fb      	strb	r3, [r7, #31]
 800901c:	e037      	b.n	800908e <UART_SetConfig+0x216>
 800901e:	2302      	movs	r3, #2
 8009020:	77fb      	strb	r3, [r7, #31]
 8009022:	e034      	b.n	800908e <UART_SetConfig+0x216>
 8009024:	2304      	movs	r3, #4
 8009026:	77fb      	strb	r3, [r7, #31]
 8009028:	e031      	b.n	800908e <UART_SetConfig+0x216>
 800902a:	2308      	movs	r3, #8
 800902c:	77fb      	strb	r3, [r7, #31]
 800902e:	e02e      	b.n	800908e <UART_SetConfig+0x216>
 8009030:	2310      	movs	r3, #16
 8009032:	77fb      	strb	r3, [r7, #31]
 8009034:	e02b      	b.n	800908e <UART_SetConfig+0x216>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a61      	ldr	r2, [pc, #388]	; (80091c0 <UART_SetConfig+0x348>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d124      	bne.n	800908a <UART_SetConfig+0x212>
 8009040:	4b5b      	ldr	r3, [pc, #364]	; (80091b0 <UART_SetConfig+0x338>)
 8009042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009044:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009048:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800904c:	d011      	beq.n	8009072 <UART_SetConfig+0x1fa>
 800904e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009052:	d817      	bhi.n	8009084 <UART_SetConfig+0x20c>
 8009054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009058:	d011      	beq.n	800907e <UART_SetConfig+0x206>
 800905a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800905e:	d811      	bhi.n	8009084 <UART_SetConfig+0x20c>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <UART_SetConfig+0x1f4>
 8009064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009068:	d006      	beq.n	8009078 <UART_SetConfig+0x200>
 800906a:	e00b      	b.n	8009084 <UART_SetConfig+0x20c>
 800906c:	2300      	movs	r3, #0
 800906e:	77fb      	strb	r3, [r7, #31]
 8009070:	e00d      	b.n	800908e <UART_SetConfig+0x216>
 8009072:	2302      	movs	r3, #2
 8009074:	77fb      	strb	r3, [r7, #31]
 8009076:	e00a      	b.n	800908e <UART_SetConfig+0x216>
 8009078:	2304      	movs	r3, #4
 800907a:	77fb      	strb	r3, [r7, #31]
 800907c:	e007      	b.n	800908e <UART_SetConfig+0x216>
 800907e:	2308      	movs	r3, #8
 8009080:	77fb      	strb	r3, [r7, #31]
 8009082:	e004      	b.n	800908e <UART_SetConfig+0x216>
 8009084:	2310      	movs	r3, #16
 8009086:	77fb      	strb	r3, [r7, #31]
 8009088:	e001      	b.n	800908e <UART_SetConfig+0x216>
 800908a:	2310      	movs	r3, #16
 800908c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009096:	d15c      	bne.n	8009152 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8009098:	7ffb      	ldrb	r3, [r7, #31]
 800909a:	2b08      	cmp	r3, #8
 800909c:	d827      	bhi.n	80090ee <UART_SetConfig+0x276>
 800909e:	a201      	add	r2, pc, #4	; (adr r2, 80090a4 <UART_SetConfig+0x22c>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090c9 	.word	0x080090c9
 80090a8:	080090d1 	.word	0x080090d1
 80090ac:	080090d9 	.word	0x080090d9
 80090b0:	080090ef 	.word	0x080090ef
 80090b4:	080090df 	.word	0x080090df
 80090b8:	080090ef 	.word	0x080090ef
 80090bc:	080090ef 	.word	0x080090ef
 80090c0:	080090ef 	.word	0x080090ef
 80090c4:	080090e7 	.word	0x080090e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090c8:	f7fd fb7c 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
 80090cc:	61b8      	str	r0, [r7, #24]
        break;
 80090ce:	e013      	b.n	80090f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090d0:	f7fd fb9a 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 80090d4:	61b8      	str	r0, [r7, #24]
        break;
 80090d6:	e00f      	b.n	80090f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090d8:	4b3a      	ldr	r3, [pc, #232]	; (80091c4 <UART_SetConfig+0x34c>)
 80090da:	61bb      	str	r3, [r7, #24]
        break;
 80090dc:	e00c      	b.n	80090f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090de:	f7fd faf9 	bl	80066d4 <HAL_RCC_GetSysClockFreq>
 80090e2:	61b8      	str	r0, [r7, #24]
        break;
 80090e4:	e008      	b.n	80090f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090ea:	61bb      	str	r3, [r7, #24]
        break;
 80090ec:	e004      	b.n	80090f8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	77bb      	strb	r3, [r7, #30]
        break;
 80090f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 8085 	beq.w	800920a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	005a      	lsls	r2, r3, #1
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	085b      	lsrs	r3, r3, #1
 800910a:	441a      	add	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	fbb2 f3f3 	udiv	r3, r2, r3
 8009114:	b29b      	uxth	r3, r3
 8009116:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	2b0f      	cmp	r3, #15
 800911c:	d916      	bls.n	800914c <UART_SetConfig+0x2d4>
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009124:	d212      	bcs.n	800914c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	b29b      	uxth	r3, r3
 800912a:	f023 030f 	bic.w	r3, r3, #15
 800912e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	085b      	lsrs	r3, r3, #1
 8009134:	b29b      	uxth	r3, r3
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	b29a      	uxth	r2, r3
 800913c:	89fb      	ldrh	r3, [r7, #14]
 800913e:	4313      	orrs	r3, r2
 8009140:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	89fa      	ldrh	r2, [r7, #14]
 8009148:	60da      	str	r2, [r3, #12]
 800914a:	e05e      	b.n	800920a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	77bb      	strb	r3, [r7, #30]
 8009150:	e05b      	b.n	800920a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009152:	7ffb      	ldrb	r3, [r7, #31]
 8009154:	2b08      	cmp	r3, #8
 8009156:	d837      	bhi.n	80091c8 <UART_SetConfig+0x350>
 8009158:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <UART_SetConfig+0x2e8>)
 800915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915e:	bf00      	nop
 8009160:	08009185 	.word	0x08009185
 8009164:	0800918d 	.word	0x0800918d
 8009168:	08009195 	.word	0x08009195
 800916c:	080091c9 	.word	0x080091c9
 8009170:	0800919b 	.word	0x0800919b
 8009174:	080091c9 	.word	0x080091c9
 8009178:	080091c9 	.word	0x080091c9
 800917c:	080091c9 	.word	0x080091c9
 8009180:	080091a3 	.word	0x080091a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009184:	f7fd fb1e 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
 8009188:	61b8      	str	r0, [r7, #24]
        break;
 800918a:	e022      	b.n	80091d2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800918c:	f7fd fb3c 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 8009190:	61b8      	str	r0, [r7, #24]
        break;
 8009192:	e01e      	b.n	80091d2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009194:	4b0b      	ldr	r3, [pc, #44]	; (80091c4 <UART_SetConfig+0x34c>)
 8009196:	61bb      	str	r3, [r7, #24]
        break;
 8009198:	e01b      	b.n	80091d2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800919a:	f7fd fa9b 	bl	80066d4 <HAL_RCC_GetSysClockFreq>
 800919e:	61b8      	str	r0, [r7, #24]
        break;
 80091a0:	e017      	b.n	80091d2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091a6:	61bb      	str	r3, [r7, #24]
        break;
 80091a8:	e013      	b.n	80091d2 <UART_SetConfig+0x35a>
 80091aa:	bf00      	nop
 80091ac:	40013800 	.word	0x40013800
 80091b0:	40021000 	.word	0x40021000
 80091b4:	40004400 	.word	0x40004400
 80091b8:	40004800 	.word	0x40004800
 80091bc:	40004c00 	.word	0x40004c00
 80091c0:	40005000 	.word	0x40005000
 80091c4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	77bb      	strb	r3, [r7, #30]
        break;
 80091d0:	bf00      	nop
    }

    if (pclk != 0U)
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d018      	beq.n	800920a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	085a      	lsrs	r2, r3, #1
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	441a      	add	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b0f      	cmp	r3, #15
 80091f2:	d908      	bls.n	8009206 <UART_SetConfig+0x38e>
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091fa:	d204      	bcs.n	8009206 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	60da      	str	r2, [r3, #12]
 8009204:	e001      	b.n	800920a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009216:	7fbb      	ldrb	r3, [r7, #30]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3720      	adds	r7, #32
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00a      	beq.n	800926c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00a      	beq.n	800928e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	430a      	orrs	r2, r1
 800928c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	f003 0308 	and.w	r3, r3, #8
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	430a      	orrs	r2, r1
 80092ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	f003 0310 	and.w	r3, r3, #16
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01a      	beq.n	8009336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931e:	d10a      	bne.n	8009336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	605a      	str	r2, [r3, #4]
  }
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af02      	add	r7, sp, #8
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009374:	f7f9 fdae 	bl	8002ed4 <HAL_GetTick>
 8009378:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0308 	and.w	r3, r3, #8
 8009384:	2b08      	cmp	r3, #8
 8009386:	d10e      	bne.n	80093a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f82d 	bl	80093f6 <UART_WaitOnFlagUntilTimeout>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e023      	b.n	80093ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0304 	and.w	r3, r3, #4
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d10e      	bne.n	80093d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f817 	bl	80093f6 <UART_WaitOnFlagUntilTimeout>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e00d      	b.n	80093ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2220      	movs	r2, #32
 80093d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2220      	movs	r2, #32
 80093dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b09c      	sub	sp, #112	; 0x70
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	603b      	str	r3, [r7, #0]
 8009402:	4613      	mov	r3, r2
 8009404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009406:	e0a5      	b.n	8009554 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800940a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940e:	f000 80a1 	beq.w	8009554 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009412:	f7f9 fd5f 	bl	8002ed4 <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800941e:	429a      	cmp	r2, r3
 8009420:	d302      	bcc.n	8009428 <UART_WaitOnFlagUntilTimeout+0x32>
 8009422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009424:	2b00      	cmp	r3, #0
 8009426:	d13e      	bne.n	80094a6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009430:	e853 3f00 	ldrex	r3, [r3]
 8009434:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009438:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800943c:	667b      	str	r3, [r7, #100]	; 0x64
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009446:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009448:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800944c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e6      	bne.n	8009428 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3308      	adds	r3, #8
 8009460:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	f023 0301 	bic.w	r3, r3, #1
 8009470:	663b      	str	r3, [r7, #96]	; 0x60
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3308      	adds	r3, #8
 8009478:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800947a:	64ba      	str	r2, [r7, #72]	; 0x48
 800947c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e5      	bne.n	800945a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2220      	movs	r2, #32
 8009492:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2220      	movs	r2, #32
 8009498:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e067      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d04f      	beq.n	8009554 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094c2:	d147      	bne.n	8009554 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ec:	637b      	str	r3, [r7, #52]	; 0x34
 80094ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f4:	e841 2300 	strex	r3, r2, [r1]
 80094f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e6      	bne.n	80094ce <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3308      	adds	r3, #8
 8009506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	613b      	str	r3, [r7, #16]
   return(result);
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f023 0301 	bic.w	r3, r3, #1
 8009516:	66bb      	str	r3, [r7, #104]	; 0x68
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3308      	adds	r3, #8
 800951e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009520:	623a      	str	r2, [r7, #32]
 8009522:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	69f9      	ldr	r1, [r7, #28]
 8009526:	6a3a      	ldr	r2, [r7, #32]
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	61bb      	str	r3, [r7, #24]
   return(result);
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e5      	bne.n	8009500 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2220      	movs	r2, #32
 8009538:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2220      	movs	r2, #32
 800953e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2220      	movs	r2, #32
 8009544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e010      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69da      	ldr	r2, [r3, #28]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	4013      	ands	r3, r2
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	429a      	cmp	r2, r3
 8009562:	bf0c      	ite	eq
 8009564:	2301      	moveq	r3, #1
 8009566:	2300      	movne	r3, #0
 8009568:	b2db      	uxtb	r3, r3
 800956a:	461a      	mov	r2, r3
 800956c:	79fb      	ldrb	r3, [r7, #7]
 800956e:	429a      	cmp	r2, r3
 8009570:	f43f af4a 	beq.w	8009408 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3770      	adds	r7, #112	; 0x70
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009586:	f3ef 8305 	mrs	r3, IPSR
 800958a:	60bb      	str	r3, [r7, #8]
  return(result);
 800958c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10f      	bne.n	80095b2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009592:	f3ef 8310 	mrs	r3, PRIMASK
 8009596:	607b      	str	r3, [r7, #4]
  return(result);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <osKernelInitialize+0x32>
 800959e:	4b11      	ldr	r3, [pc, #68]	; (80095e4 <osKernelInitialize+0x64>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d109      	bne.n	80095ba <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095a6:	f3ef 8311 	mrs	r3, BASEPRI
 80095aa:	603b      	str	r3, [r7, #0]
  return(result);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80095b2:	f06f 0305 	mvn.w	r3, #5
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	e00c      	b.n	80095d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80095ba:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <osKernelInitialize+0x64>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d105      	bne.n	80095ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80095c2:	4b08      	ldr	r3, [pc, #32]	; (80095e4 <osKernelInitialize+0x64>)
 80095c4:	2201      	movs	r2, #1
 80095c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	e002      	b.n	80095d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80095ce:	f04f 33ff 	mov.w	r3, #4294967295
 80095d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80095d4:	68fb      	ldr	r3, [r7, #12]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	20000264 	.word	0x20000264

080095e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ee:	f3ef 8305 	mrs	r3, IPSR
 80095f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80095f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10f      	bne.n	800961a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095fa:	f3ef 8310 	mrs	r3, PRIMASK
 80095fe:	607b      	str	r3, [r7, #4]
  return(result);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d109      	bne.n	800961a <osKernelStart+0x32>
 8009606:	4b11      	ldr	r3, [pc, #68]	; (800964c <osKernelStart+0x64>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b02      	cmp	r3, #2
 800960c:	d109      	bne.n	8009622 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800960e:	f3ef 8311 	mrs	r3, BASEPRI
 8009612:	603b      	str	r3, [r7, #0]
  return(result);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <osKernelStart+0x3a>
    stat = osErrorISR;
 800961a:	f06f 0305 	mvn.w	r3, #5
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	e00e      	b.n	8009640 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009622:	4b0a      	ldr	r3, [pc, #40]	; (800964c <osKernelStart+0x64>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d107      	bne.n	800963a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800962a:	4b08      	ldr	r3, [pc, #32]	; (800964c <osKernelStart+0x64>)
 800962c:	2202      	movs	r2, #2
 800962e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009630:	f001 f976 	bl	800a920 <vTaskStartScheduler>
      stat = osOK;
 8009634:	2300      	movs	r3, #0
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	e002      	b.n	8009640 <osKernelStart+0x58>
    } else {
      stat = osError;
 800963a:	f04f 33ff 	mov.w	r3, #4294967295
 800963e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009640:	68fb      	ldr	r3, [r7, #12]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000264 	.word	0x20000264

08009650 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009650:	b580      	push	{r7, lr}
 8009652:	b092      	sub	sp, #72	; 0x48
 8009654:	af04      	add	r7, sp, #16
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800965c:	2300      	movs	r3, #0
 800965e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009660:	f3ef 8305 	mrs	r3, IPSR
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009668:	2b00      	cmp	r3, #0
 800966a:	f040 8095 	bne.w	8009798 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800966e:	f3ef 8310 	mrs	r3, PRIMASK
 8009672:	623b      	str	r3, [r7, #32]
  return(result);
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f040 808e 	bne.w	8009798 <osThreadNew+0x148>
 800967c:	4b49      	ldr	r3, [pc, #292]	; (80097a4 <osThreadNew+0x154>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b02      	cmp	r3, #2
 8009682:	d106      	bne.n	8009692 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009684:	f3ef 8311 	mrs	r3, BASEPRI
 8009688:	61fb      	str	r3, [r7, #28]
  return(result);
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	2b00      	cmp	r3, #0
 800968e:	f040 8083 	bne.w	8009798 <osThreadNew+0x148>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d07f      	beq.n	8009798 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8009698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800969c:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800969e:	2318      	movs	r3, #24
 80096a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80096a2:	2300      	movs	r3, #0
 80096a4:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80096a6:	f107 031b 	add.w	r3, r7, #27
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80096ac:	f04f 33ff 	mov.w	r3, #4294967295
 80096b0:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d045      	beq.n	8009744 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <osThreadNew+0x76>
        name = attr->name;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d008      	beq.n	80096ec <osThreadNew+0x9c>
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	2b38      	cmp	r3, #56	; 0x38
 80096de:	d805      	bhi.n	80096ec <osThreadNew+0x9c>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <osThreadNew+0xa0>
        return (NULL);
 80096ec:	2300      	movs	r3, #0
 80096ee:	e054      	b.n	800979a <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	089b      	lsrs	r3, r3, #2
 80096fe:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00e      	beq.n	8009726 <osThreadNew+0xd6>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	2b5b      	cmp	r3, #91	; 0x5b
 800970e:	d90a      	bls.n	8009726 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009714:	2b00      	cmp	r3, #0
 8009716:	d006      	beq.n	8009726 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <osThreadNew+0xd6>
        mem = 1;
 8009720:	2301      	movs	r3, #1
 8009722:	62bb      	str	r3, [r7, #40]	; 0x28
 8009724:	e010      	b.n	8009748 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10c      	bne.n	8009748 <osThreadNew+0xf8>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d108      	bne.n	8009748 <osThreadNew+0xf8>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d104      	bne.n	8009748 <osThreadNew+0xf8>
          mem = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	62bb      	str	r3, [r7, #40]	; 0x28
 8009742:	e001      	b.n	8009748 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	2b01      	cmp	r3, #1
 800974c:	d110      	bne.n	8009770 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009756:	9202      	str	r2, [sp, #8]
 8009758:	9301      	str	r3, [sp, #4]
 800975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 ff0f 	bl	800a588 <xTaskCreateStatic>
 800976a:	4603      	mov	r3, r0
 800976c:	617b      	str	r3, [r7, #20]
 800976e:	e013      	b.n	8009798 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	2b00      	cmp	r3, #0
 8009774:	d110      	bne.n	8009798 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	b29a      	uxth	r2, r3
 800977a:	f107 0314 	add.w	r3, r7, #20
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 ff59 	bl	800a640 <xTaskCreate>
 800978e:	4603      	mov	r3, r0
 8009790:	2b01      	cmp	r3, #1
 8009792:	d001      	beq.n	8009798 <osThreadNew+0x148>
          hTask = NULL;
 8009794:	2300      	movs	r3, #0
 8009796:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009798:	697b      	ldr	r3, [r7, #20]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3738      	adds	r7, #56	; 0x38
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20000264 	.word	0x20000264

080097a8 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08a      	sub	sp, #40	; 0x28
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <osThreadFlagsSet+0x1a>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	da03      	bge.n	80097ca <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80097c2:	f06f 0303 	mvn.w	r3, #3
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	e045      	b.n	8009856 <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 80097ca:	f04f 33ff 	mov.w	r3, #4294967295
 80097ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d0:	f3ef 8305 	mrs	r3, IPSR
 80097d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80097d6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10f      	bne.n	80097fc <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097dc:	f3ef 8310 	mrs	r3, PRIMASK
 80097e0:	617b      	str	r3, [r7, #20]
  return(result);
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <osThreadFlagsSet+0x54>
 80097e8:	4b1d      	ldr	r3, [pc, #116]	; (8009860 <osThreadFlagsSet+0xb8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d125      	bne.n	800983c <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097f0:	f3ef 8311 	mrs	r3, BASEPRI
 80097f4:	613b      	str	r3, [r7, #16]
  return(result);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d01f      	beq.n	800983c <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 80097fc:	2300      	movs	r3, #0
 80097fe:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009800:	f107 0308 	add.w	r3, r7, #8
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	2300      	movs	r3, #0
 8009808:	2201      	movs	r2, #1
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	69f8      	ldr	r0, [r7, #28]
 800980e:	f001 fe63 	bl	800b4d8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	2200      	movs	r2, #0
 8009818:	9200      	str	r2, [sp, #0]
 800981a:	2200      	movs	r2, #0
 800981c:	2100      	movs	r1, #0
 800981e:	69f8      	ldr	r0, [r7, #28]
 8009820:	f001 fe5a 	bl	800b4d8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d015      	beq.n	8009856 <osThreadFlagsSet+0xae>
 800982a:	4b0e      	ldr	r3, [pc, #56]	; (8009864 <osThreadFlagsSet+0xbc>)
 800982c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	e00c      	b.n	8009856 <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800983c:	2300      	movs	r3, #0
 800983e:	2201      	movs	r2, #1
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	69f8      	ldr	r0, [r7, #28]
 8009844:	f001 fda4 	bl	800b390 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009848:	f107 030c 	add.w	r3, r7, #12
 800984c:	2200      	movs	r2, #0
 800984e:	2100      	movs	r1, #0
 8009850:	69f8      	ldr	r0, [r7, #28]
 8009852:	f001 fd9d 	bl	800b390 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009856:	68fb      	ldr	r3, [r7, #12]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3720      	adds	r7, #32
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20000264 	.word	0x20000264
 8009864:	e000ed04 	.word	0xe000ed04

08009868 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009868:	b580      	push	{r7, lr}
 800986a:	b08e      	sub	sp, #56	; 0x38
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009874:	f3ef 8305 	mrs	r3, IPSR
 8009878:	61fb      	str	r3, [r7, #28]
  return(result);
 800987a:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10f      	bne.n	80098a0 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009880:	f3ef 8310 	mrs	r3, PRIMASK
 8009884:	61bb      	str	r3, [r7, #24]
  return(result);
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d109      	bne.n	80098a0 <osThreadFlagsWait+0x38>
 800988c:	4b3f      	ldr	r3, [pc, #252]	; (800998c <osThreadFlagsWait+0x124>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d109      	bne.n	80098a8 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009894:	f3ef 8311 	mrs	r3, BASEPRI
 8009898:	617b      	str	r3, [r7, #20]
  return(result);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80098a0:	f06f 0305 	mvn.w	r3, #5
 80098a4:	637b      	str	r3, [r7, #52]	; 0x34
 80098a6:	e06b      	b.n	8009980 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	da03      	bge.n	80098b6 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80098ae:	f06f 0303 	mvn.w	r3, #3
 80098b2:	637b      	str	r3, [r7, #52]	; 0x34
 80098b4:	e064      	b.n	8009980 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <osThreadFlagsWait+0x5e>
      clear = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	633b      	str	r3, [r7, #48]	; 0x30
 80098c4:	e001      	b.n	80098ca <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 80098d2:	f001 f937 	bl	800ab44 <xTaskGetTickCount>
 80098d6:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80098d8:	f107 0210 	add.w	r2, r7, #16
 80098dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098e0:	2000      	movs	r0, #0
 80098e2:	f001 fcfb 	bl	800b2dc <xTaskNotifyWait>
 80098e6:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d137      	bne.n	800995e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80098ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4013      	ands	r3, r2
 80098f4:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098fa:	4313      	orrs	r3, r2
 80098fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00c      	beq.n	8009922 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990c:	4013      	ands	r3, r2
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	429a      	cmp	r2, r3
 8009912:	d032      	beq.n	800997a <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10f      	bne.n	800993a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800991a:	f06f 0302 	mvn.w	r3, #2
 800991e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8009920:	e02e      	b.n	8009980 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009926:	4013      	ands	r3, r2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d128      	bne.n	800997e <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d103      	bne.n	800993a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8009932:	f06f 0302 	mvn.w	r3, #2
 8009936:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8009938:	e022      	b.n	8009980 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800993a:	f001 f903 	bl	800ab44 <xTaskGetTickCount>
 800993e:	4602      	mov	r2, r0
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8009946:	6a3a      	ldr	r2, [r7, #32]
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	429a      	cmp	r2, r3
 800994c:	d902      	bls.n	8009954 <osThreadFlagsWait+0xec>
          tout  = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009952:	e00e      	b.n	8009972 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8009954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800995c:	e009      	b.n	8009972 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d103      	bne.n	800996c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8009964:	f06f 0302 	mvn.w	r3, #2
 8009968:	637b      	str	r3, [r7, #52]	; 0x34
 800996a:	e002      	b.n	8009972 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800996c:	f06f 0301 	mvn.w	r3, #1
 8009970:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1af      	bne.n	80098d8 <osThreadFlagsWait+0x70>
 8009978:	e002      	b.n	8009980 <osThreadFlagsWait+0x118>
            break;
 800997a:	bf00      	nop
 800997c:	e000      	b.n	8009980 <osThreadFlagsWait+0x118>
            break;
 800997e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009982:	4618      	mov	r0, r3
 8009984:	3738      	adds	r7, #56	; 0x38
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20000264 	.word	0x20000264

08009990 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009998:	f3ef 8305 	mrs	r3, IPSR
 800999c:	613b      	str	r3, [r7, #16]
  return(result);
 800999e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10f      	bne.n	80099c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099a4:	f3ef 8310 	mrs	r3, PRIMASK
 80099a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d109      	bne.n	80099c4 <osDelay+0x34>
 80099b0:	4b0d      	ldr	r3, [pc, #52]	; (80099e8 <osDelay+0x58>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d109      	bne.n	80099cc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099b8:	f3ef 8311 	mrs	r3, BASEPRI
 80099bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <osDelay+0x3c>
    stat = osErrorISR;
 80099c4:	f06f 0305 	mvn.w	r3, #5
 80099c8:	617b      	str	r3, [r7, #20]
 80099ca:	e007      	b.n	80099dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 ff6e 	bl	800a8b8 <vTaskDelay>
    }
  }

  return (stat);
 80099dc:	697b      	ldr	r3, [r7, #20]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20000264 	.word	0x20000264

080099ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4a07      	ldr	r2, [pc, #28]	; (8009a18 <vApplicationGetIdleTaskMemory+0x2c>)
 80099fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	4a06      	ldr	r2, [pc, #24]	; (8009a1c <vApplicationGetIdleTaskMemory+0x30>)
 8009a02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a0a:	601a      	str	r2, [r3, #0]
}
 8009a0c:	bf00      	nop
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	20000268 	.word	0x20000268
 8009a1c:	200002c4 	.word	0x200002c4

08009a20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4a07      	ldr	r2, [pc, #28]	; (8009a4c <vApplicationGetTimerTaskMemory+0x2c>)
 8009a30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	4a06      	ldr	r2, [pc, #24]	; (8009a50 <vApplicationGetTimerTaskMemory+0x30>)
 8009a36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a3e:	601a      	str	r2, [r3, #0]
}
 8009a40:	bf00      	nop
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	200006c4 	.word	0x200006c4
 8009a50:	20000720 	.word	0x20000720

08009a54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f103 0208 	add.w	r2, r3, #8
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f103 0208 	add.w	r2, r3, #8
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f103 0208 	add.w	r2, r3, #8
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009aa2:	bf00      	nop
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	689a      	ldr	r2, [r3, #8]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	601a      	str	r2, [r3, #0]
}
 8009aea:	bf00      	nop
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009af6:	b480      	push	{r7}
 8009af8:	b085      	sub	sp, #20
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0c:	d103      	bne.n	8009b16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	e00c      	b.n	8009b30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	e002      	b.n	8009b24 <vListInsert+0x2e>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d2f6      	bcs.n	8009b1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	601a      	str	r2, [r3, #0]
}
 8009b5c:	bf00      	nop
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	6892      	ldr	r2, [r2, #8]
 8009b7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	6852      	ldr	r2, [r2, #4]
 8009b88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d103      	bne.n	8009b9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689a      	ldr	r2, [r3, #8]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	1e5a      	subs	r2, r3, #1
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10a      	bne.n	8009be6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009be2:	bf00      	nop
 8009be4:	e7fe      	b.n	8009be4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009be6:	f002 f9d5 	bl	800bf94 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf2:	68f9      	ldr	r1, [r7, #12]
 8009bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bf6:	fb01 f303 	mul.w	r3, r1, r3
 8009bfa:	441a      	add	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c16:	3b01      	subs	r3, #1
 8009c18:	68f9      	ldr	r1, [r7, #12]
 8009c1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c1c:	fb01 f303 	mul.w	r3, r1, r3
 8009c20:	441a      	add	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	22ff      	movs	r2, #255	; 0xff
 8009c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	22ff      	movs	r2, #255	; 0xff
 8009c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d114      	bne.n	8009c66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01a      	beq.n	8009c7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3310      	adds	r3, #16
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 f8f7 	bl	800ae3c <xTaskRemoveFromEventList>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d012      	beq.n	8009c7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c54:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <xQueueGenericReset+0xcc>)
 8009c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	e009      	b.n	8009c7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	3310      	adds	r3, #16
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff fef2 	bl	8009a54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3324      	adds	r3, #36	; 0x24
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff feed 	bl	8009a54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c7a:	f002 f9bb 	bl	800bff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c7e:	2301      	movs	r3, #1
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08e      	sub	sp, #56	; 0x38
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10a      	bne.n	8009cb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cb2:	bf00      	nop
 8009cb4:	e7fe      	b.n	8009cb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10a      	bne.n	8009cd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cce:	bf00      	nop
 8009cd0:	e7fe      	b.n	8009cd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <xQueueGenericCreateStatic+0x52>
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <xQueueGenericCreateStatic+0x56>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <xQueueGenericCreateStatic+0x58>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	623b      	str	r3, [r7, #32]
}
 8009cfa:	bf00      	nop
 8009cfc:	e7fe      	b.n	8009cfc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <xQueueGenericCreateStatic+0x7e>
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d101      	bne.n	8009d0e <xQueueGenericCreateStatic+0x82>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e000      	b.n	8009d10 <xQueueGenericCreateStatic+0x84>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	61fb      	str	r3, [r7, #28]
}
 8009d26:	bf00      	nop
 8009d28:	e7fe      	b.n	8009d28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d2a:	2350      	movs	r3, #80	; 0x50
 8009d2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b50      	cmp	r3, #80	; 0x50
 8009d32:	d00a      	beq.n	8009d4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	61bb      	str	r3, [r7, #24]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00d      	beq.n	8009d70 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	4613      	mov	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f805 	bl	8009d7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3730      	adds	r7, #48	; 0x30
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
 8009d86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d103      	bne.n	8009d96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	69ba      	ldr	r2, [r7, #24]
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	e002      	b.n	8009d9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009da8:	2101      	movs	r1, #1
 8009daa:	69b8      	ldr	r0, [r7, #24]
 8009dac:	f7ff ff06 	bl	8009bbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08e      	sub	sp, #56	; 0x38
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10a      	bne.n	8009df2 <xQueueGenericSend+0x32>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dee:	bf00      	nop
 8009df0:	e7fe      	b.n	8009df0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d103      	bne.n	8009e00 <xQueueGenericSend+0x40>
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <xQueueGenericSend+0x44>
 8009e00:	2301      	movs	r3, #1
 8009e02:	e000      	b.n	8009e06 <xQueueGenericSend+0x46>
 8009e04:	2300      	movs	r3, #0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10a      	bne.n	8009e20 <xQueueGenericSend+0x60>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e1c:	bf00      	nop
 8009e1e:	e7fe      	b.n	8009e1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d103      	bne.n	8009e2e <xQueueGenericSend+0x6e>
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d101      	bne.n	8009e32 <xQueueGenericSend+0x72>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <xQueueGenericSend+0x74>
 8009e32:	2300      	movs	r3, #0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10a      	bne.n	8009e4e <xQueueGenericSend+0x8e>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	623b      	str	r3, [r7, #32]
}
 8009e4a:	bf00      	nop
 8009e4c:	e7fe      	b.n	8009e4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e4e:	f001 f9b9 	bl	800b1c4 <xTaskGetSchedulerState>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <xQueueGenericSend+0x9e>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <xQueueGenericSend+0xa2>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e000      	b.n	8009e64 <xQueueGenericSend+0xa4>
 8009e62:	2300      	movs	r3, #0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <xQueueGenericSend+0xbe>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	61fb      	str	r3, [r7, #28]
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e7e:	f002 f889 	bl	800bf94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d302      	bcc.n	8009e94 <xQueueGenericSend+0xd4>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d129      	bne.n	8009ee8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e9a:	f000 fa07 	bl	800a2ac <prvCopyDataToQueue>
 8009e9e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d010      	beq.n	8009eca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	3324      	adds	r3, #36	; 0x24
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 ffc5 	bl	800ae3c <xTaskRemoveFromEventList>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d013      	beq.n	8009ee0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009eb8:	4b3f      	ldr	r3, [pc, #252]	; (8009fb8 <xQueueGenericSend+0x1f8>)
 8009eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	e00a      	b.n	8009ee0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d007      	beq.n	8009ee0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ed0:	4b39      	ldr	r3, [pc, #228]	; (8009fb8 <xQueueGenericSend+0x1f8>)
 8009ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ee0:	f002 f888 	bl	800bff4 <vPortExitCritical>
				return pdPASS;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e063      	b.n	8009fb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d103      	bne.n	8009ef6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009eee:	f002 f881 	bl	800bff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e05c      	b.n	8009fb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d106      	bne.n	8009f0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009efc:	f107 0314 	add.w	r3, r7, #20
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 ffff 	bl	800af04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f06:	2301      	movs	r3, #1
 8009f08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f0a:	f002 f873 	bl	800bff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f0e:	f000 fd6d 	bl	800a9ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f12:	f002 f83f 	bl	800bf94 <vPortEnterCritical>
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f1c:	b25b      	sxtb	r3, r3
 8009f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f22:	d103      	bne.n	8009f2c <xQueueGenericSend+0x16c>
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f32:	b25b      	sxtb	r3, r3
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d103      	bne.n	8009f42 <xQueueGenericSend+0x182>
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f42:	f002 f857 	bl	800bff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f46:	1d3a      	adds	r2, r7, #4
 8009f48:	f107 0314 	add.w	r3, r7, #20
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 ffee 	bl	800af30 <xTaskCheckForTimeOut>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d124      	bne.n	8009fa4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f5c:	f000 fa9e 	bl	800a49c <prvIsQueueFull>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d018      	beq.n	8009f98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	3310      	adds	r3, #16
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 ff14 	bl	800ad9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f76:	f000 fa29 	bl	800a3cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f7a:	f000 fd45 	bl	800aa08 <xTaskResumeAll>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f47f af7c 	bne.w	8009e7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f86:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <xQueueGenericSend+0x1f8>)
 8009f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	e772      	b.n	8009e7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f9a:	f000 fa17 	bl	800a3cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f9e:	f000 fd33 	bl	800aa08 <xTaskResumeAll>
 8009fa2:	e76c      	b.n	8009e7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fa6:	f000 fa11 	bl	800a3cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009faa:	f000 fd2d 	bl	800aa08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fae:	2300      	movs	r3, #0
		}
	}
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3738      	adds	r7, #56	; 0x38
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	e000ed04 	.word	0xe000ed04

08009fbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08e      	sub	sp, #56	; 0x38
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fe6:	bf00      	nop
 8009fe8:	e7fe      	b.n	8009fe8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d103      	bne.n	8009ff8 <xQueueGenericSendFromISR+0x3c>
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <xQueueGenericSendFromISR+0x40>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e000      	b.n	8009ffe <xQueueGenericSendFromISR+0x42>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	623b      	str	r3, [r7, #32]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d103      	bne.n	800a026 <xQueueGenericSendFromISR+0x6a>
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a022:	2b01      	cmp	r3, #1
 800a024:	d101      	bne.n	800a02a <xQueueGenericSendFromISR+0x6e>
 800a026:	2301      	movs	r3, #1
 800a028:	e000      	b.n	800a02c <xQueueGenericSendFromISR+0x70>
 800a02a:	2300      	movs	r3, #0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	61fb      	str	r3, [r7, #28]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a046:	f002 f887 	bl	800c158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a04a:	f3ef 8211 	mrs	r2, BASEPRI
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	61ba      	str	r2, [r7, #24]
 800a060:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a062:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a064:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06e:	429a      	cmp	r2, r3
 800a070:	d302      	bcc.n	800a078 <xQueueGenericSendFromISR+0xbc>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	2b02      	cmp	r3, #2
 800a076:	d12c      	bne.n	800a0d2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a07e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	68b9      	ldr	r1, [r7, #8]
 800a086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a088:	f000 f910 	bl	800a2ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a08c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a094:	d112      	bne.n	800a0bc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d016      	beq.n	800a0cc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	3324      	adds	r3, #36	; 0x24
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 feca 	bl	800ae3c <xTaskRemoveFromEventList>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00e      	beq.n	800a0cc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00b      	beq.n	800a0cc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]
 800a0ba:	e007      	b.n	800a0cc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	b25a      	sxtb	r2, r3
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a0d0:	e001      	b.n	800a0d6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3738      	adds	r7, #56	; 0x38
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b08c      	sub	sp, #48	; 0x30
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10a      	bne.n	800a11c <xQueueReceive+0x30>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	623b      	str	r3, [r7, #32]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d103      	bne.n	800a12a <xQueueReceive+0x3e>
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <xQueueReceive+0x42>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <xQueueReceive+0x44>
 800a12e:	2300      	movs	r3, #0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <xQueueReceive+0x5e>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	61fb      	str	r3, [r7, #28]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a14a:	f001 f83b 	bl	800b1c4 <xTaskGetSchedulerState>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d102      	bne.n	800a15a <xQueueReceive+0x6e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <xQueueReceive+0x72>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e000      	b.n	800a160 <xQueueReceive+0x74>
 800a15e:	2300      	movs	r3, #0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <xQueueReceive+0x8e>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	61bb      	str	r3, [r7, #24]
}
 800a176:	bf00      	nop
 800a178:	e7fe      	b.n	800a178 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a17a:	f001 ff0b 	bl	800bf94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a182:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01f      	beq.n	800a1ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a18a:	68b9      	ldr	r1, [r7, #8]
 800a18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18e:	f000 f8f7 	bl	800a380 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	1e5a      	subs	r2, r3, #1
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00f      	beq.n	800a1c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	3310      	adds	r3, #16
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fe48 	bl	800ae3c <xTaskRemoveFromEventList>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1b2:	4b3d      	ldr	r3, [pc, #244]	; (800a2a8 <xQueueReceive+0x1bc>)
 800a1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1c2:	f001 ff17 	bl	800bff4 <vPortExitCritical>
				return pdPASS;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e069      	b.n	800a29e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1d0:	f001 ff10 	bl	800bff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	e062      	b.n	800a29e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1de:	f107 0310 	add.w	r3, r7, #16
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fe8e 	bl	800af04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1ec:	f001 ff02 	bl	800bff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1f0:	f000 fbfc 	bl	800a9ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1f4:	f001 fece 	bl	800bf94 <vPortEnterCritical>
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1fe:	b25b      	sxtb	r3, r3
 800a200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a204:	d103      	bne.n	800a20e <xQueueReceive+0x122>
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a214:	b25b      	sxtb	r3, r3
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21a:	d103      	bne.n	800a224 <xQueueReceive+0x138>
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a224:	f001 fee6 	bl	800bff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a228:	1d3a      	adds	r2, r7, #4
 800a22a:	f107 0310 	add.w	r3, r7, #16
 800a22e:	4611      	mov	r1, r2
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fe7d 	bl	800af30 <xTaskCheckForTimeOut>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d123      	bne.n	800a284 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a23c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a23e:	f000 f917 	bl	800a470 <prvIsQueueEmpty>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d017      	beq.n	800a278 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	3324      	adds	r3, #36	; 0x24
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	4611      	mov	r1, r2
 800a250:	4618      	mov	r0, r3
 800a252:	f000 fda3 	bl	800ad9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a258:	f000 f8b8 	bl	800a3cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a25c:	f000 fbd4 	bl	800aa08 <xTaskResumeAll>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d189      	bne.n	800a17a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a266:	4b10      	ldr	r3, [pc, #64]	; (800a2a8 <xQueueReceive+0x1bc>)
 800a268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	e780      	b.n	800a17a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a27a:	f000 f8a7 	bl	800a3cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a27e:	f000 fbc3 	bl	800aa08 <xTaskResumeAll>
 800a282:	e77a      	b.n	800a17a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a286:	f000 f8a1 	bl	800a3cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a28a:	f000 fbbd 	bl	800aa08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a28e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a290:	f000 f8ee 	bl	800a470 <prvIsQueueEmpty>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	f43f af6f 	beq.w	800a17a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a29c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3730      	adds	r7, #48	; 0x30
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10d      	bne.n	800a2e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d14d      	bne.n	800a36e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 ff92 	bl	800b200 <xTaskPriorityDisinherit>
 800a2dc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	605a      	str	r2, [r3, #4]
 800a2e4:	e043      	b.n	800a36e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d119      	bne.n	800a320 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6898      	ldr	r0, [r3, #8]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	f002 f972 	bl	800c5e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	441a      	add	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	689a      	ldr	r2, [r3, #8]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	429a      	cmp	r2, r3
 800a314:	d32b      	bcc.n	800a36e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	609a      	str	r2, [r3, #8]
 800a31e:	e026      	b.n	800a36e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68d8      	ldr	r0, [r3, #12]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	461a      	mov	r2, r3
 800a32a:	68b9      	ldr	r1, [r7, #8]
 800a32c:	f002 f958 	bl	800c5e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68da      	ldr	r2, [r3, #12]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a338:	425b      	negs	r3, r3
 800a33a:	441a      	add	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d207      	bcs.n	800a35c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a354:	425b      	negs	r3, r3
 800a356:	441a      	add	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d105      	bne.n	800a36e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a376:	697b      	ldr	r3, [r7, #20]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d018      	beq.n	800a3c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	441a      	add	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	68da      	ldr	r2, [r3, #12]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d303      	bcc.n	800a3b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68d9      	ldr	r1, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3bc:	461a      	mov	r2, r3
 800a3be:	6838      	ldr	r0, [r7, #0]
 800a3c0:	f002 f90e 	bl	800c5e0 <memcpy>
	}
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3d4:	f001 fdde 	bl	800bf94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3e0:	e011      	b.n	800a406 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d012      	beq.n	800a410 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3324      	adds	r3, #36	; 0x24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fd24 	bl	800ae3c <xTaskRemoveFromEventList>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3fa:	f000 fdfb 	bl	800aff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	3b01      	subs	r3, #1
 800a402:	b2db      	uxtb	r3, r3
 800a404:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	dce9      	bgt.n	800a3e2 <prvUnlockQueue+0x16>
 800a40e:	e000      	b.n	800a412 <prvUnlockQueue+0x46>
					break;
 800a410:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a41a:	f001 fdeb 	bl	800bff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a41e:	f001 fdb9 	bl	800bf94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a428:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a42a:	e011      	b.n	800a450 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d012      	beq.n	800a45a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3310      	adds	r3, #16
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fcff 	bl	800ae3c <xTaskRemoveFromEventList>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a444:	f000 fdd6 	bl	800aff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a448:	7bbb      	ldrb	r3, [r7, #14]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a454:	2b00      	cmp	r3, #0
 800a456:	dce9      	bgt.n	800a42c <prvUnlockQueue+0x60>
 800a458:	e000      	b.n	800a45c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a45a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	22ff      	movs	r2, #255	; 0xff
 800a460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a464:	f001 fdc6 	bl	800bff4 <vPortExitCritical>
}
 800a468:	bf00      	nop
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a478:	f001 fd8c 	bl	800bf94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	2b00      	cmp	r3, #0
 800a482:	d102      	bne.n	800a48a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a484:	2301      	movs	r3, #1
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	e001      	b.n	800a48e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a48e:	f001 fdb1 	bl	800bff4 <vPortExitCritical>

	return xReturn;
 800a492:	68fb      	ldr	r3, [r7, #12]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4a4:	f001 fd76 	bl	800bf94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d102      	bne.n	800a4ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	e001      	b.n	800a4be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4be:	f001 fd99 	bl	800bff4 <vPortExitCritical>

	return xReturn;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	e014      	b.n	800a506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4dc:	4a0f      	ldr	r2, [pc, #60]	; (800a51c <vQueueAddToRegistry+0x50>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10b      	bne.n	800a500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4e8:	490c      	ldr	r1, [pc, #48]	; (800a51c <vQueueAddToRegistry+0x50>)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4f2:	4a0a      	ldr	r2, [pc, #40]	; (800a51c <vQueueAddToRegistry+0x50>)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4fe:	e006      	b.n	800a50e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	3301      	adds	r3, #1
 800a504:	60fb      	str	r3, [r7, #12]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b07      	cmp	r3, #7
 800a50a:	d9e7      	bls.n	800a4dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	2000429c 	.word	0x2000429c

0800a520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a530:	f001 fd30 	bl	800bf94 <vPortEnterCritical>
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a53a:	b25b      	sxtb	r3, r3
 800a53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a540:	d103      	bne.n	800a54a <vQueueWaitForMessageRestricted+0x2a>
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a550:	b25b      	sxtb	r3, r3
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a556:	d103      	bne.n	800a560 <vQueueWaitForMessageRestricted+0x40>
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a560:	f001 fd48 	bl	800bff4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d106      	bne.n	800a57a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	3324      	adds	r3, #36	; 0x24
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	68b9      	ldr	r1, [r7, #8]
 800a574:	4618      	mov	r0, r3
 800a576:	f000 fc35 	bl	800ade4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a57a:	6978      	ldr	r0, [r7, #20]
 800a57c:	f7ff ff26 	bl	800a3cc <prvUnlockQueue>
	}
 800a580:	bf00      	nop
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b08e      	sub	sp, #56	; 0x38
 800a58c:	af04      	add	r7, sp, #16
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	623b      	str	r3, [r7, #32]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <xTaskCreateStatic+0x46>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	61fb      	str	r3, [r7, #28]
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5ce:	235c      	movs	r3, #92	; 0x5c
 800a5d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	2b5c      	cmp	r3, #92	; 0x5c
 800a5d6:	d00a      	beq.n	800a5ee <xTaskCreateStatic+0x66>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	61bb      	str	r3, [r7, #24]
}
 800a5ea:	bf00      	nop
 800a5ec:	e7fe      	b.n	800a5ec <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d01e      	beq.n	800a632 <xTaskCreateStatic+0xaa>
 800a5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d01b      	beq.n	800a632 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a602:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	2202      	movs	r2, #2
 800a608:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a60c:	2300      	movs	r3, #0
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	9302      	str	r3, [sp, #8]
 800a614:	f107 0314 	add.w	r3, r7, #20
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	68b9      	ldr	r1, [r7, #8]
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 f850 	bl	800a6ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a62a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a62c:	f000 f8d4 	bl	800a7d8 <prvAddNewTaskToReadyList>
 800a630:	e001      	b.n	800a636 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a632:	2300      	movs	r3, #0
 800a634:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a636:	697b      	ldr	r3, [r7, #20]
	}
 800a638:	4618      	mov	r0, r3
 800a63a:	3728      	adds	r7, #40	; 0x28
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a640:	b580      	push	{r7, lr}
 800a642:	b08c      	sub	sp, #48	; 0x30
 800a644:	af04      	add	r7, sp, #16
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	4613      	mov	r3, r2
 800a64e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a650:	88fb      	ldrh	r3, [r7, #6]
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4618      	mov	r0, r3
 800a656:	f001 fdbf 	bl	800c1d8 <pvPortMalloc>
 800a65a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00e      	beq.n	800a680 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a662:	205c      	movs	r0, #92	; 0x5c
 800a664:	f001 fdb8 	bl	800c1d8 <pvPortMalloc>
 800a668:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d003      	beq.n	800a678 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	631a      	str	r2, [r3, #48]	; 0x30
 800a676:	e005      	b.n	800a684 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a678:	6978      	ldr	r0, [r7, #20]
 800a67a:	f001 fe71 	bl	800c360 <vPortFree>
 800a67e:	e001      	b.n	800a684 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a680:	2300      	movs	r3, #0
 800a682:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d017      	beq.n	800a6ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a692:	88fa      	ldrh	r2, [r7, #6]
 800a694:	2300      	movs	r3, #0
 800a696:	9303      	str	r3, [sp, #12]
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	9302      	str	r3, [sp, #8]
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	9301      	str	r3, [sp, #4]
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	68b9      	ldr	r1, [r7, #8]
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 f80e 	bl	800a6ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6ae:	69f8      	ldr	r0, [r7, #28]
 800a6b0:	f000 f892 	bl	800a7d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	61bb      	str	r3, [r7, #24]
 800a6b8:	e002      	b.n	800a6c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a6be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
	}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3720      	adds	r7, #32
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b088      	sub	sp, #32
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	607a      	str	r2, [r7, #4]
 800a6d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	21a5      	movs	r1, #165	; 0xa5
 800a6e4:	f001 ff8a 	bl	800c5fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	f023 0307 	bic.w	r3, r3, #7
 800a700:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	f003 0307 	and.w	r3, r3, #7
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00a      	beq.n	800a722 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	617b      	str	r3, [r7, #20]
}
 800a71e:	bf00      	nop
 800a720:	e7fe      	b.n	800a720 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a722:	2300      	movs	r3, #0
 800a724:	61fb      	str	r3, [r7, #28]
 800a726:	e012      	b.n	800a74e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	4413      	add	r3, r2
 800a72e:	7819      	ldrb	r1, [r3, #0]
 800a730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	4413      	add	r3, r2
 800a736:	3334      	adds	r3, #52	; 0x34
 800a738:	460a      	mov	r2, r1
 800a73a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	4413      	add	r3, r2
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d006      	beq.n	800a756 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	3301      	adds	r3, #1
 800a74c:	61fb      	str	r3, [r7, #28]
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	2b0f      	cmp	r3, #15
 800a752:	d9e9      	bls.n	800a728 <prvInitialiseNewTask+0x5e>
 800a754:	e000      	b.n	800a758 <prvInitialiseNewTask+0x8e>
		{
			break;
 800a756:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	2b37      	cmp	r3, #55	; 0x37
 800a764:	d901      	bls.n	800a76a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a766:	2337      	movs	r3, #55	; 0x37
 800a768:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a76e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a774:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	2200      	movs	r2, #0
 800a77a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77e:	3304      	adds	r3, #4
 800a780:	4618      	mov	r0, r3
 800a782:	f7ff f987 	bl	8009a94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	3318      	adds	r3, #24
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff f982 	bl	8009a94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a794:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a798:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	68f9      	ldr	r1, [r7, #12]
 800a7b8:	69b8      	ldr	r0, [r7, #24]
 800a7ba:	f001 fabd 	bl	800bd38 <pxPortInitialiseStack>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7d0:	bf00      	nop
 800a7d2:	3720      	adds	r7, #32
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7e0:	f001 fbd8 	bl	800bf94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7e4:	4b2d      	ldr	r3, [pc, #180]	; (800a89c <prvAddNewTaskToReadyList+0xc4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	4a2c      	ldr	r2, [pc, #176]	; (800a89c <prvAddNewTaskToReadyList+0xc4>)
 800a7ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7ee:	4b2c      	ldr	r3, [pc, #176]	; (800a8a0 <prvAddNewTaskToReadyList+0xc8>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d109      	bne.n	800a80a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7f6:	4a2a      	ldr	r2, [pc, #168]	; (800a8a0 <prvAddNewTaskToReadyList+0xc8>)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7fc:	4b27      	ldr	r3, [pc, #156]	; (800a89c <prvAddNewTaskToReadyList+0xc4>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d110      	bne.n	800a826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a804:	f000 fc1a 	bl	800b03c <prvInitialiseTaskLists>
 800a808:	e00d      	b.n	800a826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a80a:	4b26      	ldr	r3, [pc, #152]	; (800a8a4 <prvAddNewTaskToReadyList+0xcc>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d109      	bne.n	800a826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a812:	4b23      	ldr	r3, [pc, #140]	; (800a8a0 <prvAddNewTaskToReadyList+0xc8>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d802      	bhi.n	800a826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a820:	4a1f      	ldr	r2, [pc, #124]	; (800a8a0 <prvAddNewTaskToReadyList+0xc8>)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a826:	4b20      	ldr	r3, [pc, #128]	; (800a8a8 <prvAddNewTaskToReadyList+0xd0>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3301      	adds	r3, #1
 800a82c:	4a1e      	ldr	r2, [pc, #120]	; (800a8a8 <prvAddNewTaskToReadyList+0xd0>)
 800a82e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a830:	4b1d      	ldr	r3, [pc, #116]	; (800a8a8 <prvAddNewTaskToReadyList+0xd0>)
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83c:	4b1b      	ldr	r3, [pc, #108]	; (800a8ac <prvAddNewTaskToReadyList+0xd4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d903      	bls.n	800a84c <prvAddNewTaskToReadyList+0x74>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a848:	4a18      	ldr	r2, [pc, #96]	; (800a8ac <prvAddNewTaskToReadyList+0xd4>)
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a850:	4613      	mov	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4a15      	ldr	r2, [pc, #84]	; (800a8b0 <prvAddNewTaskToReadyList+0xd8>)
 800a85a:	441a      	add	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3304      	adds	r3, #4
 800a860:	4619      	mov	r1, r3
 800a862:	4610      	mov	r0, r2
 800a864:	f7ff f923 	bl	8009aae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a868:	f001 fbc4 	bl	800bff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a86c:	4b0d      	ldr	r3, [pc, #52]	; (800a8a4 <prvAddNewTaskToReadyList+0xcc>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00e      	beq.n	800a892 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a874:	4b0a      	ldr	r3, [pc, #40]	; (800a8a0 <prvAddNewTaskToReadyList+0xc8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87e:	429a      	cmp	r2, r3
 800a880:	d207      	bcs.n	800a892 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a882:	4b0c      	ldr	r3, [pc, #48]	; (800a8b4 <prvAddNewTaskToReadyList+0xdc>)
 800a884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	200013f4 	.word	0x200013f4
 800a8a0:	20000f20 	.word	0x20000f20
 800a8a4:	20001400 	.word	0x20001400
 800a8a8:	20001410 	.word	0x20001410
 800a8ac:	200013fc 	.word	0x200013fc
 800a8b0:	20000f24 	.word	0x20000f24
 800a8b4:	e000ed04 	.word	0xe000ed04

0800a8b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d017      	beq.n	800a8fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8ca:	4b13      	ldr	r3, [pc, #76]	; (800a918 <vTaskDelay+0x60>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d00a      	beq.n	800a8e8 <vTaskDelay+0x30>
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	60bb      	str	r3, [r7, #8]
}
 800a8e4:	bf00      	nop
 800a8e6:	e7fe      	b.n	800a8e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a8e8:	f000 f880 	bl	800a9ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 febc 	bl	800b66c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8f4:	f000 f888 	bl	800aa08 <xTaskResumeAll>
 800a8f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d107      	bne.n	800a910 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a900:	4b06      	ldr	r3, [pc, #24]	; (800a91c <vTaskDelay+0x64>)
 800a902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a910:	bf00      	nop
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	2000141c 	.word	0x2000141c
 800a91c:	e000ed04 	.word	0xe000ed04

0800a920 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b08a      	sub	sp, #40	; 0x28
 800a924:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a92a:	2300      	movs	r3, #0
 800a92c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a92e:	463a      	mov	r2, r7
 800a930:	1d39      	adds	r1, r7, #4
 800a932:	f107 0308 	add.w	r3, r7, #8
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff f858 	bl	80099ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	9202      	str	r2, [sp, #8]
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	2300      	movs	r3, #0
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	2300      	movs	r3, #0
 800a94c:	460a      	mov	r2, r1
 800a94e:	4921      	ldr	r1, [pc, #132]	; (800a9d4 <vTaskStartScheduler+0xb4>)
 800a950:	4821      	ldr	r0, [pc, #132]	; (800a9d8 <vTaskStartScheduler+0xb8>)
 800a952:	f7ff fe19 	bl	800a588 <xTaskCreateStatic>
 800a956:	4603      	mov	r3, r0
 800a958:	4a20      	ldr	r2, [pc, #128]	; (800a9dc <vTaskStartScheduler+0xbc>)
 800a95a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a95c:	4b1f      	ldr	r3, [pc, #124]	; (800a9dc <vTaskStartScheduler+0xbc>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a964:	2301      	movs	r3, #1
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	e001      	b.n	800a96e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d102      	bne.n	800a97a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a974:	f000 fece 	bl	800b714 <xTimerCreateTimerTask>
 800a978:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d116      	bne.n	800a9ae <vTaskStartScheduler+0x8e>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	613b      	str	r3, [r7, #16]
}
 800a992:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a994:	4b12      	ldr	r3, [pc, #72]	; (800a9e0 <vTaskStartScheduler+0xc0>)
 800a996:	f04f 32ff 	mov.w	r2, #4294967295
 800a99a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a99c:	4b11      	ldr	r3, [pc, #68]	; (800a9e4 <vTaskStartScheduler+0xc4>)
 800a99e:	2201      	movs	r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a9a2:	4b11      	ldr	r3, [pc, #68]	; (800a9e8 <vTaskStartScheduler+0xc8>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9a8:	f001 fa52 	bl	800be50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9ac:	e00e      	b.n	800a9cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d10a      	bne.n	800a9cc <vTaskStartScheduler+0xac>
	__asm volatile
 800a9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	60fb      	str	r3, [r7, #12]
}
 800a9c8:	bf00      	nop
 800a9ca:	e7fe      	b.n	800a9ca <vTaskStartScheduler+0xaa>
}
 800a9cc:	bf00      	nop
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	0800f2a0 	.word	0x0800f2a0
 800a9d8:	0800b00d 	.word	0x0800b00d
 800a9dc:	20001418 	.word	0x20001418
 800a9e0:	20001414 	.word	0x20001414
 800a9e4:	20001400 	.word	0x20001400
 800a9e8:	200013f8 	.word	0x200013f8

0800a9ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a9f0:	4b04      	ldr	r3, [pc, #16]	; (800aa04 <vTaskSuspendAll+0x18>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	4a03      	ldr	r2, [pc, #12]	; (800aa04 <vTaskSuspendAll+0x18>)
 800a9f8:	6013      	str	r3, [r2, #0]
}
 800a9fa:	bf00      	nop
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	2000141c 	.word	0x2000141c

0800aa08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa16:	4b42      	ldr	r3, [pc, #264]	; (800ab20 <xTaskResumeAll+0x118>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10a      	bne.n	800aa34 <xTaskResumeAll+0x2c>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	603b      	str	r3, [r7, #0]
}
 800aa30:	bf00      	nop
 800aa32:	e7fe      	b.n	800aa32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa34:	f001 faae 	bl	800bf94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa38:	4b39      	ldr	r3, [pc, #228]	; (800ab20 <xTaskResumeAll+0x118>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	4a38      	ldr	r2, [pc, #224]	; (800ab20 <xTaskResumeAll+0x118>)
 800aa40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa42:	4b37      	ldr	r3, [pc, #220]	; (800ab20 <xTaskResumeAll+0x118>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d162      	bne.n	800ab10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa4a:	4b36      	ldr	r3, [pc, #216]	; (800ab24 <xTaskResumeAll+0x11c>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d05e      	beq.n	800ab10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa52:	e02f      	b.n	800aab4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aa54:	4b34      	ldr	r3, [pc, #208]	; (800ab28 <xTaskResumeAll+0x120>)
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	3318      	adds	r3, #24
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7ff f881 	bl	8009b68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3304      	adds	r3, #4
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff f87c 	bl	8009b68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa74:	4b2d      	ldr	r3, [pc, #180]	; (800ab2c <xTaskResumeAll+0x124>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d903      	bls.n	800aa84 <xTaskResumeAll+0x7c>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa80:	4a2a      	ldr	r2, [pc, #168]	; (800ab2c <xTaskResumeAll+0x124>)
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa88:	4613      	mov	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4a27      	ldr	r2, [pc, #156]	; (800ab30 <xTaskResumeAll+0x128>)
 800aa92:	441a      	add	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3304      	adds	r3, #4
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	f7ff f807 	bl	8009aae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa4:	4b23      	ldr	r3, [pc, #140]	; (800ab34 <xTaskResumeAll+0x12c>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d302      	bcc.n	800aab4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aaae:	4b22      	ldr	r3, [pc, #136]	; (800ab38 <xTaskResumeAll+0x130>)
 800aab0:	2201      	movs	r2, #1
 800aab2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aab4:	4b1c      	ldr	r3, [pc, #112]	; (800ab28 <xTaskResumeAll+0x120>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1cb      	bne.n	800aa54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aac2:	f000 fb59 	bl	800b178 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aac6:	4b1d      	ldr	r3, [pc, #116]	; (800ab3c <xTaskResumeAll+0x134>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d010      	beq.n	800aaf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aad2:	f000 f847 	bl	800ab64 <xTaskIncrementTick>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aadc:	4b16      	ldr	r3, [pc, #88]	; (800ab38 <xTaskResumeAll+0x130>)
 800aade:	2201      	movs	r2, #1
 800aae0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1f1      	bne.n	800aad2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800aaee:	4b13      	ldr	r3, [pc, #76]	; (800ab3c <xTaskResumeAll+0x134>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aaf4:	4b10      	ldr	r3, [pc, #64]	; (800ab38 <xTaskResumeAll+0x130>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d009      	beq.n	800ab10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aafc:	2301      	movs	r3, #1
 800aafe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab00:	4b0f      	ldr	r3, [pc, #60]	; (800ab40 <xTaskResumeAll+0x138>)
 800ab02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab10:	f001 fa70 	bl	800bff4 <vPortExitCritical>

	return xAlreadyYielded;
 800ab14:	68bb      	ldr	r3, [r7, #8]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	2000141c 	.word	0x2000141c
 800ab24:	200013f4 	.word	0x200013f4
 800ab28:	200013b4 	.word	0x200013b4
 800ab2c:	200013fc 	.word	0x200013fc
 800ab30:	20000f24 	.word	0x20000f24
 800ab34:	20000f20 	.word	0x20000f20
 800ab38:	20001408 	.word	0x20001408
 800ab3c:	20001404 	.word	0x20001404
 800ab40:	e000ed04 	.word	0xe000ed04

0800ab44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab4a:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <xTaskGetTickCount+0x1c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab50:	687b      	ldr	r3, [r7, #4]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	200013f8 	.word	0x200013f8

0800ab64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b086      	sub	sp, #24
 800ab68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab6e:	4b51      	ldr	r3, [pc, #324]	; (800acb4 <xTaskIncrementTick+0x150>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f040 808e 	bne.w	800ac94 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab78:	4b4f      	ldr	r3, [pc, #316]	; (800acb8 <xTaskIncrementTick+0x154>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab80:	4a4d      	ldr	r2, [pc, #308]	; (800acb8 <xTaskIncrementTick+0x154>)
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d120      	bne.n	800abce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab8c:	4b4b      	ldr	r3, [pc, #300]	; (800acbc <xTaskIncrementTick+0x158>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00a      	beq.n	800abac <xTaskIncrementTick+0x48>
	__asm volatile
 800ab96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	603b      	str	r3, [r7, #0]
}
 800aba8:	bf00      	nop
 800abaa:	e7fe      	b.n	800abaa <xTaskIncrementTick+0x46>
 800abac:	4b43      	ldr	r3, [pc, #268]	; (800acbc <xTaskIncrementTick+0x158>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	60fb      	str	r3, [r7, #12]
 800abb2:	4b43      	ldr	r3, [pc, #268]	; (800acc0 <xTaskIncrementTick+0x15c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a41      	ldr	r2, [pc, #260]	; (800acbc <xTaskIncrementTick+0x158>)
 800abb8:	6013      	str	r3, [r2, #0]
 800abba:	4a41      	ldr	r2, [pc, #260]	; (800acc0 <xTaskIncrementTick+0x15c>)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	4b40      	ldr	r3, [pc, #256]	; (800acc4 <xTaskIncrementTick+0x160>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3301      	adds	r3, #1
 800abc6:	4a3f      	ldr	r2, [pc, #252]	; (800acc4 <xTaskIncrementTick+0x160>)
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	f000 fad5 	bl	800b178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abce:	4b3e      	ldr	r3, [pc, #248]	; (800acc8 <xTaskIncrementTick+0x164>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d34e      	bcc.n	800ac76 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abd8:	4b38      	ldr	r3, [pc, #224]	; (800acbc <xTaskIncrementTick+0x158>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <xTaskIncrementTick+0x82>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e000      	b.n	800abe8 <xTaskIncrementTick+0x84>
 800abe6:	2300      	movs	r3, #0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d004      	beq.n	800abf6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abec:	4b36      	ldr	r3, [pc, #216]	; (800acc8 <xTaskIncrementTick+0x164>)
 800abee:	f04f 32ff 	mov.w	r2, #4294967295
 800abf2:	601a      	str	r2, [r3, #0]
					break;
 800abf4:	e03f      	b.n	800ac76 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800abf6:	4b31      	ldr	r3, [pc, #196]	; (800acbc <xTaskIncrementTick+0x158>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d203      	bcs.n	800ac16 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac0e:	4a2e      	ldr	r2, [pc, #184]	; (800acc8 <xTaskIncrementTick+0x164>)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6013      	str	r3, [r2, #0]
						break;
 800ac14:	e02f      	b.n	800ac76 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fe ffa4 	bl	8009b68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d004      	beq.n	800ac32 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	3318      	adds	r3, #24
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fe ff9b 	bl	8009b68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac36:	4b25      	ldr	r3, [pc, #148]	; (800accc <xTaskIncrementTick+0x168>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d903      	bls.n	800ac46 <xTaskIncrementTick+0xe2>
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac42:	4a22      	ldr	r2, [pc, #136]	; (800accc <xTaskIncrementTick+0x168>)
 800ac44:	6013      	str	r3, [r2, #0]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4a1f      	ldr	r2, [pc, #124]	; (800acd0 <xTaskIncrementTick+0x16c>)
 800ac54:	441a      	add	r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f7fe ff26 	bl	8009aae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac66:	4b1b      	ldr	r3, [pc, #108]	; (800acd4 <xTaskIncrementTick+0x170>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d3b3      	bcc.n	800abd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ac70:	2301      	movs	r3, #1
 800ac72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac74:	e7b0      	b.n	800abd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac76:	4b17      	ldr	r3, [pc, #92]	; (800acd4 <xTaskIncrementTick+0x170>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7c:	4914      	ldr	r1, [pc, #80]	; (800acd0 <xTaskIncrementTick+0x16c>)
 800ac7e:	4613      	mov	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	4413      	add	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	440b      	add	r3, r1
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d907      	bls.n	800ac9e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	617b      	str	r3, [r7, #20]
 800ac92:	e004      	b.n	800ac9e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ac94:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <xTaskIncrementTick+0x174>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	4a0f      	ldr	r2, [pc, #60]	; (800acd8 <xTaskIncrementTick+0x174>)
 800ac9c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ac9e:	4b0f      	ldr	r3, [pc, #60]	; (800acdc <xTaskIncrementTick+0x178>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800aca6:	2301      	movs	r3, #1
 800aca8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800acaa:	697b      	ldr	r3, [r7, #20]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	2000141c 	.word	0x2000141c
 800acb8:	200013f8 	.word	0x200013f8
 800acbc:	200013ac 	.word	0x200013ac
 800acc0:	200013b0 	.word	0x200013b0
 800acc4:	2000140c 	.word	0x2000140c
 800acc8:	20001414 	.word	0x20001414
 800accc:	200013fc 	.word	0x200013fc
 800acd0:	20000f24 	.word	0x20000f24
 800acd4:	20000f20 	.word	0x20000f20
 800acd8:	20001404 	.word	0x20001404
 800acdc:	20001408 	.word	0x20001408

0800ace0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ace6:	4b28      	ldr	r3, [pc, #160]	; (800ad88 <vTaskSwitchContext+0xa8>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800acee:	4b27      	ldr	r3, [pc, #156]	; (800ad8c <vTaskSwitchContext+0xac>)
 800acf0:	2201      	movs	r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800acf4:	e041      	b.n	800ad7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800acf6:	4b25      	ldr	r3, [pc, #148]	; (800ad8c <vTaskSwitchContext+0xac>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800acfc:	4b24      	ldr	r3, [pc, #144]	; (800ad90 <vTaskSwitchContext+0xb0>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	60fb      	str	r3, [r7, #12]
 800ad02:	e010      	b.n	800ad26 <vTaskSwitchContext+0x46>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10a      	bne.n	800ad20 <vTaskSwitchContext+0x40>
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	607b      	str	r3, [r7, #4]
}
 800ad1c:	bf00      	nop
 800ad1e:	e7fe      	b.n	800ad1e <vTaskSwitchContext+0x3e>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	491b      	ldr	r1, [pc, #108]	; (800ad94 <vTaskSwitchContext+0xb4>)
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	440b      	add	r3, r1
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0e4      	beq.n	800ad04 <vTaskSwitchContext+0x24>
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4a13      	ldr	r2, [pc, #76]	; (800ad94 <vTaskSwitchContext+0xb4>)
 800ad46:	4413      	add	r3, r2
 800ad48:	60bb      	str	r3, [r7, #8]
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	605a      	str	r2, [r3, #4]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d104      	bne.n	800ad6a <vTaskSwitchContext+0x8a>
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	605a      	str	r2, [r3, #4]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	4a09      	ldr	r2, [pc, #36]	; (800ad98 <vTaskSwitchContext+0xb8>)
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	4a06      	ldr	r2, [pc, #24]	; (800ad90 <vTaskSwitchContext+0xb0>)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6013      	str	r3, [r2, #0]
}
 800ad7a:	bf00      	nop
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	2000141c 	.word	0x2000141c
 800ad8c:	20001408 	.word	0x20001408
 800ad90:	200013fc 	.word	0x200013fc
 800ad94:	20000f24 	.word	0x20000f24
 800ad98:	20000f20 	.word	0x20000f20

0800ad9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	60fb      	str	r3, [r7, #12]
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adc2:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <vTaskPlaceOnEventList+0x44>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3318      	adds	r3, #24
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7fe fe93 	bl	8009af6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800add0:	2101      	movs	r1, #1
 800add2:	6838      	ldr	r0, [r7, #0]
 800add4:	f000 fc4a 	bl	800b66c <prvAddCurrentTaskToDelayedList>
}
 800add8:	bf00      	nop
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	20000f20 	.word	0x20000f20

0800ade4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10a      	bne.n	800ae0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	617b      	str	r3, [r7, #20]
}
 800ae08:	bf00      	nop
 800ae0a:	e7fe      	b.n	800ae0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <vTaskPlaceOnEventListRestricted+0x54>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3318      	adds	r3, #24
 800ae12:	4619      	mov	r1, r3
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7fe fe4a 	bl	8009aae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ae20:	f04f 33ff 	mov.w	r3, #4294967295
 800ae24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	68b8      	ldr	r0, [r7, #8]
 800ae2a:	f000 fc1f 	bl	800b66c <prvAddCurrentTaskToDelayedList>
	}
 800ae2e:	bf00      	nop
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20000f20 	.word	0x20000f20

0800ae3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10a      	bne.n	800ae68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	60fb      	str	r3, [r7, #12]
}
 800ae64:	bf00      	nop
 800ae66:	e7fe      	b.n	800ae66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	3318      	adds	r3, #24
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fe fe7b 	bl	8009b68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae72:	4b1e      	ldr	r3, [pc, #120]	; (800aeec <xTaskRemoveFromEventList+0xb0>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d11d      	bne.n	800aeb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fe72 	bl	8009b68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae88:	4b19      	ldr	r3, [pc, #100]	; (800aef0 <xTaskRemoveFromEventList+0xb4>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d903      	bls.n	800ae98 <xTaskRemoveFromEventList+0x5c>
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	4a16      	ldr	r2, [pc, #88]	; (800aef0 <xTaskRemoveFromEventList+0xb4>)
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4a13      	ldr	r2, [pc, #76]	; (800aef4 <xTaskRemoveFromEventList+0xb8>)
 800aea6:	441a      	add	r2, r3
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	4619      	mov	r1, r3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	f7fe fdfd 	bl	8009aae <vListInsertEnd>
 800aeb4:	e005      	b.n	800aec2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	3318      	adds	r3, #24
 800aeba:	4619      	mov	r1, r3
 800aebc:	480e      	ldr	r0, [pc, #56]	; (800aef8 <xTaskRemoveFromEventList+0xbc>)
 800aebe:	f7fe fdf6 	bl	8009aae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec6:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <xTaskRemoveFromEventList+0xc0>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aecc:	429a      	cmp	r2, r3
 800aece:	d905      	bls.n	800aedc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aed0:	2301      	movs	r3, #1
 800aed2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aed4:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <xTaskRemoveFromEventList+0xc4>)
 800aed6:	2201      	movs	r2, #1
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	e001      	b.n	800aee0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800aedc:	2300      	movs	r3, #0
 800aede:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800aee0:	697b      	ldr	r3, [r7, #20]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	2000141c 	.word	0x2000141c
 800aef0:	200013fc 	.word	0x200013fc
 800aef4:	20000f24 	.word	0x20000f24
 800aef8:	200013b4 	.word	0x200013b4
 800aefc:	20000f20 	.word	0x20000f20
 800af00:	20001408 	.word	0x20001408

0800af04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af0c:	4b06      	ldr	r3, [pc, #24]	; (800af28 <vTaskInternalSetTimeOutState+0x24>)
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af14:	4b05      	ldr	r3, [pc, #20]	; (800af2c <vTaskInternalSetTimeOutState+0x28>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	605a      	str	r2, [r3, #4]
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	2000140c 	.word	0x2000140c
 800af2c:	200013f8 	.word	0x200013f8

0800af30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b088      	sub	sp, #32
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10a      	bne.n	800af56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	613b      	str	r3, [r7, #16]
}
 800af52:	bf00      	nop
 800af54:	e7fe      	b.n	800af54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10a      	bne.n	800af72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	60fb      	str	r3, [r7, #12]
}
 800af6e:	bf00      	nop
 800af70:	e7fe      	b.n	800af70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800af72:	f001 f80f 	bl	800bf94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af76:	4b1d      	ldr	r3, [pc, #116]	; (800afec <xTaskCheckForTimeOut+0xbc>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8e:	d102      	bne.n	800af96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af90:	2300      	movs	r3, #0
 800af92:	61fb      	str	r3, [r7, #28]
 800af94:	e023      	b.n	800afde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	4b15      	ldr	r3, [pc, #84]	; (800aff0 <xTaskCheckForTimeOut+0xc0>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d007      	beq.n	800afb2 <xTaskCheckForTimeOut+0x82>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d302      	bcc.n	800afb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800afac:	2301      	movs	r3, #1
 800afae:	61fb      	str	r3, [r7, #28]
 800afb0:	e015      	b.n	800afde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d20b      	bcs.n	800afd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	1ad2      	subs	r2, r2, r3
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff ff9b 	bl	800af04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800afce:	2300      	movs	r3, #0
 800afd0:	61fb      	str	r3, [r7, #28]
 800afd2:	e004      	b.n	800afde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800afda:	2301      	movs	r3, #1
 800afdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800afde:	f001 f809 	bl	800bff4 <vPortExitCritical>

	return xReturn;
 800afe2:	69fb      	ldr	r3, [r7, #28]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3720      	adds	r7, #32
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	200013f8 	.word	0x200013f8
 800aff0:	2000140c 	.word	0x2000140c

0800aff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aff4:	b480      	push	{r7}
 800aff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aff8:	4b03      	ldr	r3, [pc, #12]	; (800b008 <vTaskMissedYield+0x14>)
 800affa:	2201      	movs	r2, #1
 800affc:	601a      	str	r2, [r3, #0]
}
 800affe:	bf00      	nop
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	20001408 	.word	0x20001408

0800b00c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b014:	f000 f852 	bl	800b0bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b018:	4b06      	ldr	r3, [pc, #24]	; (800b034 <prvIdleTask+0x28>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d9f9      	bls.n	800b014 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <prvIdleTask+0x2c>)
 800b022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b030:	e7f0      	b.n	800b014 <prvIdleTask+0x8>
 800b032:	bf00      	nop
 800b034:	20000f24 	.word	0x20000f24
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b042:	2300      	movs	r3, #0
 800b044:	607b      	str	r3, [r7, #4]
 800b046:	e00c      	b.n	800b062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	4613      	mov	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4413      	add	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4a12      	ldr	r2, [pc, #72]	; (800b09c <prvInitialiseTaskLists+0x60>)
 800b054:	4413      	add	r3, r2
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fcfc 	bl	8009a54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3301      	adds	r3, #1
 800b060:	607b      	str	r3, [r7, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b37      	cmp	r3, #55	; 0x37
 800b066:	d9ef      	bls.n	800b048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b068:	480d      	ldr	r0, [pc, #52]	; (800b0a0 <prvInitialiseTaskLists+0x64>)
 800b06a:	f7fe fcf3 	bl	8009a54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b06e:	480d      	ldr	r0, [pc, #52]	; (800b0a4 <prvInitialiseTaskLists+0x68>)
 800b070:	f7fe fcf0 	bl	8009a54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b074:	480c      	ldr	r0, [pc, #48]	; (800b0a8 <prvInitialiseTaskLists+0x6c>)
 800b076:	f7fe fced 	bl	8009a54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b07a:	480c      	ldr	r0, [pc, #48]	; (800b0ac <prvInitialiseTaskLists+0x70>)
 800b07c:	f7fe fcea 	bl	8009a54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b080:	480b      	ldr	r0, [pc, #44]	; (800b0b0 <prvInitialiseTaskLists+0x74>)
 800b082:	f7fe fce7 	bl	8009a54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b086:	4b0b      	ldr	r3, [pc, #44]	; (800b0b4 <prvInitialiseTaskLists+0x78>)
 800b088:	4a05      	ldr	r2, [pc, #20]	; (800b0a0 <prvInitialiseTaskLists+0x64>)
 800b08a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b08c:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <prvInitialiseTaskLists+0x7c>)
 800b08e:	4a05      	ldr	r2, [pc, #20]	; (800b0a4 <prvInitialiseTaskLists+0x68>)
 800b090:	601a      	str	r2, [r3, #0]
}
 800b092:	bf00      	nop
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20000f24 	.word	0x20000f24
 800b0a0:	20001384 	.word	0x20001384
 800b0a4:	20001398 	.word	0x20001398
 800b0a8:	200013b4 	.word	0x200013b4
 800b0ac:	200013c8 	.word	0x200013c8
 800b0b0:	200013e0 	.word	0x200013e0
 800b0b4:	200013ac 	.word	0x200013ac
 800b0b8:	200013b0 	.word	0x200013b0

0800b0bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0c2:	e019      	b.n	800b0f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b0c4:	f000 ff66 	bl	800bf94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b0c8:	4b10      	ldr	r3, [pc, #64]	; (800b10c <prvCheckTasksWaitingTermination+0x50>)
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fe fd47 	bl	8009b68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b0da:	4b0d      	ldr	r3, [pc, #52]	; (800b110 <prvCheckTasksWaitingTermination+0x54>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	4a0b      	ldr	r2, [pc, #44]	; (800b110 <prvCheckTasksWaitingTermination+0x54>)
 800b0e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b0e4:	4b0b      	ldr	r3, [pc, #44]	; (800b114 <prvCheckTasksWaitingTermination+0x58>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	4a0a      	ldr	r2, [pc, #40]	; (800b114 <prvCheckTasksWaitingTermination+0x58>)
 800b0ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b0ee:	f000 ff81 	bl	800bff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f810 	bl	800b118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0f8:	4b06      	ldr	r3, [pc, #24]	; (800b114 <prvCheckTasksWaitingTermination+0x58>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1e1      	bne.n	800b0c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b100:	bf00      	nop
 800b102:	bf00      	nop
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	200013c8 	.word	0x200013c8
 800b110:	200013f4 	.word	0x200013f4
 800b114:	200013dc 	.word	0x200013dc

0800b118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b126:	2b00      	cmp	r3, #0
 800b128:	d108      	bne.n	800b13c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12e:	4618      	mov	r0, r3
 800b130:	f001 f916 	bl	800c360 <vPortFree>
				vPortFree( pxTCB );
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f001 f913 	bl	800c360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b13a:	e018      	b.n	800b16e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b142:	2b01      	cmp	r3, #1
 800b144:	d103      	bne.n	800b14e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f001 f90a 	bl	800c360 <vPortFree>
	}
 800b14c:	e00f      	b.n	800b16e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b154:	2b02      	cmp	r3, #2
 800b156:	d00a      	beq.n	800b16e <prvDeleteTCB+0x56>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	60fb      	str	r3, [r7, #12]
}
 800b16a:	bf00      	nop
 800b16c:	e7fe      	b.n	800b16c <prvDeleteTCB+0x54>
	}
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
	...

0800b178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b17e:	4b0f      	ldr	r3, [pc, #60]	; (800b1bc <prvResetNextTaskUnblockTime+0x44>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d101      	bne.n	800b18c <prvResetNextTaskUnblockTime+0x14>
 800b188:	2301      	movs	r3, #1
 800b18a:	e000      	b.n	800b18e <prvResetNextTaskUnblockTime+0x16>
 800b18c:	2300      	movs	r3, #0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d004      	beq.n	800b19c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b192:	4b0b      	ldr	r3, [pc, #44]	; (800b1c0 <prvResetNextTaskUnblockTime+0x48>)
 800b194:	f04f 32ff 	mov.w	r2, #4294967295
 800b198:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b19a:	e008      	b.n	800b1ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b19c:	4b07      	ldr	r3, [pc, #28]	; (800b1bc <prvResetNextTaskUnblockTime+0x44>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	4a05      	ldr	r2, [pc, #20]	; (800b1c0 <prvResetNextTaskUnblockTime+0x48>)
 800b1ac:	6013      	str	r3, [r2, #0]
}
 800b1ae:	bf00      	nop
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	200013ac 	.word	0x200013ac
 800b1c0:	20001414 	.word	0x20001414

0800b1c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b1ca:	4b0b      	ldr	r3, [pc, #44]	; (800b1f8 <xTaskGetSchedulerState+0x34>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d102      	bne.n	800b1d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	607b      	str	r3, [r7, #4]
 800b1d6:	e008      	b.n	800b1ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1d8:	4b08      	ldr	r3, [pc, #32]	; (800b1fc <xTaskGetSchedulerState+0x38>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d102      	bne.n	800b1e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	607b      	str	r3, [r7, #4]
 800b1e4:	e001      	b.n	800b1ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b1ea:	687b      	ldr	r3, [r7, #4]
	}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	20001400 	.word	0x20001400
 800b1fc:	2000141c 	.word	0x2000141c

0800b200 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b20c:	2300      	movs	r3, #0
 800b20e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d056      	beq.n	800b2c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b216:	4b2e      	ldr	r3, [pc, #184]	; (800b2d0 <xTaskPriorityDisinherit+0xd0>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d00a      	beq.n	800b236 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	60fb      	str	r3, [r7, #12]
}
 800b232:	bf00      	nop
 800b234:	e7fe      	b.n	800b234 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10a      	bne.n	800b254 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	60bb      	str	r3, [r7, #8]
}
 800b250:	bf00      	nop
 800b252:	e7fe      	b.n	800b252 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b258:	1e5a      	subs	r2, r3, #1
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b266:	429a      	cmp	r2, r3
 800b268:	d02c      	beq.n	800b2c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d128      	bne.n	800b2c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	3304      	adds	r3, #4
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe fc76 	bl	8009b68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b288:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b294:	4b0f      	ldr	r3, [pc, #60]	; (800b2d4 <xTaskPriorityDisinherit+0xd4>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d903      	bls.n	800b2a4 <xTaskPriorityDisinherit+0xa4>
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	4a0c      	ldr	r2, [pc, #48]	; (800b2d4 <xTaskPriorityDisinherit+0xd4>)
 800b2a2:	6013      	str	r3, [r2, #0]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4a09      	ldr	r2, [pc, #36]	; (800b2d8 <xTaskPriorityDisinherit+0xd8>)
 800b2b2:	441a      	add	r2, r3
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	f7fe fbf7 	bl	8009aae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2c4:	697b      	ldr	r3, [r7, #20]
	}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000f20 	.word	0x20000f20
 800b2d4:	200013fc 	.word	0x200013fc
 800b2d8:	20000f24 	.word	0x20000f24

0800b2dc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b2ea:	f000 fe53 	bl	800bf94 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b2ee:	4b26      	ldr	r3, [pc, #152]	; (800b388 <xTaskNotifyWait+0xac>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d01a      	beq.n	800b332 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b2fc:	4b22      	ldr	r3, [pc, #136]	; (800b388 <xTaskNotifyWait+0xac>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	43d2      	mvns	r2, r2
 800b306:	400a      	ands	r2, r1
 800b308:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b30a:	4b1f      	ldr	r3, [pc, #124]	; (800b388 <xTaskNotifyWait+0xac>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00b      	beq.n	800b332 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b31a:	2101      	movs	r1, #1
 800b31c:	6838      	ldr	r0, [r7, #0]
 800b31e:	f000 f9a5 	bl	800b66c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b322:	4b1a      	ldr	r3, [pc, #104]	; (800b38c <xTaskNotifyWait+0xb0>)
 800b324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b332:	f000 fe5f 	bl	800bff4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b336:	f000 fe2d 	bl	800bf94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d004      	beq.n	800b34a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b340:	4b11      	ldr	r3, [pc, #68]	; (800b388 <xTaskNotifyWait+0xac>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b34a:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <xTaskNotifyWait+0xac>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b02      	cmp	r3, #2
 800b356:	d002      	beq.n	800b35e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b358:	2300      	movs	r3, #0
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	e008      	b.n	800b370 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b35e:	4b0a      	ldr	r3, [pc, #40]	; (800b388 <xTaskNotifyWait+0xac>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	43d2      	mvns	r2, r2
 800b368:	400a      	ands	r2, r1
 800b36a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800b36c:	2301      	movs	r3, #1
 800b36e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b370:	4b05      	ldr	r3, [pc, #20]	; (800b388 <xTaskNotifyWait+0xac>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b37a:	f000 fe3b 	bl	800bff4 <vPortExitCritical>

		return xReturn;
 800b37e:	697b      	ldr	r3, [r7, #20]
	}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	20000f20 	.word	0x20000f20
 800b38c:	e000ed04 	.word	0xe000ed04

0800b390 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08a      	sub	sp, #40	; 0x28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	603b      	str	r3, [r7, #0]
 800b39c:	4613      	mov	r3, r2
 800b39e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10a      	bne.n	800b3c0 <xTaskGenericNotify+0x30>
	__asm volatile
 800b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ae:	f383 8811 	msr	BASEPRI, r3
 800b3b2:	f3bf 8f6f 	isb	sy
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	61bb      	str	r3, [r7, #24]
}
 800b3bc:	bf00      	nop
 800b3be:	e7fe      	b.n	800b3be <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b3c4:	f000 fde6 	bl	800bf94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b3dc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b3e6:	79fb      	ldrb	r3, [r7, #7]
 800b3e8:	2b04      	cmp	r3, #4
 800b3ea:	d828      	bhi.n	800b43e <xTaskGenericNotify+0xae>
 800b3ec:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <xTaskGenericNotify+0x64>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b43f 	.word	0x0800b43f
 800b3f8:	0800b409 	.word	0x0800b409
 800b3fc:	0800b417 	.word	0x0800b417
 800b400:	0800b423 	.word	0x0800b423
 800b404:	0800b42b 	.word	0x0800b42b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	431a      	orrs	r2, r3
 800b410:	6a3b      	ldr	r3, [r7, #32]
 800b412:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b414:	e013      	b.n	800b43e <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b416:	6a3b      	ldr	r3, [r7, #32]
 800b418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b420:	e00d      	b.n	800b43e <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b428:	e009      	b.n	800b43e <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b42a:	7ffb      	ldrb	r3, [r7, #31]
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d003      	beq.n	800b438 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b430:	6a3b      	ldr	r3, [r7, #32]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b436:	e001      	b.n	800b43c <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 800b438:	2300      	movs	r3, #0
 800b43a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b43c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b43e:	7ffb      	ldrb	r3, [r7, #31]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d13a      	bne.n	800b4ba <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	3304      	adds	r3, #4
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe fb8d 	bl	8009b68 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b44e:	6a3b      	ldr	r3, [r7, #32]
 800b450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b452:	4b1d      	ldr	r3, [pc, #116]	; (800b4c8 <xTaskGenericNotify+0x138>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	429a      	cmp	r2, r3
 800b458:	d903      	bls.n	800b462 <xTaskGenericNotify+0xd2>
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	4a1a      	ldr	r2, [pc, #104]	; (800b4c8 <xTaskGenericNotify+0x138>)
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b466:	4613      	mov	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4a17      	ldr	r2, [pc, #92]	; (800b4cc <xTaskGenericNotify+0x13c>)
 800b470:	441a      	add	r2, r3
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	3304      	adds	r3, #4
 800b476:	4619      	mov	r1, r3
 800b478:	4610      	mov	r0, r2
 800b47a:	f7fe fb18 	bl	8009aae <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b47e:	6a3b      	ldr	r3, [r7, #32]
 800b480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00a      	beq.n	800b49c <xTaskGenericNotify+0x10c>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	617b      	str	r3, [r7, #20]
}
 800b498:	bf00      	nop
 800b49a:	e7fe      	b.n	800b49a <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b49c:	6a3b      	ldr	r3, [r7, #32]
 800b49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a0:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <xTaskGenericNotify+0x140>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d907      	bls.n	800b4ba <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b4aa:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <xTaskGenericNotify+0x144>)
 800b4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b4ba:	f000 fd9b 	bl	800bff4 <vPortExitCritical>

		return xReturn;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3728      	adds	r7, #40	; 0x28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	200013fc 	.word	0x200013fc
 800b4cc:	20000f24 	.word	0x20000f24
 800b4d0:	20000f20 	.word	0x20000f20
 800b4d4:	e000ed04 	.word	0xe000ed04

0800b4d8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08e      	sub	sp, #56	; 0x38
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	603b      	str	r3, [r7, #0]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10a      	bne.n	800b508 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b504:	bf00      	nop
 800b506:	e7fe      	b.n	800b506 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b508:	f000 fe26 	bl	800c158 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b510:	f3ef 8211 	mrs	r2, BASEPRI
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	623a      	str	r2, [r7, #32]
 800b526:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b528:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b52a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	2202      	movs	r2, #2
 800b548:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b54c:	79fb      	ldrb	r3, [r7, #7]
 800b54e:	2b04      	cmp	r3, #4
 800b550:	d828      	bhi.n	800b5a4 <xTaskGenericNotifyFromISR+0xcc>
 800b552:	a201      	add	r2, pc, #4	; (adr r2, 800b558 <xTaskGenericNotifyFromISR+0x80>)
 800b554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b558:	0800b5a5 	.word	0x0800b5a5
 800b55c:	0800b56d 	.word	0x0800b56d
 800b560:	0800b57b 	.word	0x0800b57b
 800b564:	0800b587 	.word	0x0800b587
 800b568:	0800b58f 	.word	0x0800b58f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	431a      	orrs	r2, r3
 800b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b576:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b578:	e014      	b.n	800b5a4 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b582:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b584:	e00e      	b.n	800b5a4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b58c:	e00a      	b.n	800b5a4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b58e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b592:	2b02      	cmp	r3, #2
 800b594:	d003      	beq.n	800b59e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b59c:	e001      	b.n	800b5a2 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b5a2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b5a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d147      	bne.n	800b63c <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00a      	beq.n	800b5ca <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	61bb      	str	r3, [r7, #24]
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5ca:	4b22      	ldr	r3, [pc, #136]	; (800b654 <xTaskGenericNotifyFromISR+0x17c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d11d      	bne.n	800b60e <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fac6 	bl	8009b68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e0:	4b1d      	ldr	r3, [pc, #116]	; (800b658 <xTaskGenericNotifyFromISR+0x180>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d903      	bls.n	800b5f0 <xTaskGenericNotifyFromISR+0x118>
 800b5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ec:	4a1a      	ldr	r2, [pc, #104]	; (800b658 <xTaskGenericNotifyFromISR+0x180>)
 800b5ee:	6013      	str	r3, [r2, #0]
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4a17      	ldr	r2, [pc, #92]	; (800b65c <xTaskGenericNotifyFromISR+0x184>)
 800b5fe:	441a      	add	r2, r3
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	3304      	adds	r3, #4
 800b604:	4619      	mov	r1, r3
 800b606:	4610      	mov	r0, r2
 800b608:	f7fe fa51 	bl	8009aae <vListInsertEnd>
 800b60c:	e005      	b.n	800b61a <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	3318      	adds	r3, #24
 800b612:	4619      	mov	r1, r3
 800b614:	4812      	ldr	r0, [pc, #72]	; (800b660 <xTaskGenericNotifyFromISR+0x188>)
 800b616:	f7fe fa4a 	bl	8009aae <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61e:	4b11      	ldr	r3, [pc, #68]	; (800b664 <xTaskGenericNotifyFromISR+0x18c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	429a      	cmp	r2, r3
 800b626:	d909      	bls.n	800b63c <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b630:	2201      	movs	r2, #1
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	e002      	b.n	800b63c <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800b636:	4b0c      	ldr	r3, [pc, #48]	; (800b668 <xTaskGenericNotifyFromISR+0x190>)
 800b638:	2201      	movs	r2, #1
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	f383 8811 	msr	BASEPRI, r3
}
 800b646:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3738      	adds	r7, #56	; 0x38
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	2000141c 	.word	0x2000141c
 800b658:	200013fc 	.word	0x200013fc
 800b65c:	20000f24 	.word	0x20000f24
 800b660:	200013b4 	.word	0x200013b4
 800b664:	20000f20 	.word	0x20000f20
 800b668:	20001408 	.word	0x20001408

0800b66c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b676:	4b21      	ldr	r3, [pc, #132]	; (800b6fc <prvAddCurrentTaskToDelayedList+0x90>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b67c:	4b20      	ldr	r3, [pc, #128]	; (800b700 <prvAddCurrentTaskToDelayedList+0x94>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3304      	adds	r3, #4
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fa70 	bl	8009b68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68e:	d10a      	bne.n	800b6a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d007      	beq.n	800b6a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b696:	4b1a      	ldr	r3, [pc, #104]	; (800b700 <prvAddCurrentTaskToDelayedList+0x94>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3304      	adds	r3, #4
 800b69c:	4619      	mov	r1, r3
 800b69e:	4819      	ldr	r0, [pc, #100]	; (800b704 <prvAddCurrentTaskToDelayedList+0x98>)
 800b6a0:	f7fe fa05 	bl	8009aae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6a4:	e026      	b.n	800b6f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6ae:	4b14      	ldr	r3, [pc, #80]	; (800b700 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d209      	bcs.n	800b6d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6be:	4b12      	ldr	r3, [pc, #72]	; (800b708 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	f7fe fa13 	bl	8009af6 <vListInsert>
}
 800b6d0:	e010      	b.n	800b6f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6d2:	4b0e      	ldr	r3, [pc, #56]	; (800b70c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	4b0a      	ldr	r3, [pc, #40]	; (800b700 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4610      	mov	r0, r2
 800b6e0:	f7fe fa09 	bl	8009af6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d202      	bcs.n	800b6f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6ee:	4a08      	ldr	r2, [pc, #32]	; (800b710 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	6013      	str	r3, [r2, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	200013f8 	.word	0x200013f8
 800b700:	20000f20 	.word	0x20000f20
 800b704:	200013e0 	.word	0x200013e0
 800b708:	200013b0 	.word	0x200013b0
 800b70c:	200013ac 	.word	0x200013ac
 800b710:	20001414 	.word	0x20001414

0800b714 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b08a      	sub	sp, #40	; 0x28
 800b718:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b71e:	f000 facb 	bl	800bcb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b722:	4b1c      	ldr	r3, [pc, #112]	; (800b794 <xTimerCreateTimerTask+0x80>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d021      	beq.n	800b76e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b72e:	2300      	movs	r3, #0
 800b730:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b732:	1d3a      	adds	r2, r7, #4
 800b734:	f107 0108 	add.w	r1, r7, #8
 800b738:	f107 030c 	add.w	r3, r7, #12
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fe f96f 	bl	8009a20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b742:	6879      	ldr	r1, [r7, #4]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	9202      	str	r2, [sp, #8]
 800b74a:	9301      	str	r3, [sp, #4]
 800b74c:	2302      	movs	r3, #2
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	2300      	movs	r3, #0
 800b752:	460a      	mov	r2, r1
 800b754:	4910      	ldr	r1, [pc, #64]	; (800b798 <xTimerCreateTimerTask+0x84>)
 800b756:	4811      	ldr	r0, [pc, #68]	; (800b79c <xTimerCreateTimerTask+0x88>)
 800b758:	f7fe ff16 	bl	800a588 <xTaskCreateStatic>
 800b75c:	4603      	mov	r3, r0
 800b75e:	4a10      	ldr	r2, [pc, #64]	; (800b7a0 <xTimerCreateTimerTask+0x8c>)
 800b760:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b762:	4b0f      	ldr	r3, [pc, #60]	; (800b7a0 <xTimerCreateTimerTask+0x8c>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d001      	beq.n	800b76e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b76a:	2301      	movs	r3, #1
 800b76c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10a      	bne.n	800b78a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	613b      	str	r3, [r7, #16]
}
 800b786:	bf00      	nop
 800b788:	e7fe      	b.n	800b788 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b78a:	697b      	ldr	r3, [r7, #20]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3718      	adds	r7, #24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20001450 	.word	0x20001450
 800b798:	0800f2a8 	.word	0x0800f2a8
 800b79c:	0800b8c1 	.word	0x0800b8c1
 800b7a0:	20001454 	.word	0x20001454

0800b7a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b08a      	sub	sp, #40	; 0x28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
 800b7b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10a      	bne.n	800b7d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	623b      	str	r3, [r7, #32]
}
 800b7ce:	bf00      	nop
 800b7d0:	e7fe      	b.n	800b7d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b7d2:	4b1a      	ldr	r3, [pc, #104]	; (800b83c <xTimerGenericCommand+0x98>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d02a      	beq.n	800b830 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	2b05      	cmp	r3, #5
 800b7ea:	dc18      	bgt.n	800b81e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7ec:	f7ff fcea 	bl	800b1c4 <xTaskGetSchedulerState>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d109      	bne.n	800b80a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7f6:	4b11      	ldr	r3, [pc, #68]	; (800b83c <xTimerGenericCommand+0x98>)
 800b7f8:	6818      	ldr	r0, [r3, #0]
 800b7fa:	f107 0110 	add.w	r1, r7, #16
 800b7fe:	2300      	movs	r3, #0
 800b800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b802:	f7fe fadd 	bl	8009dc0 <xQueueGenericSend>
 800b806:	6278      	str	r0, [r7, #36]	; 0x24
 800b808:	e012      	b.n	800b830 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b80a:	4b0c      	ldr	r3, [pc, #48]	; (800b83c <xTimerGenericCommand+0x98>)
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	f107 0110 	add.w	r1, r7, #16
 800b812:	2300      	movs	r3, #0
 800b814:	2200      	movs	r2, #0
 800b816:	f7fe fad3 	bl	8009dc0 <xQueueGenericSend>
 800b81a:	6278      	str	r0, [r7, #36]	; 0x24
 800b81c:	e008      	b.n	800b830 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b81e:	4b07      	ldr	r3, [pc, #28]	; (800b83c <xTimerGenericCommand+0x98>)
 800b820:	6818      	ldr	r0, [r3, #0]
 800b822:	f107 0110 	add.w	r1, r7, #16
 800b826:	2300      	movs	r3, #0
 800b828:	683a      	ldr	r2, [r7, #0]
 800b82a:	f7fe fbc7 	bl	8009fbc <xQueueGenericSendFromISR>
 800b82e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b832:	4618      	mov	r0, r3
 800b834:	3728      	adds	r7, #40	; 0x28
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20001450 	.word	0x20001450

0800b840 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af02      	add	r7, sp, #8
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b84a:	4b1c      	ldr	r3, [pc, #112]	; (800b8bc <prvProcessExpiredTimer+0x7c>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	3304      	adds	r3, #4
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fe f985 	bl	8009b68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d122      	bne.n	800b8ac <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	699a      	ldr	r2, [r3, #24]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	18d1      	adds	r1, r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	6978      	ldr	r0, [r7, #20]
 800b874:	f000 f8c8 	bl	800ba08 <prvInsertTimerInActiveList>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d016      	beq.n	800b8ac <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b87e:	2300      	movs	r3, #0
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	2300      	movs	r3, #0
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	2100      	movs	r1, #0
 800b888:	6978      	ldr	r0, [r7, #20]
 800b88a:	f7ff ff8b 	bl	800b7a4 <xTimerGenericCommand>
 800b88e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10a      	bne.n	800b8ac <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	60fb      	str	r3, [r7, #12]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b0:	6978      	ldr	r0, [r7, #20]
 800b8b2:	4798      	blx	r3
}
 800b8b4:	bf00      	nop
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	20001448 	.word	0x20001448

0800b8c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8c8:	f107 0308 	add.w	r3, r7, #8
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 f857 	bl	800b980 <prvGetNextExpireTime>
 800b8d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 f803 	bl	800b8e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8de:	f000 f8d5 	bl	800ba8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8e2:	e7f1      	b.n	800b8c8 <prvTimerTask+0x8>

0800b8e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8ee:	f7ff f87d 	bl	800a9ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8f2:	f107 0308 	add.w	r3, r7, #8
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 f866 	bl	800b9c8 <prvSampleTimeNow>
 800b8fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d130      	bne.n	800b966 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <prvProcessTimerOrBlockTask+0x3c>
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d806      	bhi.n	800b920 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b912:	f7ff f879 	bl	800aa08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b916:	68f9      	ldr	r1, [r7, #12]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff ff91 	bl	800b840 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b91e:	e024      	b.n	800b96a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d008      	beq.n	800b938 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b926:	4b13      	ldr	r3, [pc, #76]	; (800b974 <prvProcessTimerOrBlockTask+0x90>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bf0c      	ite	eq
 800b930:	2301      	moveq	r3, #1
 800b932:	2300      	movne	r3, #0
 800b934:	b2db      	uxtb	r3, r3
 800b936:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b938:	4b0f      	ldr	r3, [pc, #60]	; (800b978 <prvProcessTimerOrBlockTask+0x94>)
 800b93a:	6818      	ldr	r0, [r3, #0]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	4619      	mov	r1, r3
 800b946:	f7fe fdeb 	bl	800a520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b94a:	f7ff f85d 	bl	800aa08 <xTaskResumeAll>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10a      	bne.n	800b96a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b954:	4b09      	ldr	r3, [pc, #36]	; (800b97c <prvProcessTimerOrBlockTask+0x98>)
 800b956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	f3bf 8f6f 	isb	sy
}
 800b964:	e001      	b.n	800b96a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b966:	f7ff f84f 	bl	800aa08 <xTaskResumeAll>
}
 800b96a:	bf00      	nop
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	2000144c 	.word	0x2000144c
 800b978:	20001450 	.word	0x20001450
 800b97c:	e000ed04 	.word	0xe000ed04

0800b980 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b988:	4b0e      	ldr	r3, [pc, #56]	; (800b9c4 <prvGetNextExpireTime+0x44>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	bf0c      	ite	eq
 800b992:	2301      	moveq	r3, #1
 800b994:	2300      	movne	r3, #0
 800b996:	b2db      	uxtb	r3, r3
 800b998:	461a      	mov	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d105      	bne.n	800b9b2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9a6:	4b07      	ldr	r3, [pc, #28]	; (800b9c4 <prvGetNextExpireTime+0x44>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	60fb      	str	r3, [r7, #12]
 800b9b0:	e001      	b.n	800b9b6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr
 800b9c4:	20001448 	.word	0x20001448

0800b9c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9d0:	f7ff f8b8 	bl	800ab44 <xTaskGetTickCount>
 800b9d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <prvSampleTimeNow+0x3c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d205      	bcs.n	800b9ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9e0:	f000 f908 	bl	800bbf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]
 800b9ea:	e002      	b.n	800b9f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9f2:	4a04      	ldr	r2, [pc, #16]	; (800ba04 <prvSampleTimeNow+0x3c>)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	20001458 	.word	0x20001458

0800ba08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b086      	sub	sp, #24
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba16:	2300      	movs	r3, #0
 800ba18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d812      	bhi.n	800ba54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	1ad2      	subs	r2, r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d302      	bcc.n	800ba42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	617b      	str	r3, [r7, #20]
 800ba40:	e01b      	b.n	800ba7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba42:	4b10      	ldr	r3, [pc, #64]	; (800ba84 <prvInsertTimerInActiveList+0x7c>)
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	3304      	adds	r3, #4
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	f7fe f852 	bl	8009af6 <vListInsert>
 800ba52:	e012      	b.n	800ba7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d206      	bcs.n	800ba6a <prvInsertTimerInActiveList+0x62>
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d302      	bcc.n	800ba6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba64:	2301      	movs	r3, #1
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	e007      	b.n	800ba7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba6a:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <prvInsertTimerInActiveList+0x80>)
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3304      	adds	r3, #4
 800ba72:	4619      	mov	r1, r3
 800ba74:	4610      	mov	r0, r2
 800ba76:	f7fe f83e 	bl	8009af6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba7a:	697b      	ldr	r3, [r7, #20]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	2000144c 	.word	0x2000144c
 800ba88:	20001448 	.word	0x20001448

0800ba8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08e      	sub	sp, #56	; 0x38
 800ba90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba92:	e09d      	b.n	800bbd0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	da18      	bge.n	800bacc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba9a:	1d3b      	adds	r3, r7, #4
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800baa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10a      	bne.n	800babc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	61fb      	str	r3, [r7, #28]
}
 800bab8:	bf00      	nop
 800baba:	e7fe      	b.n	800baba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bac2:	6850      	ldr	r0, [r2, #4]
 800bac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bac6:	6892      	ldr	r2, [r2, #8]
 800bac8:	4611      	mov	r1, r2
 800baca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	db7d      	blt.n	800bbce <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d004      	beq.n	800bae8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	3304      	adds	r3, #4
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe f840 	bl	8009b68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bae8:	463b      	mov	r3, r7
 800baea:	4618      	mov	r0, r3
 800baec:	f7ff ff6c 	bl	800b9c8 <prvSampleTimeNow>
 800baf0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b09      	cmp	r3, #9
 800baf6:	d86b      	bhi.n	800bbd0 <prvProcessReceivedCommands+0x144>
 800baf8:	a201      	add	r2, pc, #4	; (adr r2, 800bb00 <prvProcessReceivedCommands+0x74>)
 800bafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafe:	bf00      	nop
 800bb00:	0800bb29 	.word	0x0800bb29
 800bb04:	0800bb29 	.word	0x0800bb29
 800bb08:	0800bb29 	.word	0x0800bb29
 800bb0c:	0800bbd1 	.word	0x0800bbd1
 800bb10:	0800bb85 	.word	0x0800bb85
 800bb14:	0800bbbd 	.word	0x0800bbbd
 800bb18:	0800bb29 	.word	0x0800bb29
 800bb1c:	0800bb29 	.word	0x0800bb29
 800bb20:	0800bbd1 	.word	0x0800bbd1
 800bb24:	0800bb85 	.word	0x0800bb85
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	18d1      	adds	r1, r2, r3
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb36:	f7ff ff67 	bl	800ba08 <prvInsertTimerInActiveList>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d047      	beq.n	800bbd0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb46:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	69db      	ldr	r3, [r3, #28]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d13f      	bne.n	800bbd0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb54:	699b      	ldr	r3, [r3, #24]
 800bb56:	441a      	add	r2, r3
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	2100      	movs	r1, #0
 800bb60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb62:	f7ff fe1f 	bl	800b7a4 <xTimerGenericCommand>
 800bb66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb68:	6a3b      	ldr	r3, [r7, #32]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d130      	bne.n	800bbd0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	61bb      	str	r3, [r7, #24]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10a      	bne.n	800bba8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	617b      	str	r3, [r7, #20]
}
 800bba4:	bf00      	nop
 800bba6:	e7fe      	b.n	800bba6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbaa:	699a      	ldr	r2, [r3, #24]
 800bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbae:	18d1      	adds	r1, r2, r3
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbb6:	f7ff ff27 	bl	800ba08 <prvInsertTimerInActiveList>
					break;
 800bbba:	e009      	b.n	800bbd0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d104      	bne.n	800bbd0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800bbc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbc8:	f000 fbca 	bl	800c360 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bbcc:	e000      	b.n	800bbd0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bbce:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbd0:	4b07      	ldr	r3, [pc, #28]	; (800bbf0 <prvProcessReceivedCommands+0x164>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	1d39      	adds	r1, r7, #4
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe fa87 	bl	800a0ec <xQueueReceive>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f47f af57 	bne.w	800ba94 <prvProcessReceivedCommands+0x8>
	}
}
 800bbe6:	bf00      	nop
 800bbe8:	bf00      	nop
 800bbea:	3730      	adds	r7, #48	; 0x30
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	20001450 	.word	0x20001450

0800bbf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b088      	sub	sp, #32
 800bbf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbfa:	e045      	b.n	800bc88 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbfc:	4b2c      	ldr	r3, [pc, #176]	; (800bcb0 <prvSwitchTimerLists+0xbc>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc06:	4b2a      	ldr	r3, [pc, #168]	; (800bcb0 <prvSwitchTimerLists+0xbc>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	3304      	adds	r3, #4
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fd ffa7 	bl	8009b68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	69db      	ldr	r3, [r3, #28]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d12e      	bne.n	800bc88 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	4413      	add	r3, r2
 800bc32:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d90e      	bls.n	800bc5a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc48:	4b19      	ldr	r3, [pc, #100]	; (800bcb0 <prvSwitchTimerLists+0xbc>)
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4619      	mov	r1, r3
 800bc52:	4610      	mov	r0, r2
 800bc54:	f7fd ff4f 	bl	8009af6 <vListInsert>
 800bc58:	e016      	b.n	800bc88 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	2100      	movs	r1, #0
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f7ff fd9d 	bl	800b7a4 <xTimerGenericCommand>
 800bc6a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10a      	bne.n	800bc88 <prvSwitchTimerLists+0x94>
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	603b      	str	r3, [r7, #0]
}
 800bc84:	bf00      	nop
 800bc86:	e7fe      	b.n	800bc86 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc88:	4b09      	ldr	r3, [pc, #36]	; (800bcb0 <prvSwitchTimerLists+0xbc>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1b4      	bne.n	800bbfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bc92:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <prvSwitchTimerLists+0xbc>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bc98:	4b06      	ldr	r3, [pc, #24]	; (800bcb4 <prvSwitchTimerLists+0xc0>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a04      	ldr	r2, [pc, #16]	; (800bcb0 <prvSwitchTimerLists+0xbc>)
 800bc9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bca0:	4a04      	ldr	r2, [pc, #16]	; (800bcb4 <prvSwitchTimerLists+0xc0>)
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	6013      	str	r3, [r2, #0]
}
 800bca6:	bf00      	nop
 800bca8:	3718      	adds	r7, #24
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	20001448 	.word	0x20001448
 800bcb4:	2000144c 	.word	0x2000144c

0800bcb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bcbe:	f000 f969 	bl	800bf94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bcc2:	4b15      	ldr	r3, [pc, #84]	; (800bd18 <prvCheckForValidListAndQueue+0x60>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d120      	bne.n	800bd0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bcca:	4814      	ldr	r0, [pc, #80]	; (800bd1c <prvCheckForValidListAndQueue+0x64>)
 800bccc:	f7fd fec2 	bl	8009a54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bcd0:	4813      	ldr	r0, [pc, #76]	; (800bd20 <prvCheckForValidListAndQueue+0x68>)
 800bcd2:	f7fd febf 	bl	8009a54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bcd6:	4b13      	ldr	r3, [pc, #76]	; (800bd24 <prvCheckForValidListAndQueue+0x6c>)
 800bcd8:	4a10      	ldr	r2, [pc, #64]	; (800bd1c <prvCheckForValidListAndQueue+0x64>)
 800bcda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bcdc:	4b12      	ldr	r3, [pc, #72]	; (800bd28 <prvCheckForValidListAndQueue+0x70>)
 800bcde:	4a10      	ldr	r2, [pc, #64]	; (800bd20 <prvCheckForValidListAndQueue+0x68>)
 800bce0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bce2:	2300      	movs	r3, #0
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	4b11      	ldr	r3, [pc, #68]	; (800bd2c <prvCheckForValidListAndQueue+0x74>)
 800bce8:	4a11      	ldr	r2, [pc, #68]	; (800bd30 <prvCheckForValidListAndQueue+0x78>)
 800bcea:	2110      	movs	r1, #16
 800bcec:	200a      	movs	r0, #10
 800bcee:	f7fd ffcd 	bl	8009c8c <xQueueGenericCreateStatic>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	4a08      	ldr	r2, [pc, #32]	; (800bd18 <prvCheckForValidListAndQueue+0x60>)
 800bcf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bcf8:	4b07      	ldr	r3, [pc, #28]	; (800bd18 <prvCheckForValidListAndQueue+0x60>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d005      	beq.n	800bd0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd00:	4b05      	ldr	r3, [pc, #20]	; (800bd18 <prvCheckForValidListAndQueue+0x60>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	490b      	ldr	r1, [pc, #44]	; (800bd34 <prvCheckForValidListAndQueue+0x7c>)
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fe fbe0 	bl	800a4cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd0c:	f000 f972 	bl	800bff4 <vPortExitCritical>
}
 800bd10:	bf00      	nop
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20001450 	.word	0x20001450
 800bd1c:	20001420 	.word	0x20001420
 800bd20:	20001434 	.word	0x20001434
 800bd24:	20001448 	.word	0x20001448
 800bd28:	2000144c 	.word	0x2000144c
 800bd2c:	200014fc 	.word	0x200014fc
 800bd30:	2000145c 	.word	0x2000145c
 800bd34:	0800f2b0 	.word	0x0800f2b0

0800bd38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3b04      	subs	r3, #4
 800bd48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	3b04      	subs	r3, #4
 800bd56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	f023 0201 	bic.w	r2, r3, #1
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	3b04      	subs	r3, #4
 800bd66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd68:	4a0c      	ldr	r2, [pc, #48]	; (800bd9c <pxPortInitialiseStack+0x64>)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3b14      	subs	r3, #20
 800bd72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	3b04      	subs	r3, #4
 800bd7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f06f 0202 	mvn.w	r2, #2
 800bd86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3b20      	subs	r3, #32
 800bd8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	0800bda1 	.word	0x0800bda1

0800bda0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdaa:	4b12      	ldr	r3, [pc, #72]	; (800bdf4 <prvTaskExitError+0x54>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb2:	d00a      	beq.n	800bdca <prvTaskExitError+0x2a>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	60fb      	str	r3, [r7, #12]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <prvTaskExitError+0x28>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	60bb      	str	r3, [r7, #8]
}
 800bddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bdde:	bf00      	nop
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d0fc      	beq.n	800bde0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bde6:	bf00      	nop
 800bde8:	bf00      	nop
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	20000024 	.word	0x20000024
	...

0800be00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be00:	4b07      	ldr	r3, [pc, #28]	; (800be20 <pxCurrentTCBConst2>)
 800be02:	6819      	ldr	r1, [r3, #0]
 800be04:	6808      	ldr	r0, [r1, #0]
 800be06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0a:	f380 8809 	msr	PSP, r0
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f04f 0000 	mov.w	r0, #0
 800be16:	f380 8811 	msr	BASEPRI, r0
 800be1a:	4770      	bx	lr
 800be1c:	f3af 8000 	nop.w

0800be20 <pxCurrentTCBConst2>:
 800be20:	20000f20 	.word	0x20000f20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be24:	bf00      	nop
 800be26:	bf00      	nop

0800be28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be28:	4808      	ldr	r0, [pc, #32]	; (800be4c <prvPortStartFirstTask+0x24>)
 800be2a:	6800      	ldr	r0, [r0, #0]
 800be2c:	6800      	ldr	r0, [r0, #0]
 800be2e:	f380 8808 	msr	MSP, r0
 800be32:	f04f 0000 	mov.w	r0, #0
 800be36:	f380 8814 	msr	CONTROL, r0
 800be3a:	b662      	cpsie	i
 800be3c:	b661      	cpsie	f
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	df00      	svc	0
 800be48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be4a:	bf00      	nop
 800be4c:	e000ed08 	.word	0xe000ed08

0800be50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be56:	4b46      	ldr	r3, [pc, #280]	; (800bf70 <xPortStartScheduler+0x120>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a46      	ldr	r2, [pc, #280]	; (800bf74 <xPortStartScheduler+0x124>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d10a      	bne.n	800be76 <xPortStartScheduler+0x26>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	613b      	str	r3, [r7, #16]
}
 800be72:	bf00      	nop
 800be74:	e7fe      	b.n	800be74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800be76:	4b3e      	ldr	r3, [pc, #248]	; (800bf70 <xPortStartScheduler+0x120>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a3f      	ldr	r2, [pc, #252]	; (800bf78 <xPortStartScheduler+0x128>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d10a      	bne.n	800be96 <xPortStartScheduler+0x46>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	60fb      	str	r3, [r7, #12]
}
 800be92:	bf00      	nop
 800be94:	e7fe      	b.n	800be94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be96:	4b39      	ldr	r3, [pc, #228]	; (800bf7c <xPortStartScheduler+0x12c>)
 800be98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	22ff      	movs	r2, #255	; 0xff
 800bea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	b2db      	uxtb	r3, r3
 800beae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800beb0:	78fb      	ldrb	r3, [r7, #3]
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	4b31      	ldr	r3, [pc, #196]	; (800bf80 <xPortStartScheduler+0x130>)
 800bebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bebe:	4b31      	ldr	r3, [pc, #196]	; (800bf84 <xPortStartScheduler+0x134>)
 800bec0:	2207      	movs	r2, #7
 800bec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bec4:	e009      	b.n	800beda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bec6:	4b2f      	ldr	r3, [pc, #188]	; (800bf84 <xPortStartScheduler+0x134>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3b01      	subs	r3, #1
 800becc:	4a2d      	ldr	r2, [pc, #180]	; (800bf84 <xPortStartScheduler+0x134>)
 800bece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bed0:	78fb      	ldrb	r3, [r7, #3]
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800beda:	78fb      	ldrb	r3, [r7, #3]
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bee2:	2b80      	cmp	r3, #128	; 0x80
 800bee4:	d0ef      	beq.n	800bec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bee6:	4b27      	ldr	r3, [pc, #156]	; (800bf84 <xPortStartScheduler+0x134>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f1c3 0307 	rsb	r3, r3, #7
 800beee:	2b04      	cmp	r3, #4
 800bef0:	d00a      	beq.n	800bf08 <xPortStartScheduler+0xb8>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	60bb      	str	r3, [r7, #8]
}
 800bf04:	bf00      	nop
 800bf06:	e7fe      	b.n	800bf06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf08:	4b1e      	ldr	r3, [pc, #120]	; (800bf84 <xPortStartScheduler+0x134>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	021b      	lsls	r3, r3, #8
 800bf0e:	4a1d      	ldr	r2, [pc, #116]	; (800bf84 <xPortStartScheduler+0x134>)
 800bf10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf12:	4b1c      	ldr	r3, [pc, #112]	; (800bf84 <xPortStartScheduler+0x134>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf1a:	4a1a      	ldr	r2, [pc, #104]	; (800bf84 <xPortStartScheduler+0x134>)
 800bf1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf26:	4b18      	ldr	r3, [pc, #96]	; (800bf88 <xPortStartScheduler+0x138>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a17      	ldr	r2, [pc, #92]	; (800bf88 <xPortStartScheduler+0x138>)
 800bf2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf32:	4b15      	ldr	r3, [pc, #84]	; (800bf88 <xPortStartScheduler+0x138>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a14      	ldr	r2, [pc, #80]	; (800bf88 <xPortStartScheduler+0x138>)
 800bf38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bf3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf3e:	f000 f8dd 	bl	800c0fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf42:	4b12      	ldr	r3, [pc, #72]	; (800bf8c <xPortStartScheduler+0x13c>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf48:	f000 f8fc 	bl	800c144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf4c:	4b10      	ldr	r3, [pc, #64]	; (800bf90 <xPortStartScheduler+0x140>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a0f      	ldr	r2, [pc, #60]	; (800bf90 <xPortStartScheduler+0x140>)
 800bf52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bf56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf58:	f7ff ff66 	bl	800be28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf5c:	f7fe fec0 	bl	800ace0 <vTaskSwitchContext>
	prvTaskExitError();
 800bf60:	f7ff ff1e 	bl	800bda0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	e000ed00 	.word	0xe000ed00
 800bf74:	410fc271 	.word	0x410fc271
 800bf78:	410fc270 	.word	0x410fc270
 800bf7c:	e000e400 	.word	0xe000e400
 800bf80:	2000154c 	.word	0x2000154c
 800bf84:	20001550 	.word	0x20001550
 800bf88:	e000ed20 	.word	0xe000ed20
 800bf8c:	20000024 	.word	0x20000024
 800bf90:	e000ef34 	.word	0xe000ef34

0800bf94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	607b      	str	r3, [r7, #4]
}
 800bfac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bfae:	4b0f      	ldr	r3, [pc, #60]	; (800bfec <vPortEnterCritical+0x58>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	4a0d      	ldr	r2, [pc, #52]	; (800bfec <vPortEnterCritical+0x58>)
 800bfb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bfb8:	4b0c      	ldr	r3, [pc, #48]	; (800bfec <vPortEnterCritical+0x58>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d10f      	bne.n	800bfe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bfc0:	4b0b      	ldr	r3, [pc, #44]	; (800bff0 <vPortEnterCritical+0x5c>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00a      	beq.n	800bfe0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	603b      	str	r3, [r7, #0]
}
 800bfdc:	bf00      	nop
 800bfde:	e7fe      	b.n	800bfde <vPortEnterCritical+0x4a>
	}
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr
 800bfec:	20000024 	.word	0x20000024
 800bff0:	e000ed04 	.word	0xe000ed04

0800bff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bffa:	4b12      	ldr	r3, [pc, #72]	; (800c044 <vPortExitCritical+0x50>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10a      	bne.n	800c018 <vPortExitCritical+0x24>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	607b      	str	r3, [r7, #4]
}
 800c014:	bf00      	nop
 800c016:	e7fe      	b.n	800c016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c018:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <vPortExitCritical+0x50>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3b01      	subs	r3, #1
 800c01e:	4a09      	ldr	r2, [pc, #36]	; (800c044 <vPortExitCritical+0x50>)
 800c020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c022:	4b08      	ldr	r3, [pc, #32]	; (800c044 <vPortExitCritical+0x50>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d105      	bne.n	800c036 <vPortExitCritical+0x42>
 800c02a:	2300      	movs	r3, #0
 800c02c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	f383 8811 	msr	BASEPRI, r3
}
 800c034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c036:	bf00      	nop
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20000024 	.word	0x20000024
	...

0800c050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c050:	f3ef 8009 	mrs	r0, PSP
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	4b15      	ldr	r3, [pc, #84]	; (800c0b0 <pxCurrentTCBConst>)
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	f01e 0f10 	tst.w	lr, #16
 800c060:	bf08      	it	eq
 800c062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06a:	6010      	str	r0, [r2, #0]
 800c06c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c070:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c074:	f380 8811 	msr	BASEPRI, r0
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f7fe fe2e 	bl	800ace0 <vTaskSwitchContext>
 800c084:	f04f 0000 	mov.w	r0, #0
 800c088:	f380 8811 	msr	BASEPRI, r0
 800c08c:	bc09      	pop	{r0, r3}
 800c08e:	6819      	ldr	r1, [r3, #0]
 800c090:	6808      	ldr	r0, [r1, #0]
 800c092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c096:	f01e 0f10 	tst.w	lr, #16
 800c09a:	bf08      	it	eq
 800c09c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c0a0:	f380 8809 	msr	PSP, r0
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	f3af 8000 	nop.w

0800c0b0 <pxCurrentTCBConst>:
 800c0b0:	20000f20 	.word	0x20000f20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop

0800c0b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	607b      	str	r3, [r7, #4]
}
 800c0d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c0d2:	f7fe fd47 	bl	800ab64 <xTaskIncrementTick>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d003      	beq.n	800c0e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c0dc:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <SysTick_Handler+0x40>)
 800c0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0e2:	601a      	str	r2, [r3, #0]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	f383 8811 	msr	BASEPRI, r3
}
 800c0ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c0f0:	bf00      	nop
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	e000ed04 	.word	0xe000ed04

0800c0fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c100:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <vPortSetupTimerInterrupt+0x34>)
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c106:	4b0b      	ldr	r3, [pc, #44]	; (800c134 <vPortSetupTimerInterrupt+0x38>)
 800c108:	2200      	movs	r2, #0
 800c10a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c10c:	4b0a      	ldr	r3, [pc, #40]	; (800c138 <vPortSetupTimerInterrupt+0x3c>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a0a      	ldr	r2, [pc, #40]	; (800c13c <vPortSetupTimerInterrupt+0x40>)
 800c112:	fba2 2303 	umull	r2, r3, r2, r3
 800c116:	099b      	lsrs	r3, r3, #6
 800c118:	4a09      	ldr	r2, [pc, #36]	; (800c140 <vPortSetupTimerInterrupt+0x44>)
 800c11a:	3b01      	subs	r3, #1
 800c11c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c11e:	4b04      	ldr	r3, [pc, #16]	; (800c130 <vPortSetupTimerInterrupt+0x34>)
 800c120:	2207      	movs	r2, #7
 800c122:	601a      	str	r2, [r3, #0]
}
 800c124:	bf00      	nop
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	e000e010 	.word	0xe000e010
 800c134:	e000e018 	.word	0xe000e018
 800c138:	20000018 	.word	0x20000018
 800c13c:	10624dd3 	.word	0x10624dd3
 800c140:	e000e014 	.word	0xe000e014

0800c144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c154 <vPortEnableVFP+0x10>
 800c148:	6801      	ldr	r1, [r0, #0]
 800c14a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c14e:	6001      	str	r1, [r0, #0]
 800c150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c152:	bf00      	nop
 800c154:	e000ed88 	.word	0xe000ed88

0800c158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c15e:	f3ef 8305 	mrs	r3, IPSR
 800c162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b0f      	cmp	r3, #15
 800c168:	d914      	bls.n	800c194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c16a:	4a17      	ldr	r2, [pc, #92]	; (800c1c8 <vPortValidateInterruptPriority+0x70>)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	4413      	add	r3, r2
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c174:	4b15      	ldr	r3, [pc, #84]	; (800c1cc <vPortValidateInterruptPriority+0x74>)
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	7afa      	ldrb	r2, [r7, #11]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d20a      	bcs.n	800c194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	607b      	str	r3, [r7, #4]
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c194:	4b0e      	ldr	r3, [pc, #56]	; (800c1d0 <vPortValidateInterruptPriority+0x78>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c19c:	4b0d      	ldr	r3, [pc, #52]	; (800c1d4 <vPortValidateInterruptPriority+0x7c>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d90a      	bls.n	800c1ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	603b      	str	r3, [r7, #0]
}
 800c1b6:	bf00      	nop
 800c1b8:	e7fe      	b.n	800c1b8 <vPortValidateInterruptPriority+0x60>
	}
 800c1ba:	bf00      	nop
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	e000e3f0 	.word	0xe000e3f0
 800c1cc:	2000154c 	.word	0x2000154c
 800c1d0:	e000ed0c 	.word	0xe000ed0c
 800c1d4:	20001550 	.word	0x20001550

0800c1d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b08a      	sub	sp, #40	; 0x28
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c1e4:	f7fe fc02 	bl	800a9ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c1e8:	4b58      	ldr	r3, [pc, #352]	; (800c34c <pvPortMalloc+0x174>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c1f0:	f000 f910 	bl	800c414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1f4:	4b56      	ldr	r3, [pc, #344]	; (800c350 <pvPortMalloc+0x178>)
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f040 808e 	bne.w	800c31e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d01d      	beq.n	800c244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c208:	2208      	movs	r2, #8
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4413      	add	r3, r2
 800c20e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f003 0307 	and.w	r3, r3, #7
 800c216:	2b00      	cmp	r3, #0
 800c218:	d014      	beq.n	800c244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f023 0307 	bic.w	r3, r3, #7
 800c220:	3308      	adds	r3, #8
 800c222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f003 0307 	and.w	r3, r3, #7
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00a      	beq.n	800c244 <pvPortMalloc+0x6c>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	617b      	str	r3, [r7, #20]
}
 800c240:	bf00      	nop
 800c242:	e7fe      	b.n	800c242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d069      	beq.n	800c31e <pvPortMalloc+0x146>
 800c24a:	4b42      	ldr	r3, [pc, #264]	; (800c354 <pvPortMalloc+0x17c>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	429a      	cmp	r2, r3
 800c252:	d864      	bhi.n	800c31e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c254:	4b40      	ldr	r3, [pc, #256]	; (800c358 <pvPortMalloc+0x180>)
 800c256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c258:	4b3f      	ldr	r3, [pc, #252]	; (800c358 <pvPortMalloc+0x180>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c25e:	e004      	b.n	800c26a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	429a      	cmp	r2, r3
 800c272:	d903      	bls.n	800c27c <pvPortMalloc+0xa4>
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1f1      	bne.n	800c260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c27c:	4b33      	ldr	r3, [pc, #204]	; (800c34c <pvPortMalloc+0x174>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c282:	429a      	cmp	r2, r3
 800c284:	d04b      	beq.n	800c31e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c286:	6a3b      	ldr	r3, [r7, #32]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2208      	movs	r2, #8
 800c28c:	4413      	add	r3, r2
 800c28e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	6a3b      	ldr	r3, [r7, #32]
 800c296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	1ad2      	subs	r2, r2, r3
 800c2a0:	2308      	movs	r3, #8
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d91f      	bls.n	800c2e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	f003 0307 	and.w	r3, r3, #7
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <pvPortMalloc+0xf8>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	613b      	str	r3, [r7, #16]
}
 800c2cc:	bf00      	nop
 800c2ce:	e7fe      	b.n	800c2ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d2:	685a      	ldr	r2, [r3, #4]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	1ad2      	subs	r2, r2, r3
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2e2:	69b8      	ldr	r0, [r7, #24]
 800c2e4:	f000 f8f8 	bl	800c4d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2e8:	4b1a      	ldr	r3, [pc, #104]	; (800c354 <pvPortMalloc+0x17c>)
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	4a18      	ldr	r2, [pc, #96]	; (800c354 <pvPortMalloc+0x17c>)
 800c2f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2f6:	4b17      	ldr	r3, [pc, #92]	; (800c354 <pvPortMalloc+0x17c>)
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	4b18      	ldr	r3, [pc, #96]	; (800c35c <pvPortMalloc+0x184>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d203      	bcs.n	800c30a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c302:	4b14      	ldr	r3, [pc, #80]	; (800c354 <pvPortMalloc+0x17c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a15      	ldr	r2, [pc, #84]	; (800c35c <pvPortMalloc+0x184>)
 800c308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	4b10      	ldr	r3, [pc, #64]	; (800c350 <pvPortMalloc+0x178>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	431a      	orrs	r2, r3
 800c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	2200      	movs	r2, #0
 800c31c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c31e:	f7fe fb73 	bl	800aa08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	f003 0307 	and.w	r3, r3, #7
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00a      	beq.n	800c342 <pvPortMalloc+0x16a>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	60fb      	str	r3, [r7, #12]
}
 800c33e:	bf00      	nop
 800c340:	e7fe      	b.n	800c340 <pvPortMalloc+0x168>
	return pvReturn;
 800c342:	69fb      	ldr	r3, [r7, #28]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3728      	adds	r7, #40	; 0x28
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	20003c6c 	.word	0x20003c6c
 800c350:	20003c78 	.word	0x20003c78
 800c354:	20003c70 	.word	0x20003c70
 800c358:	20003c64 	.word	0x20003c64
 800c35c:	20003c74 	.word	0x20003c74

0800c360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d048      	beq.n	800c404 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c372:	2308      	movs	r3, #8
 800c374:	425b      	negs	r3, r3
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	4413      	add	r3, r2
 800c37a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	685a      	ldr	r2, [r3, #4]
 800c384:	4b21      	ldr	r3, [pc, #132]	; (800c40c <vPortFree+0xac>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4013      	ands	r3, r2
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10a      	bne.n	800c3a4 <vPortFree+0x44>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	60fb      	str	r3, [r7, #12]
}
 800c3a0:	bf00      	nop
 800c3a2:	e7fe      	b.n	800c3a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00a      	beq.n	800c3c2 <vPortFree+0x62>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	60bb      	str	r3, [r7, #8]
}
 800c3be:	bf00      	nop
 800c3c0:	e7fe      	b.n	800c3c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	685a      	ldr	r2, [r3, #4]
 800c3c6:	4b11      	ldr	r3, [pc, #68]	; (800c40c <vPortFree+0xac>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d019      	beq.n	800c404 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d115      	bne.n	800c404 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <vPortFree+0xac>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	43db      	mvns	r3, r3
 800c3e2:	401a      	ands	r2, r3
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3e8:	f7fe fb00 	bl	800a9ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	685a      	ldr	r2, [r3, #4]
 800c3f0:	4b07      	ldr	r3, [pc, #28]	; (800c410 <vPortFree+0xb0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	4a06      	ldr	r2, [pc, #24]	; (800c410 <vPortFree+0xb0>)
 800c3f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3fa:	6938      	ldr	r0, [r7, #16]
 800c3fc:	f000 f86c 	bl	800c4d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c400:	f7fe fb02 	bl	800aa08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c404:	bf00      	nop
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	20003c78 	.word	0x20003c78
 800c410:	20003c70 	.word	0x20003c70

0800c414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c41a:	f242 7310 	movw	r3, #10000	; 0x2710
 800c41e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c420:	4b27      	ldr	r3, [pc, #156]	; (800c4c0 <prvHeapInit+0xac>)
 800c422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00c      	beq.n	800c448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	3307      	adds	r3, #7
 800c432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f023 0307 	bic.w	r3, r3, #7
 800c43a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	4a1f      	ldr	r2, [pc, #124]	; (800c4c0 <prvHeapInit+0xac>)
 800c444:	4413      	add	r3, r2
 800c446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c44c:	4a1d      	ldr	r2, [pc, #116]	; (800c4c4 <prvHeapInit+0xb0>)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c452:	4b1c      	ldr	r3, [pc, #112]	; (800c4c4 <prvHeapInit+0xb0>)
 800c454:	2200      	movs	r2, #0
 800c456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	4413      	add	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c460:	2208      	movs	r2, #8
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	1a9b      	subs	r3, r3, r2
 800c466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f023 0307 	bic.w	r3, r3, #7
 800c46e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	4a15      	ldr	r2, [pc, #84]	; (800c4c8 <prvHeapInit+0xb4>)
 800c474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c476:	4b14      	ldr	r3, [pc, #80]	; (800c4c8 <prvHeapInit+0xb4>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2200      	movs	r2, #0
 800c47c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c47e:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <prvHeapInit+0xb4>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	1ad2      	subs	r2, r2, r3
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c494:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <prvHeapInit+0xb4>)
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	4a0a      	ldr	r2, [pc, #40]	; (800c4cc <prvHeapInit+0xb8>)
 800c4a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	4a09      	ldr	r2, [pc, #36]	; (800c4d0 <prvHeapInit+0xbc>)
 800c4aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c4ac:	4b09      	ldr	r3, [pc, #36]	; (800c4d4 <prvHeapInit+0xc0>)
 800c4ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c4b2:	601a      	str	r2, [r3, #0]
}
 800c4b4:	bf00      	nop
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	20001554 	.word	0x20001554
 800c4c4:	20003c64 	.word	0x20003c64
 800c4c8:	20003c6c 	.word	0x20003c6c
 800c4cc:	20003c74 	.word	0x20003c74
 800c4d0:	20003c70 	.word	0x20003c70
 800c4d4:	20003c78 	.word	0x20003c78

0800c4d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4e0:	4b28      	ldr	r3, [pc, #160]	; (800c584 <prvInsertBlockIntoFreeList+0xac>)
 800c4e2:	60fb      	str	r3, [r7, #12]
 800c4e4:	e002      	b.n	800c4ec <prvInsertBlockIntoFreeList+0x14>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d8f7      	bhi.n	800c4e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	4413      	add	r3, r2
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	429a      	cmp	r2, r3
 800c506:	d108      	bne.n	800c51a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	441a      	add	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	441a      	add	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d118      	bne.n	800c560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	4b15      	ldr	r3, [pc, #84]	; (800c588 <prvInsertBlockIntoFreeList+0xb0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	429a      	cmp	r2, r3
 800c538:	d00d      	beq.n	800c556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	441a      	add	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	e008      	b.n	800c568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c556:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <prvInsertBlockIntoFreeList+0xb0>)
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	601a      	str	r2, [r3, #0]
 800c55e:	e003      	b.n	800c568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d002      	beq.n	800c576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c576:	bf00      	nop
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	20003c64 	.word	0x20003c64
 800c588:	20003c6c 	.word	0x20003c6c

0800c58c <__errno>:
 800c58c:	4b01      	ldr	r3, [pc, #4]	; (800c594 <__errno+0x8>)
 800c58e:	6818      	ldr	r0, [r3, #0]
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	20000028 	.word	0x20000028

0800c598 <__libc_init_array>:
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	4d0d      	ldr	r5, [pc, #52]	; (800c5d0 <__libc_init_array+0x38>)
 800c59c:	4c0d      	ldr	r4, [pc, #52]	; (800c5d4 <__libc_init_array+0x3c>)
 800c59e:	1b64      	subs	r4, r4, r5
 800c5a0:	10a4      	asrs	r4, r4, #2
 800c5a2:	2600      	movs	r6, #0
 800c5a4:	42a6      	cmp	r6, r4
 800c5a6:	d109      	bne.n	800c5bc <__libc_init_array+0x24>
 800c5a8:	4d0b      	ldr	r5, [pc, #44]	; (800c5d8 <__libc_init_array+0x40>)
 800c5aa:	4c0c      	ldr	r4, [pc, #48]	; (800c5dc <__libc_init_array+0x44>)
 800c5ac:	f002 fe3e 	bl	800f22c <_init>
 800c5b0:	1b64      	subs	r4, r4, r5
 800c5b2:	10a4      	asrs	r4, r4, #2
 800c5b4:	2600      	movs	r6, #0
 800c5b6:	42a6      	cmp	r6, r4
 800c5b8:	d105      	bne.n	800c5c6 <__libc_init_array+0x2e>
 800c5ba:	bd70      	pop	{r4, r5, r6, pc}
 800c5bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5c0:	4798      	blx	r3
 800c5c2:	3601      	adds	r6, #1
 800c5c4:	e7ee      	b.n	800c5a4 <__libc_init_array+0xc>
 800c5c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ca:	4798      	blx	r3
 800c5cc:	3601      	adds	r6, #1
 800c5ce:	e7f2      	b.n	800c5b6 <__libc_init_array+0x1e>
 800c5d0:	0800f764 	.word	0x0800f764
 800c5d4:	0800f764 	.word	0x0800f764
 800c5d8:	0800f764 	.word	0x0800f764
 800c5dc:	0800f768 	.word	0x0800f768

0800c5e0 <memcpy>:
 800c5e0:	440a      	add	r2, r1
 800c5e2:	4291      	cmp	r1, r2
 800c5e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5e8:	d100      	bne.n	800c5ec <memcpy+0xc>
 800c5ea:	4770      	bx	lr
 800c5ec:	b510      	push	{r4, lr}
 800c5ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5f6:	4291      	cmp	r1, r2
 800c5f8:	d1f9      	bne.n	800c5ee <memcpy+0xe>
 800c5fa:	bd10      	pop	{r4, pc}

0800c5fc <memset>:
 800c5fc:	4402      	add	r2, r0
 800c5fe:	4603      	mov	r3, r0
 800c600:	4293      	cmp	r3, r2
 800c602:	d100      	bne.n	800c606 <memset+0xa>
 800c604:	4770      	bx	lr
 800c606:	f803 1b01 	strb.w	r1, [r3], #1
 800c60a:	e7f9      	b.n	800c600 <memset+0x4>

0800c60c <__cvt>:
 800c60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c610:	ec55 4b10 	vmov	r4, r5, d0
 800c614:	2d00      	cmp	r5, #0
 800c616:	460e      	mov	r6, r1
 800c618:	4619      	mov	r1, r3
 800c61a:	462b      	mov	r3, r5
 800c61c:	bfbb      	ittet	lt
 800c61e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c622:	461d      	movlt	r5, r3
 800c624:	2300      	movge	r3, #0
 800c626:	232d      	movlt	r3, #45	; 0x2d
 800c628:	700b      	strb	r3, [r1, #0]
 800c62a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c62c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c630:	4691      	mov	r9, r2
 800c632:	f023 0820 	bic.w	r8, r3, #32
 800c636:	bfbc      	itt	lt
 800c638:	4622      	movlt	r2, r4
 800c63a:	4614      	movlt	r4, r2
 800c63c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c640:	d005      	beq.n	800c64e <__cvt+0x42>
 800c642:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c646:	d100      	bne.n	800c64a <__cvt+0x3e>
 800c648:	3601      	adds	r6, #1
 800c64a:	2102      	movs	r1, #2
 800c64c:	e000      	b.n	800c650 <__cvt+0x44>
 800c64e:	2103      	movs	r1, #3
 800c650:	ab03      	add	r3, sp, #12
 800c652:	9301      	str	r3, [sp, #4]
 800c654:	ab02      	add	r3, sp, #8
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	ec45 4b10 	vmov	d0, r4, r5
 800c65c:	4653      	mov	r3, sl
 800c65e:	4632      	mov	r2, r6
 800c660:	f000 fec6 	bl	800d3f0 <_dtoa_r>
 800c664:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c668:	4607      	mov	r7, r0
 800c66a:	d102      	bne.n	800c672 <__cvt+0x66>
 800c66c:	f019 0f01 	tst.w	r9, #1
 800c670:	d022      	beq.n	800c6b8 <__cvt+0xac>
 800c672:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c676:	eb07 0906 	add.w	r9, r7, r6
 800c67a:	d110      	bne.n	800c69e <__cvt+0x92>
 800c67c:	783b      	ldrb	r3, [r7, #0]
 800c67e:	2b30      	cmp	r3, #48	; 0x30
 800c680:	d10a      	bne.n	800c698 <__cvt+0x8c>
 800c682:	2200      	movs	r2, #0
 800c684:	2300      	movs	r3, #0
 800c686:	4620      	mov	r0, r4
 800c688:	4629      	mov	r1, r5
 800c68a:	f7f4 fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c68e:	b918      	cbnz	r0, 800c698 <__cvt+0x8c>
 800c690:	f1c6 0601 	rsb	r6, r6, #1
 800c694:	f8ca 6000 	str.w	r6, [sl]
 800c698:	f8da 3000 	ldr.w	r3, [sl]
 800c69c:	4499      	add	r9, r3
 800c69e:	2200      	movs	r2, #0
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7f4 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6aa:	b108      	cbz	r0, 800c6b0 <__cvt+0xa4>
 800c6ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800c6b0:	2230      	movs	r2, #48	; 0x30
 800c6b2:	9b03      	ldr	r3, [sp, #12]
 800c6b4:	454b      	cmp	r3, r9
 800c6b6:	d307      	bcc.n	800c6c8 <__cvt+0xbc>
 800c6b8:	9b03      	ldr	r3, [sp, #12]
 800c6ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6bc:	1bdb      	subs	r3, r3, r7
 800c6be:	4638      	mov	r0, r7
 800c6c0:	6013      	str	r3, [r2, #0]
 800c6c2:	b004      	add	sp, #16
 800c6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c8:	1c59      	adds	r1, r3, #1
 800c6ca:	9103      	str	r1, [sp, #12]
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	e7f0      	b.n	800c6b2 <__cvt+0xa6>

0800c6d0 <__exponent>:
 800c6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	bfb8      	it	lt
 800c6d8:	4249      	neglt	r1, r1
 800c6da:	f803 2b02 	strb.w	r2, [r3], #2
 800c6de:	bfb4      	ite	lt
 800c6e0:	222d      	movlt	r2, #45	; 0x2d
 800c6e2:	222b      	movge	r2, #43	; 0x2b
 800c6e4:	2909      	cmp	r1, #9
 800c6e6:	7042      	strb	r2, [r0, #1]
 800c6e8:	dd2a      	ble.n	800c740 <__exponent+0x70>
 800c6ea:	f10d 0407 	add.w	r4, sp, #7
 800c6ee:	46a4      	mov	ip, r4
 800c6f0:	270a      	movs	r7, #10
 800c6f2:	46a6      	mov	lr, r4
 800c6f4:	460a      	mov	r2, r1
 800c6f6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c6fa:	fb07 1516 	mls	r5, r7, r6, r1
 800c6fe:	3530      	adds	r5, #48	; 0x30
 800c700:	2a63      	cmp	r2, #99	; 0x63
 800c702:	f104 34ff 	add.w	r4, r4, #4294967295
 800c706:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c70a:	4631      	mov	r1, r6
 800c70c:	dcf1      	bgt.n	800c6f2 <__exponent+0x22>
 800c70e:	3130      	adds	r1, #48	; 0x30
 800c710:	f1ae 0502 	sub.w	r5, lr, #2
 800c714:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c718:	1c44      	adds	r4, r0, #1
 800c71a:	4629      	mov	r1, r5
 800c71c:	4561      	cmp	r1, ip
 800c71e:	d30a      	bcc.n	800c736 <__exponent+0x66>
 800c720:	f10d 0209 	add.w	r2, sp, #9
 800c724:	eba2 020e 	sub.w	r2, r2, lr
 800c728:	4565      	cmp	r5, ip
 800c72a:	bf88      	it	hi
 800c72c:	2200      	movhi	r2, #0
 800c72e:	4413      	add	r3, r2
 800c730:	1a18      	subs	r0, r3, r0
 800c732:	b003      	add	sp, #12
 800c734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c73a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c73e:	e7ed      	b.n	800c71c <__exponent+0x4c>
 800c740:	2330      	movs	r3, #48	; 0x30
 800c742:	3130      	adds	r1, #48	; 0x30
 800c744:	7083      	strb	r3, [r0, #2]
 800c746:	70c1      	strb	r1, [r0, #3]
 800c748:	1d03      	adds	r3, r0, #4
 800c74a:	e7f1      	b.n	800c730 <__exponent+0x60>

0800c74c <_printf_float>:
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	ed2d 8b02 	vpush	{d8}
 800c754:	b08d      	sub	sp, #52	; 0x34
 800c756:	460c      	mov	r4, r1
 800c758:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c75c:	4616      	mov	r6, r2
 800c75e:	461f      	mov	r7, r3
 800c760:	4605      	mov	r5, r0
 800c762:	f001 fde9 	bl	800e338 <_localeconv_r>
 800c766:	f8d0 a000 	ldr.w	sl, [r0]
 800c76a:	4650      	mov	r0, sl
 800c76c:	f7f3 fd30 	bl	80001d0 <strlen>
 800c770:	2300      	movs	r3, #0
 800c772:	930a      	str	r3, [sp, #40]	; 0x28
 800c774:	6823      	ldr	r3, [r4, #0]
 800c776:	9305      	str	r3, [sp, #20]
 800c778:	f8d8 3000 	ldr.w	r3, [r8]
 800c77c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c780:	3307      	adds	r3, #7
 800c782:	f023 0307 	bic.w	r3, r3, #7
 800c786:	f103 0208 	add.w	r2, r3, #8
 800c78a:	f8c8 2000 	str.w	r2, [r8]
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c796:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c79a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c79e:	9307      	str	r3, [sp, #28]
 800c7a0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c7a4:	ee08 0a10 	vmov	s16, r0
 800c7a8:	4b9f      	ldr	r3, [pc, #636]	; (800ca28 <_printf_float+0x2dc>)
 800c7aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b2:	f7f4 f9bb 	bl	8000b2c <__aeabi_dcmpun>
 800c7b6:	bb88      	cbnz	r0, 800c81c <_printf_float+0xd0>
 800c7b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7bc:	4b9a      	ldr	r3, [pc, #616]	; (800ca28 <_printf_float+0x2dc>)
 800c7be:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c2:	f7f4 f995 	bl	8000af0 <__aeabi_dcmple>
 800c7c6:	bb48      	cbnz	r0, 800c81c <_printf_float+0xd0>
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	4649      	mov	r1, r9
 800c7d0:	f7f4 f984 	bl	8000adc <__aeabi_dcmplt>
 800c7d4:	b110      	cbz	r0, 800c7dc <_printf_float+0x90>
 800c7d6:	232d      	movs	r3, #45	; 0x2d
 800c7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7dc:	4b93      	ldr	r3, [pc, #588]	; (800ca2c <_printf_float+0x2e0>)
 800c7de:	4894      	ldr	r0, [pc, #592]	; (800ca30 <_printf_float+0x2e4>)
 800c7e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c7e4:	bf94      	ite	ls
 800c7e6:	4698      	movls	r8, r3
 800c7e8:	4680      	movhi	r8, r0
 800c7ea:	2303      	movs	r3, #3
 800c7ec:	6123      	str	r3, [r4, #16]
 800c7ee:	9b05      	ldr	r3, [sp, #20]
 800c7f0:	f023 0204 	bic.w	r2, r3, #4
 800c7f4:	6022      	str	r2, [r4, #0]
 800c7f6:	f04f 0900 	mov.w	r9, #0
 800c7fa:	9700      	str	r7, [sp, #0]
 800c7fc:	4633      	mov	r3, r6
 800c7fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800c800:	4621      	mov	r1, r4
 800c802:	4628      	mov	r0, r5
 800c804:	f000 f9d8 	bl	800cbb8 <_printf_common>
 800c808:	3001      	adds	r0, #1
 800c80a:	f040 8090 	bne.w	800c92e <_printf_float+0x1e2>
 800c80e:	f04f 30ff 	mov.w	r0, #4294967295
 800c812:	b00d      	add	sp, #52	; 0x34
 800c814:	ecbd 8b02 	vpop	{d8}
 800c818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81c:	4642      	mov	r2, r8
 800c81e:	464b      	mov	r3, r9
 800c820:	4640      	mov	r0, r8
 800c822:	4649      	mov	r1, r9
 800c824:	f7f4 f982 	bl	8000b2c <__aeabi_dcmpun>
 800c828:	b140      	cbz	r0, 800c83c <_printf_float+0xf0>
 800c82a:	464b      	mov	r3, r9
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	bfbc      	itt	lt
 800c830:	232d      	movlt	r3, #45	; 0x2d
 800c832:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c836:	487f      	ldr	r0, [pc, #508]	; (800ca34 <_printf_float+0x2e8>)
 800c838:	4b7f      	ldr	r3, [pc, #508]	; (800ca38 <_printf_float+0x2ec>)
 800c83a:	e7d1      	b.n	800c7e0 <_printf_float+0x94>
 800c83c:	6863      	ldr	r3, [r4, #4]
 800c83e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c842:	9206      	str	r2, [sp, #24]
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	d13f      	bne.n	800c8c8 <_printf_float+0x17c>
 800c848:	2306      	movs	r3, #6
 800c84a:	6063      	str	r3, [r4, #4]
 800c84c:	9b05      	ldr	r3, [sp, #20]
 800c84e:	6861      	ldr	r1, [r4, #4]
 800c850:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c854:	2300      	movs	r3, #0
 800c856:	9303      	str	r3, [sp, #12]
 800c858:	ab0a      	add	r3, sp, #40	; 0x28
 800c85a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c85e:	ab09      	add	r3, sp, #36	; 0x24
 800c860:	ec49 8b10 	vmov	d0, r8, r9
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	6022      	str	r2, [r4, #0]
 800c868:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c86c:	4628      	mov	r0, r5
 800c86e:	f7ff fecd 	bl	800c60c <__cvt>
 800c872:	9b06      	ldr	r3, [sp, #24]
 800c874:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c876:	2b47      	cmp	r3, #71	; 0x47
 800c878:	4680      	mov	r8, r0
 800c87a:	d108      	bne.n	800c88e <_printf_float+0x142>
 800c87c:	1cc8      	adds	r0, r1, #3
 800c87e:	db02      	blt.n	800c886 <_printf_float+0x13a>
 800c880:	6863      	ldr	r3, [r4, #4]
 800c882:	4299      	cmp	r1, r3
 800c884:	dd41      	ble.n	800c90a <_printf_float+0x1be>
 800c886:	f1ab 0b02 	sub.w	fp, fp, #2
 800c88a:	fa5f fb8b 	uxtb.w	fp, fp
 800c88e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c892:	d820      	bhi.n	800c8d6 <_printf_float+0x18a>
 800c894:	3901      	subs	r1, #1
 800c896:	465a      	mov	r2, fp
 800c898:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c89c:	9109      	str	r1, [sp, #36]	; 0x24
 800c89e:	f7ff ff17 	bl	800c6d0 <__exponent>
 800c8a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8a4:	1813      	adds	r3, r2, r0
 800c8a6:	2a01      	cmp	r2, #1
 800c8a8:	4681      	mov	r9, r0
 800c8aa:	6123      	str	r3, [r4, #16]
 800c8ac:	dc02      	bgt.n	800c8b4 <_printf_float+0x168>
 800c8ae:	6822      	ldr	r2, [r4, #0]
 800c8b0:	07d2      	lsls	r2, r2, #31
 800c8b2:	d501      	bpl.n	800c8b8 <_printf_float+0x16c>
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	6123      	str	r3, [r4, #16]
 800c8b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d09c      	beq.n	800c7fa <_printf_float+0xae>
 800c8c0:	232d      	movs	r3, #45	; 0x2d
 800c8c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8c6:	e798      	b.n	800c7fa <_printf_float+0xae>
 800c8c8:	9a06      	ldr	r2, [sp, #24]
 800c8ca:	2a47      	cmp	r2, #71	; 0x47
 800c8cc:	d1be      	bne.n	800c84c <_printf_float+0x100>
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1bc      	bne.n	800c84c <_printf_float+0x100>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e7b9      	b.n	800c84a <_printf_float+0xfe>
 800c8d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c8da:	d118      	bne.n	800c90e <_printf_float+0x1c2>
 800c8dc:	2900      	cmp	r1, #0
 800c8de:	6863      	ldr	r3, [r4, #4]
 800c8e0:	dd0b      	ble.n	800c8fa <_printf_float+0x1ae>
 800c8e2:	6121      	str	r1, [r4, #16]
 800c8e4:	b913      	cbnz	r3, 800c8ec <_printf_float+0x1a0>
 800c8e6:	6822      	ldr	r2, [r4, #0]
 800c8e8:	07d0      	lsls	r0, r2, #31
 800c8ea:	d502      	bpl.n	800c8f2 <_printf_float+0x1a6>
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	440b      	add	r3, r1
 800c8f0:	6123      	str	r3, [r4, #16]
 800c8f2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c8f4:	f04f 0900 	mov.w	r9, #0
 800c8f8:	e7de      	b.n	800c8b8 <_printf_float+0x16c>
 800c8fa:	b913      	cbnz	r3, 800c902 <_printf_float+0x1b6>
 800c8fc:	6822      	ldr	r2, [r4, #0]
 800c8fe:	07d2      	lsls	r2, r2, #31
 800c900:	d501      	bpl.n	800c906 <_printf_float+0x1ba>
 800c902:	3302      	adds	r3, #2
 800c904:	e7f4      	b.n	800c8f0 <_printf_float+0x1a4>
 800c906:	2301      	movs	r3, #1
 800c908:	e7f2      	b.n	800c8f0 <_printf_float+0x1a4>
 800c90a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c910:	4299      	cmp	r1, r3
 800c912:	db05      	blt.n	800c920 <_printf_float+0x1d4>
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	6121      	str	r1, [r4, #16]
 800c918:	07d8      	lsls	r0, r3, #31
 800c91a:	d5ea      	bpl.n	800c8f2 <_printf_float+0x1a6>
 800c91c:	1c4b      	adds	r3, r1, #1
 800c91e:	e7e7      	b.n	800c8f0 <_printf_float+0x1a4>
 800c920:	2900      	cmp	r1, #0
 800c922:	bfd4      	ite	le
 800c924:	f1c1 0202 	rsble	r2, r1, #2
 800c928:	2201      	movgt	r2, #1
 800c92a:	4413      	add	r3, r2
 800c92c:	e7e0      	b.n	800c8f0 <_printf_float+0x1a4>
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	055a      	lsls	r2, r3, #21
 800c932:	d407      	bmi.n	800c944 <_printf_float+0x1f8>
 800c934:	6923      	ldr	r3, [r4, #16]
 800c936:	4642      	mov	r2, r8
 800c938:	4631      	mov	r1, r6
 800c93a:	4628      	mov	r0, r5
 800c93c:	47b8      	blx	r7
 800c93e:	3001      	adds	r0, #1
 800c940:	d12c      	bne.n	800c99c <_printf_float+0x250>
 800c942:	e764      	b.n	800c80e <_printf_float+0xc2>
 800c944:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c948:	f240 80e0 	bls.w	800cb0c <_printf_float+0x3c0>
 800c94c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c950:	2200      	movs	r2, #0
 800c952:	2300      	movs	r3, #0
 800c954:	f7f4 f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c958:	2800      	cmp	r0, #0
 800c95a:	d034      	beq.n	800c9c6 <_printf_float+0x27a>
 800c95c:	4a37      	ldr	r2, [pc, #220]	; (800ca3c <_printf_float+0x2f0>)
 800c95e:	2301      	movs	r3, #1
 800c960:	4631      	mov	r1, r6
 800c962:	4628      	mov	r0, r5
 800c964:	47b8      	blx	r7
 800c966:	3001      	adds	r0, #1
 800c968:	f43f af51 	beq.w	800c80e <_printf_float+0xc2>
 800c96c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c970:	429a      	cmp	r2, r3
 800c972:	db02      	blt.n	800c97a <_printf_float+0x22e>
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	07d8      	lsls	r0, r3, #31
 800c978:	d510      	bpl.n	800c99c <_printf_float+0x250>
 800c97a:	ee18 3a10 	vmov	r3, s16
 800c97e:	4652      	mov	r2, sl
 800c980:	4631      	mov	r1, r6
 800c982:	4628      	mov	r0, r5
 800c984:	47b8      	blx	r7
 800c986:	3001      	adds	r0, #1
 800c988:	f43f af41 	beq.w	800c80e <_printf_float+0xc2>
 800c98c:	f04f 0800 	mov.w	r8, #0
 800c990:	f104 091a 	add.w	r9, r4, #26
 800c994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c996:	3b01      	subs	r3, #1
 800c998:	4543      	cmp	r3, r8
 800c99a:	dc09      	bgt.n	800c9b0 <_printf_float+0x264>
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	079b      	lsls	r3, r3, #30
 800c9a0:	f100 8105 	bmi.w	800cbae <_printf_float+0x462>
 800c9a4:	68e0      	ldr	r0, [r4, #12]
 800c9a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9a8:	4298      	cmp	r0, r3
 800c9aa:	bfb8      	it	lt
 800c9ac:	4618      	movlt	r0, r3
 800c9ae:	e730      	b.n	800c812 <_printf_float+0xc6>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	464a      	mov	r2, r9
 800c9b4:	4631      	mov	r1, r6
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	47b8      	blx	r7
 800c9ba:	3001      	adds	r0, #1
 800c9bc:	f43f af27 	beq.w	800c80e <_printf_float+0xc2>
 800c9c0:	f108 0801 	add.w	r8, r8, #1
 800c9c4:	e7e6      	b.n	800c994 <_printf_float+0x248>
 800c9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	dc39      	bgt.n	800ca40 <_printf_float+0x2f4>
 800c9cc:	4a1b      	ldr	r2, [pc, #108]	; (800ca3c <_printf_float+0x2f0>)
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	4631      	mov	r1, r6
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	47b8      	blx	r7
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	f43f af19 	beq.w	800c80e <_printf_float+0xc2>
 800c9dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	d102      	bne.n	800c9ea <_printf_float+0x29e>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	07d9      	lsls	r1, r3, #31
 800c9e8:	d5d8      	bpl.n	800c99c <_printf_float+0x250>
 800c9ea:	ee18 3a10 	vmov	r3, s16
 800c9ee:	4652      	mov	r2, sl
 800c9f0:	4631      	mov	r1, r6
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	47b8      	blx	r7
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	f43f af09 	beq.w	800c80e <_printf_float+0xc2>
 800c9fc:	f04f 0900 	mov.w	r9, #0
 800ca00:	f104 0a1a 	add.w	sl, r4, #26
 800ca04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca06:	425b      	negs	r3, r3
 800ca08:	454b      	cmp	r3, r9
 800ca0a:	dc01      	bgt.n	800ca10 <_printf_float+0x2c4>
 800ca0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca0e:	e792      	b.n	800c936 <_printf_float+0x1ea>
 800ca10:	2301      	movs	r3, #1
 800ca12:	4652      	mov	r2, sl
 800ca14:	4631      	mov	r1, r6
 800ca16:	4628      	mov	r0, r5
 800ca18:	47b8      	blx	r7
 800ca1a:	3001      	adds	r0, #1
 800ca1c:	f43f aef7 	beq.w	800c80e <_printf_float+0xc2>
 800ca20:	f109 0901 	add.w	r9, r9, #1
 800ca24:	e7ee      	b.n	800ca04 <_printf_float+0x2b8>
 800ca26:	bf00      	nop
 800ca28:	7fefffff 	.word	0x7fefffff
 800ca2c:	0800f384 	.word	0x0800f384
 800ca30:	0800f388 	.word	0x0800f388
 800ca34:	0800f390 	.word	0x0800f390
 800ca38:	0800f38c 	.word	0x0800f38c
 800ca3c:	0800f394 	.word	0x0800f394
 800ca40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca44:	429a      	cmp	r2, r3
 800ca46:	bfa8      	it	ge
 800ca48:	461a      	movge	r2, r3
 800ca4a:	2a00      	cmp	r2, #0
 800ca4c:	4691      	mov	r9, r2
 800ca4e:	dc37      	bgt.n	800cac0 <_printf_float+0x374>
 800ca50:	f04f 0b00 	mov.w	fp, #0
 800ca54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca58:	f104 021a 	add.w	r2, r4, #26
 800ca5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca5e:	9305      	str	r3, [sp, #20]
 800ca60:	eba3 0309 	sub.w	r3, r3, r9
 800ca64:	455b      	cmp	r3, fp
 800ca66:	dc33      	bgt.n	800cad0 <_printf_float+0x384>
 800ca68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	db3b      	blt.n	800cae8 <_printf_float+0x39c>
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	07da      	lsls	r2, r3, #31
 800ca74:	d438      	bmi.n	800cae8 <_printf_float+0x39c>
 800ca76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca78:	9b05      	ldr	r3, [sp, #20]
 800ca7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	eba2 0901 	sub.w	r9, r2, r1
 800ca82:	4599      	cmp	r9, r3
 800ca84:	bfa8      	it	ge
 800ca86:	4699      	movge	r9, r3
 800ca88:	f1b9 0f00 	cmp.w	r9, #0
 800ca8c:	dc35      	bgt.n	800cafa <_printf_float+0x3ae>
 800ca8e:	f04f 0800 	mov.w	r8, #0
 800ca92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca96:	f104 0a1a 	add.w	sl, r4, #26
 800ca9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca9e:	1a9b      	subs	r3, r3, r2
 800caa0:	eba3 0309 	sub.w	r3, r3, r9
 800caa4:	4543      	cmp	r3, r8
 800caa6:	f77f af79 	ble.w	800c99c <_printf_float+0x250>
 800caaa:	2301      	movs	r3, #1
 800caac:	4652      	mov	r2, sl
 800caae:	4631      	mov	r1, r6
 800cab0:	4628      	mov	r0, r5
 800cab2:	47b8      	blx	r7
 800cab4:	3001      	adds	r0, #1
 800cab6:	f43f aeaa 	beq.w	800c80e <_printf_float+0xc2>
 800caba:	f108 0801 	add.w	r8, r8, #1
 800cabe:	e7ec      	b.n	800ca9a <_printf_float+0x34e>
 800cac0:	4613      	mov	r3, r2
 800cac2:	4631      	mov	r1, r6
 800cac4:	4642      	mov	r2, r8
 800cac6:	4628      	mov	r0, r5
 800cac8:	47b8      	blx	r7
 800caca:	3001      	adds	r0, #1
 800cacc:	d1c0      	bne.n	800ca50 <_printf_float+0x304>
 800cace:	e69e      	b.n	800c80e <_printf_float+0xc2>
 800cad0:	2301      	movs	r3, #1
 800cad2:	4631      	mov	r1, r6
 800cad4:	4628      	mov	r0, r5
 800cad6:	9205      	str	r2, [sp, #20]
 800cad8:	47b8      	blx	r7
 800cada:	3001      	adds	r0, #1
 800cadc:	f43f ae97 	beq.w	800c80e <_printf_float+0xc2>
 800cae0:	9a05      	ldr	r2, [sp, #20]
 800cae2:	f10b 0b01 	add.w	fp, fp, #1
 800cae6:	e7b9      	b.n	800ca5c <_printf_float+0x310>
 800cae8:	ee18 3a10 	vmov	r3, s16
 800caec:	4652      	mov	r2, sl
 800caee:	4631      	mov	r1, r6
 800caf0:	4628      	mov	r0, r5
 800caf2:	47b8      	blx	r7
 800caf4:	3001      	adds	r0, #1
 800caf6:	d1be      	bne.n	800ca76 <_printf_float+0x32a>
 800caf8:	e689      	b.n	800c80e <_printf_float+0xc2>
 800cafa:	9a05      	ldr	r2, [sp, #20]
 800cafc:	464b      	mov	r3, r9
 800cafe:	4442      	add	r2, r8
 800cb00:	4631      	mov	r1, r6
 800cb02:	4628      	mov	r0, r5
 800cb04:	47b8      	blx	r7
 800cb06:	3001      	adds	r0, #1
 800cb08:	d1c1      	bne.n	800ca8e <_printf_float+0x342>
 800cb0a:	e680      	b.n	800c80e <_printf_float+0xc2>
 800cb0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb0e:	2a01      	cmp	r2, #1
 800cb10:	dc01      	bgt.n	800cb16 <_printf_float+0x3ca>
 800cb12:	07db      	lsls	r3, r3, #31
 800cb14:	d538      	bpl.n	800cb88 <_printf_float+0x43c>
 800cb16:	2301      	movs	r3, #1
 800cb18:	4642      	mov	r2, r8
 800cb1a:	4631      	mov	r1, r6
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	47b8      	blx	r7
 800cb20:	3001      	adds	r0, #1
 800cb22:	f43f ae74 	beq.w	800c80e <_printf_float+0xc2>
 800cb26:	ee18 3a10 	vmov	r3, s16
 800cb2a:	4652      	mov	r2, sl
 800cb2c:	4631      	mov	r1, r6
 800cb2e:	4628      	mov	r0, r5
 800cb30:	47b8      	blx	r7
 800cb32:	3001      	adds	r0, #1
 800cb34:	f43f ae6b 	beq.w	800c80e <_printf_float+0xc2>
 800cb38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	2300      	movs	r3, #0
 800cb40:	f7f3 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb44:	b9d8      	cbnz	r0, 800cb7e <_printf_float+0x432>
 800cb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb48:	f108 0201 	add.w	r2, r8, #1
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	4631      	mov	r1, r6
 800cb50:	4628      	mov	r0, r5
 800cb52:	47b8      	blx	r7
 800cb54:	3001      	adds	r0, #1
 800cb56:	d10e      	bne.n	800cb76 <_printf_float+0x42a>
 800cb58:	e659      	b.n	800c80e <_printf_float+0xc2>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	4652      	mov	r2, sl
 800cb5e:	4631      	mov	r1, r6
 800cb60:	4628      	mov	r0, r5
 800cb62:	47b8      	blx	r7
 800cb64:	3001      	adds	r0, #1
 800cb66:	f43f ae52 	beq.w	800c80e <_printf_float+0xc2>
 800cb6a:	f108 0801 	add.w	r8, r8, #1
 800cb6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb70:	3b01      	subs	r3, #1
 800cb72:	4543      	cmp	r3, r8
 800cb74:	dcf1      	bgt.n	800cb5a <_printf_float+0x40e>
 800cb76:	464b      	mov	r3, r9
 800cb78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb7c:	e6dc      	b.n	800c938 <_printf_float+0x1ec>
 800cb7e:	f04f 0800 	mov.w	r8, #0
 800cb82:	f104 0a1a 	add.w	sl, r4, #26
 800cb86:	e7f2      	b.n	800cb6e <_printf_float+0x422>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	4642      	mov	r2, r8
 800cb8c:	e7df      	b.n	800cb4e <_printf_float+0x402>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	464a      	mov	r2, r9
 800cb92:	4631      	mov	r1, r6
 800cb94:	4628      	mov	r0, r5
 800cb96:	47b8      	blx	r7
 800cb98:	3001      	adds	r0, #1
 800cb9a:	f43f ae38 	beq.w	800c80e <_printf_float+0xc2>
 800cb9e:	f108 0801 	add.w	r8, r8, #1
 800cba2:	68e3      	ldr	r3, [r4, #12]
 800cba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cba6:	1a5b      	subs	r3, r3, r1
 800cba8:	4543      	cmp	r3, r8
 800cbaa:	dcf0      	bgt.n	800cb8e <_printf_float+0x442>
 800cbac:	e6fa      	b.n	800c9a4 <_printf_float+0x258>
 800cbae:	f04f 0800 	mov.w	r8, #0
 800cbb2:	f104 0919 	add.w	r9, r4, #25
 800cbb6:	e7f4      	b.n	800cba2 <_printf_float+0x456>

0800cbb8 <_printf_common>:
 800cbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbbc:	4616      	mov	r6, r2
 800cbbe:	4699      	mov	r9, r3
 800cbc0:	688a      	ldr	r2, [r1, #8]
 800cbc2:	690b      	ldr	r3, [r1, #16]
 800cbc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	bfb8      	it	lt
 800cbcc:	4613      	movlt	r3, r2
 800cbce:	6033      	str	r3, [r6, #0]
 800cbd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbd4:	4607      	mov	r7, r0
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	b10a      	cbz	r2, 800cbde <_printf_common+0x26>
 800cbda:	3301      	adds	r3, #1
 800cbdc:	6033      	str	r3, [r6, #0]
 800cbde:	6823      	ldr	r3, [r4, #0]
 800cbe0:	0699      	lsls	r1, r3, #26
 800cbe2:	bf42      	ittt	mi
 800cbe4:	6833      	ldrmi	r3, [r6, #0]
 800cbe6:	3302      	addmi	r3, #2
 800cbe8:	6033      	strmi	r3, [r6, #0]
 800cbea:	6825      	ldr	r5, [r4, #0]
 800cbec:	f015 0506 	ands.w	r5, r5, #6
 800cbf0:	d106      	bne.n	800cc00 <_printf_common+0x48>
 800cbf2:	f104 0a19 	add.w	sl, r4, #25
 800cbf6:	68e3      	ldr	r3, [r4, #12]
 800cbf8:	6832      	ldr	r2, [r6, #0]
 800cbfa:	1a9b      	subs	r3, r3, r2
 800cbfc:	42ab      	cmp	r3, r5
 800cbfe:	dc26      	bgt.n	800cc4e <_printf_common+0x96>
 800cc00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc04:	1e13      	subs	r3, r2, #0
 800cc06:	6822      	ldr	r2, [r4, #0]
 800cc08:	bf18      	it	ne
 800cc0a:	2301      	movne	r3, #1
 800cc0c:	0692      	lsls	r2, r2, #26
 800cc0e:	d42b      	bmi.n	800cc68 <_printf_common+0xb0>
 800cc10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc14:	4649      	mov	r1, r9
 800cc16:	4638      	mov	r0, r7
 800cc18:	47c0      	blx	r8
 800cc1a:	3001      	adds	r0, #1
 800cc1c:	d01e      	beq.n	800cc5c <_printf_common+0xa4>
 800cc1e:	6823      	ldr	r3, [r4, #0]
 800cc20:	68e5      	ldr	r5, [r4, #12]
 800cc22:	6832      	ldr	r2, [r6, #0]
 800cc24:	f003 0306 	and.w	r3, r3, #6
 800cc28:	2b04      	cmp	r3, #4
 800cc2a:	bf08      	it	eq
 800cc2c:	1aad      	subeq	r5, r5, r2
 800cc2e:	68a3      	ldr	r3, [r4, #8]
 800cc30:	6922      	ldr	r2, [r4, #16]
 800cc32:	bf0c      	ite	eq
 800cc34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc38:	2500      	movne	r5, #0
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	bfc4      	itt	gt
 800cc3e:	1a9b      	subgt	r3, r3, r2
 800cc40:	18ed      	addgt	r5, r5, r3
 800cc42:	2600      	movs	r6, #0
 800cc44:	341a      	adds	r4, #26
 800cc46:	42b5      	cmp	r5, r6
 800cc48:	d11a      	bne.n	800cc80 <_printf_common+0xc8>
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	e008      	b.n	800cc60 <_printf_common+0xa8>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	4652      	mov	r2, sl
 800cc52:	4649      	mov	r1, r9
 800cc54:	4638      	mov	r0, r7
 800cc56:	47c0      	blx	r8
 800cc58:	3001      	adds	r0, #1
 800cc5a:	d103      	bne.n	800cc64 <_printf_common+0xac>
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc64:	3501      	adds	r5, #1
 800cc66:	e7c6      	b.n	800cbf6 <_printf_common+0x3e>
 800cc68:	18e1      	adds	r1, r4, r3
 800cc6a:	1c5a      	adds	r2, r3, #1
 800cc6c:	2030      	movs	r0, #48	; 0x30
 800cc6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc72:	4422      	add	r2, r4
 800cc74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc7c:	3302      	adds	r3, #2
 800cc7e:	e7c7      	b.n	800cc10 <_printf_common+0x58>
 800cc80:	2301      	movs	r3, #1
 800cc82:	4622      	mov	r2, r4
 800cc84:	4649      	mov	r1, r9
 800cc86:	4638      	mov	r0, r7
 800cc88:	47c0      	blx	r8
 800cc8a:	3001      	adds	r0, #1
 800cc8c:	d0e6      	beq.n	800cc5c <_printf_common+0xa4>
 800cc8e:	3601      	adds	r6, #1
 800cc90:	e7d9      	b.n	800cc46 <_printf_common+0x8e>
	...

0800cc94 <_printf_i>:
 800cc94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc98:	460c      	mov	r4, r1
 800cc9a:	4691      	mov	r9, r2
 800cc9c:	7e27      	ldrb	r7, [r4, #24]
 800cc9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cca0:	2f78      	cmp	r7, #120	; 0x78
 800cca2:	4680      	mov	r8, r0
 800cca4:	469a      	mov	sl, r3
 800cca6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccaa:	d807      	bhi.n	800ccbc <_printf_i+0x28>
 800ccac:	2f62      	cmp	r7, #98	; 0x62
 800ccae:	d80a      	bhi.n	800ccc6 <_printf_i+0x32>
 800ccb0:	2f00      	cmp	r7, #0
 800ccb2:	f000 80d8 	beq.w	800ce66 <_printf_i+0x1d2>
 800ccb6:	2f58      	cmp	r7, #88	; 0x58
 800ccb8:	f000 80a3 	beq.w	800ce02 <_printf_i+0x16e>
 800ccbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ccc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccc4:	e03a      	b.n	800cd3c <_printf_i+0xa8>
 800ccc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccca:	2b15      	cmp	r3, #21
 800cccc:	d8f6      	bhi.n	800ccbc <_printf_i+0x28>
 800ccce:	a001      	add	r0, pc, #4	; (adr r0, 800ccd4 <_printf_i+0x40>)
 800ccd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ccd4:	0800cd2d 	.word	0x0800cd2d
 800ccd8:	0800cd41 	.word	0x0800cd41
 800ccdc:	0800ccbd 	.word	0x0800ccbd
 800cce0:	0800ccbd 	.word	0x0800ccbd
 800cce4:	0800ccbd 	.word	0x0800ccbd
 800cce8:	0800ccbd 	.word	0x0800ccbd
 800ccec:	0800cd41 	.word	0x0800cd41
 800ccf0:	0800ccbd 	.word	0x0800ccbd
 800ccf4:	0800ccbd 	.word	0x0800ccbd
 800ccf8:	0800ccbd 	.word	0x0800ccbd
 800ccfc:	0800ccbd 	.word	0x0800ccbd
 800cd00:	0800ce4d 	.word	0x0800ce4d
 800cd04:	0800cd71 	.word	0x0800cd71
 800cd08:	0800ce2f 	.word	0x0800ce2f
 800cd0c:	0800ccbd 	.word	0x0800ccbd
 800cd10:	0800ccbd 	.word	0x0800ccbd
 800cd14:	0800ce6f 	.word	0x0800ce6f
 800cd18:	0800ccbd 	.word	0x0800ccbd
 800cd1c:	0800cd71 	.word	0x0800cd71
 800cd20:	0800ccbd 	.word	0x0800ccbd
 800cd24:	0800ccbd 	.word	0x0800ccbd
 800cd28:	0800ce37 	.word	0x0800ce37
 800cd2c:	680b      	ldr	r3, [r1, #0]
 800cd2e:	1d1a      	adds	r2, r3, #4
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	600a      	str	r2, [r1, #0]
 800cd34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	e0a3      	b.n	800ce88 <_printf_i+0x1f4>
 800cd40:	6825      	ldr	r5, [r4, #0]
 800cd42:	6808      	ldr	r0, [r1, #0]
 800cd44:	062e      	lsls	r6, r5, #24
 800cd46:	f100 0304 	add.w	r3, r0, #4
 800cd4a:	d50a      	bpl.n	800cd62 <_printf_i+0xce>
 800cd4c:	6805      	ldr	r5, [r0, #0]
 800cd4e:	600b      	str	r3, [r1, #0]
 800cd50:	2d00      	cmp	r5, #0
 800cd52:	da03      	bge.n	800cd5c <_printf_i+0xc8>
 800cd54:	232d      	movs	r3, #45	; 0x2d
 800cd56:	426d      	negs	r5, r5
 800cd58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd5c:	485e      	ldr	r0, [pc, #376]	; (800ced8 <_printf_i+0x244>)
 800cd5e:	230a      	movs	r3, #10
 800cd60:	e019      	b.n	800cd96 <_printf_i+0x102>
 800cd62:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cd66:	6805      	ldr	r5, [r0, #0]
 800cd68:	600b      	str	r3, [r1, #0]
 800cd6a:	bf18      	it	ne
 800cd6c:	b22d      	sxthne	r5, r5
 800cd6e:	e7ef      	b.n	800cd50 <_printf_i+0xbc>
 800cd70:	680b      	ldr	r3, [r1, #0]
 800cd72:	6825      	ldr	r5, [r4, #0]
 800cd74:	1d18      	adds	r0, r3, #4
 800cd76:	6008      	str	r0, [r1, #0]
 800cd78:	0628      	lsls	r0, r5, #24
 800cd7a:	d501      	bpl.n	800cd80 <_printf_i+0xec>
 800cd7c:	681d      	ldr	r5, [r3, #0]
 800cd7e:	e002      	b.n	800cd86 <_printf_i+0xf2>
 800cd80:	0669      	lsls	r1, r5, #25
 800cd82:	d5fb      	bpl.n	800cd7c <_printf_i+0xe8>
 800cd84:	881d      	ldrh	r5, [r3, #0]
 800cd86:	4854      	ldr	r0, [pc, #336]	; (800ced8 <_printf_i+0x244>)
 800cd88:	2f6f      	cmp	r7, #111	; 0x6f
 800cd8a:	bf0c      	ite	eq
 800cd8c:	2308      	moveq	r3, #8
 800cd8e:	230a      	movne	r3, #10
 800cd90:	2100      	movs	r1, #0
 800cd92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd96:	6866      	ldr	r6, [r4, #4]
 800cd98:	60a6      	str	r6, [r4, #8]
 800cd9a:	2e00      	cmp	r6, #0
 800cd9c:	bfa2      	ittt	ge
 800cd9e:	6821      	ldrge	r1, [r4, #0]
 800cda0:	f021 0104 	bicge.w	r1, r1, #4
 800cda4:	6021      	strge	r1, [r4, #0]
 800cda6:	b90d      	cbnz	r5, 800cdac <_printf_i+0x118>
 800cda8:	2e00      	cmp	r6, #0
 800cdaa:	d04d      	beq.n	800ce48 <_printf_i+0x1b4>
 800cdac:	4616      	mov	r6, r2
 800cdae:	fbb5 f1f3 	udiv	r1, r5, r3
 800cdb2:	fb03 5711 	mls	r7, r3, r1, r5
 800cdb6:	5dc7      	ldrb	r7, [r0, r7]
 800cdb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cdbc:	462f      	mov	r7, r5
 800cdbe:	42bb      	cmp	r3, r7
 800cdc0:	460d      	mov	r5, r1
 800cdc2:	d9f4      	bls.n	800cdae <_printf_i+0x11a>
 800cdc4:	2b08      	cmp	r3, #8
 800cdc6:	d10b      	bne.n	800cde0 <_printf_i+0x14c>
 800cdc8:	6823      	ldr	r3, [r4, #0]
 800cdca:	07df      	lsls	r7, r3, #31
 800cdcc:	d508      	bpl.n	800cde0 <_printf_i+0x14c>
 800cdce:	6923      	ldr	r3, [r4, #16]
 800cdd0:	6861      	ldr	r1, [r4, #4]
 800cdd2:	4299      	cmp	r1, r3
 800cdd4:	bfde      	ittt	le
 800cdd6:	2330      	movle	r3, #48	; 0x30
 800cdd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cddc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cde0:	1b92      	subs	r2, r2, r6
 800cde2:	6122      	str	r2, [r4, #16]
 800cde4:	f8cd a000 	str.w	sl, [sp]
 800cde8:	464b      	mov	r3, r9
 800cdea:	aa03      	add	r2, sp, #12
 800cdec:	4621      	mov	r1, r4
 800cdee:	4640      	mov	r0, r8
 800cdf0:	f7ff fee2 	bl	800cbb8 <_printf_common>
 800cdf4:	3001      	adds	r0, #1
 800cdf6:	d14c      	bne.n	800ce92 <_printf_i+0x1fe>
 800cdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdfc:	b004      	add	sp, #16
 800cdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce02:	4835      	ldr	r0, [pc, #212]	; (800ced8 <_printf_i+0x244>)
 800ce04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce08:	6823      	ldr	r3, [r4, #0]
 800ce0a:	680e      	ldr	r6, [r1, #0]
 800ce0c:	061f      	lsls	r7, r3, #24
 800ce0e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ce12:	600e      	str	r6, [r1, #0]
 800ce14:	d514      	bpl.n	800ce40 <_printf_i+0x1ac>
 800ce16:	07d9      	lsls	r1, r3, #31
 800ce18:	bf44      	itt	mi
 800ce1a:	f043 0320 	orrmi.w	r3, r3, #32
 800ce1e:	6023      	strmi	r3, [r4, #0]
 800ce20:	b91d      	cbnz	r5, 800ce2a <_printf_i+0x196>
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	f023 0320 	bic.w	r3, r3, #32
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	2310      	movs	r3, #16
 800ce2c:	e7b0      	b.n	800cd90 <_printf_i+0xfc>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	f043 0320 	orr.w	r3, r3, #32
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	2378      	movs	r3, #120	; 0x78
 800ce38:	4828      	ldr	r0, [pc, #160]	; (800cedc <_printf_i+0x248>)
 800ce3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce3e:	e7e3      	b.n	800ce08 <_printf_i+0x174>
 800ce40:	065e      	lsls	r6, r3, #25
 800ce42:	bf48      	it	mi
 800ce44:	b2ad      	uxthmi	r5, r5
 800ce46:	e7e6      	b.n	800ce16 <_printf_i+0x182>
 800ce48:	4616      	mov	r6, r2
 800ce4a:	e7bb      	b.n	800cdc4 <_printf_i+0x130>
 800ce4c:	680b      	ldr	r3, [r1, #0]
 800ce4e:	6826      	ldr	r6, [r4, #0]
 800ce50:	6960      	ldr	r0, [r4, #20]
 800ce52:	1d1d      	adds	r5, r3, #4
 800ce54:	600d      	str	r5, [r1, #0]
 800ce56:	0635      	lsls	r5, r6, #24
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	d501      	bpl.n	800ce60 <_printf_i+0x1cc>
 800ce5c:	6018      	str	r0, [r3, #0]
 800ce5e:	e002      	b.n	800ce66 <_printf_i+0x1d2>
 800ce60:	0671      	lsls	r1, r6, #25
 800ce62:	d5fb      	bpl.n	800ce5c <_printf_i+0x1c8>
 800ce64:	8018      	strh	r0, [r3, #0]
 800ce66:	2300      	movs	r3, #0
 800ce68:	6123      	str	r3, [r4, #16]
 800ce6a:	4616      	mov	r6, r2
 800ce6c:	e7ba      	b.n	800cde4 <_printf_i+0x150>
 800ce6e:	680b      	ldr	r3, [r1, #0]
 800ce70:	1d1a      	adds	r2, r3, #4
 800ce72:	600a      	str	r2, [r1, #0]
 800ce74:	681e      	ldr	r6, [r3, #0]
 800ce76:	6862      	ldr	r2, [r4, #4]
 800ce78:	2100      	movs	r1, #0
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f7f3 f9b0 	bl	80001e0 <memchr>
 800ce80:	b108      	cbz	r0, 800ce86 <_printf_i+0x1f2>
 800ce82:	1b80      	subs	r0, r0, r6
 800ce84:	6060      	str	r0, [r4, #4]
 800ce86:	6863      	ldr	r3, [r4, #4]
 800ce88:	6123      	str	r3, [r4, #16]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce90:	e7a8      	b.n	800cde4 <_printf_i+0x150>
 800ce92:	6923      	ldr	r3, [r4, #16]
 800ce94:	4632      	mov	r2, r6
 800ce96:	4649      	mov	r1, r9
 800ce98:	4640      	mov	r0, r8
 800ce9a:	47d0      	blx	sl
 800ce9c:	3001      	adds	r0, #1
 800ce9e:	d0ab      	beq.n	800cdf8 <_printf_i+0x164>
 800cea0:	6823      	ldr	r3, [r4, #0]
 800cea2:	079b      	lsls	r3, r3, #30
 800cea4:	d413      	bmi.n	800cece <_printf_i+0x23a>
 800cea6:	68e0      	ldr	r0, [r4, #12]
 800cea8:	9b03      	ldr	r3, [sp, #12]
 800ceaa:	4298      	cmp	r0, r3
 800ceac:	bfb8      	it	lt
 800ceae:	4618      	movlt	r0, r3
 800ceb0:	e7a4      	b.n	800cdfc <_printf_i+0x168>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	4632      	mov	r2, r6
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	4640      	mov	r0, r8
 800ceba:	47d0      	blx	sl
 800cebc:	3001      	adds	r0, #1
 800cebe:	d09b      	beq.n	800cdf8 <_printf_i+0x164>
 800cec0:	3501      	adds	r5, #1
 800cec2:	68e3      	ldr	r3, [r4, #12]
 800cec4:	9903      	ldr	r1, [sp, #12]
 800cec6:	1a5b      	subs	r3, r3, r1
 800cec8:	42ab      	cmp	r3, r5
 800ceca:	dcf2      	bgt.n	800ceb2 <_printf_i+0x21e>
 800cecc:	e7eb      	b.n	800cea6 <_printf_i+0x212>
 800cece:	2500      	movs	r5, #0
 800ced0:	f104 0619 	add.w	r6, r4, #25
 800ced4:	e7f5      	b.n	800cec2 <_printf_i+0x22e>
 800ced6:	bf00      	nop
 800ced8:	0800f396 	.word	0x0800f396
 800cedc:	0800f3a7 	.word	0x0800f3a7

0800cee0 <_puts_r>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	460e      	mov	r6, r1
 800cee4:	4605      	mov	r5, r0
 800cee6:	b118      	cbz	r0, 800cef0 <_puts_r+0x10>
 800cee8:	6983      	ldr	r3, [r0, #24]
 800ceea:	b90b      	cbnz	r3, 800cef0 <_puts_r+0x10>
 800ceec:	f001 f986 	bl	800e1fc <__sinit>
 800cef0:	69ab      	ldr	r3, [r5, #24]
 800cef2:	68ac      	ldr	r4, [r5, #8]
 800cef4:	b913      	cbnz	r3, 800cefc <_puts_r+0x1c>
 800cef6:	4628      	mov	r0, r5
 800cef8:	f001 f980 	bl	800e1fc <__sinit>
 800cefc:	4b2c      	ldr	r3, [pc, #176]	; (800cfb0 <_puts_r+0xd0>)
 800cefe:	429c      	cmp	r4, r3
 800cf00:	d120      	bne.n	800cf44 <_puts_r+0x64>
 800cf02:	686c      	ldr	r4, [r5, #4]
 800cf04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf06:	07db      	lsls	r3, r3, #31
 800cf08:	d405      	bmi.n	800cf16 <_puts_r+0x36>
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	0598      	lsls	r0, r3, #22
 800cf0e:	d402      	bmi.n	800cf16 <_puts_r+0x36>
 800cf10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf12:	f001 fa16 	bl	800e342 <__retarget_lock_acquire_recursive>
 800cf16:	89a3      	ldrh	r3, [r4, #12]
 800cf18:	0719      	lsls	r1, r3, #28
 800cf1a:	d51d      	bpl.n	800cf58 <_puts_r+0x78>
 800cf1c:	6923      	ldr	r3, [r4, #16]
 800cf1e:	b1db      	cbz	r3, 800cf58 <_puts_r+0x78>
 800cf20:	3e01      	subs	r6, #1
 800cf22:	68a3      	ldr	r3, [r4, #8]
 800cf24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	60a3      	str	r3, [r4, #8]
 800cf2c:	bb39      	cbnz	r1, 800cf7e <_puts_r+0x9e>
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	da38      	bge.n	800cfa4 <_puts_r+0xc4>
 800cf32:	4622      	mov	r2, r4
 800cf34:	210a      	movs	r1, #10
 800cf36:	4628      	mov	r0, r5
 800cf38:	f000 f90e 	bl	800d158 <__swbuf_r>
 800cf3c:	3001      	adds	r0, #1
 800cf3e:	d011      	beq.n	800cf64 <_puts_r+0x84>
 800cf40:	250a      	movs	r5, #10
 800cf42:	e011      	b.n	800cf68 <_puts_r+0x88>
 800cf44:	4b1b      	ldr	r3, [pc, #108]	; (800cfb4 <_puts_r+0xd4>)
 800cf46:	429c      	cmp	r4, r3
 800cf48:	d101      	bne.n	800cf4e <_puts_r+0x6e>
 800cf4a:	68ac      	ldr	r4, [r5, #8]
 800cf4c:	e7da      	b.n	800cf04 <_puts_r+0x24>
 800cf4e:	4b1a      	ldr	r3, [pc, #104]	; (800cfb8 <_puts_r+0xd8>)
 800cf50:	429c      	cmp	r4, r3
 800cf52:	bf08      	it	eq
 800cf54:	68ec      	ldreq	r4, [r5, #12]
 800cf56:	e7d5      	b.n	800cf04 <_puts_r+0x24>
 800cf58:	4621      	mov	r1, r4
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	f000 f94e 	bl	800d1fc <__swsetup_r>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d0dd      	beq.n	800cf20 <_puts_r+0x40>
 800cf64:	f04f 35ff 	mov.w	r5, #4294967295
 800cf68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf6a:	07da      	lsls	r2, r3, #31
 800cf6c:	d405      	bmi.n	800cf7a <_puts_r+0x9a>
 800cf6e:	89a3      	ldrh	r3, [r4, #12]
 800cf70:	059b      	lsls	r3, r3, #22
 800cf72:	d402      	bmi.n	800cf7a <_puts_r+0x9a>
 800cf74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf76:	f001 f9e5 	bl	800e344 <__retarget_lock_release_recursive>
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	bd70      	pop	{r4, r5, r6, pc}
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	da04      	bge.n	800cf8c <_puts_r+0xac>
 800cf82:	69a2      	ldr	r2, [r4, #24]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	dc06      	bgt.n	800cf96 <_puts_r+0xb6>
 800cf88:	290a      	cmp	r1, #10
 800cf8a:	d004      	beq.n	800cf96 <_puts_r+0xb6>
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	6022      	str	r2, [r4, #0]
 800cf92:	7019      	strb	r1, [r3, #0]
 800cf94:	e7c5      	b.n	800cf22 <_puts_r+0x42>
 800cf96:	4622      	mov	r2, r4
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f000 f8dd 	bl	800d158 <__swbuf_r>
 800cf9e:	3001      	adds	r0, #1
 800cfa0:	d1bf      	bne.n	800cf22 <_puts_r+0x42>
 800cfa2:	e7df      	b.n	800cf64 <_puts_r+0x84>
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	250a      	movs	r5, #10
 800cfa8:	1c5a      	adds	r2, r3, #1
 800cfaa:	6022      	str	r2, [r4, #0]
 800cfac:	701d      	strb	r5, [r3, #0]
 800cfae:	e7db      	b.n	800cf68 <_puts_r+0x88>
 800cfb0:	0800f46c 	.word	0x0800f46c
 800cfb4:	0800f48c 	.word	0x0800f48c
 800cfb8:	0800f44c 	.word	0x0800f44c

0800cfbc <puts>:
 800cfbc:	4b02      	ldr	r3, [pc, #8]	; (800cfc8 <puts+0xc>)
 800cfbe:	4601      	mov	r1, r0
 800cfc0:	6818      	ldr	r0, [r3, #0]
 800cfc2:	f7ff bf8d 	b.w	800cee0 <_puts_r>
 800cfc6:	bf00      	nop
 800cfc8:	20000028 	.word	0x20000028

0800cfcc <setvbuf>:
 800cfcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfd0:	461d      	mov	r5, r3
 800cfd2:	4b5d      	ldr	r3, [pc, #372]	; (800d148 <setvbuf+0x17c>)
 800cfd4:	681f      	ldr	r7, [r3, #0]
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	460e      	mov	r6, r1
 800cfda:	4690      	mov	r8, r2
 800cfdc:	b127      	cbz	r7, 800cfe8 <setvbuf+0x1c>
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	b913      	cbnz	r3, 800cfe8 <setvbuf+0x1c>
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	f001 f90a 	bl	800e1fc <__sinit>
 800cfe8:	4b58      	ldr	r3, [pc, #352]	; (800d14c <setvbuf+0x180>)
 800cfea:	429c      	cmp	r4, r3
 800cfec:	d167      	bne.n	800d0be <setvbuf+0xf2>
 800cfee:	687c      	ldr	r4, [r7, #4]
 800cff0:	f1b8 0f02 	cmp.w	r8, #2
 800cff4:	d006      	beq.n	800d004 <setvbuf+0x38>
 800cff6:	f1b8 0f01 	cmp.w	r8, #1
 800cffa:	f200 809f 	bhi.w	800d13c <setvbuf+0x170>
 800cffe:	2d00      	cmp	r5, #0
 800d000:	f2c0 809c 	blt.w	800d13c <setvbuf+0x170>
 800d004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d006:	07db      	lsls	r3, r3, #31
 800d008:	d405      	bmi.n	800d016 <setvbuf+0x4a>
 800d00a:	89a3      	ldrh	r3, [r4, #12]
 800d00c:	0598      	lsls	r0, r3, #22
 800d00e:	d402      	bmi.n	800d016 <setvbuf+0x4a>
 800d010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d012:	f001 f996 	bl	800e342 <__retarget_lock_acquire_recursive>
 800d016:	4621      	mov	r1, r4
 800d018:	4638      	mov	r0, r7
 800d01a:	f001 f85b 	bl	800e0d4 <_fflush_r>
 800d01e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d020:	b141      	cbz	r1, 800d034 <setvbuf+0x68>
 800d022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d026:	4299      	cmp	r1, r3
 800d028:	d002      	beq.n	800d030 <setvbuf+0x64>
 800d02a:	4638      	mov	r0, r7
 800d02c:	f001 fd86 	bl	800eb3c <_free_r>
 800d030:	2300      	movs	r3, #0
 800d032:	6363      	str	r3, [r4, #52]	; 0x34
 800d034:	2300      	movs	r3, #0
 800d036:	61a3      	str	r3, [r4, #24]
 800d038:	6063      	str	r3, [r4, #4]
 800d03a:	89a3      	ldrh	r3, [r4, #12]
 800d03c:	0619      	lsls	r1, r3, #24
 800d03e:	d503      	bpl.n	800d048 <setvbuf+0x7c>
 800d040:	6921      	ldr	r1, [r4, #16]
 800d042:	4638      	mov	r0, r7
 800d044:	f001 fd7a 	bl	800eb3c <_free_r>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d04e:	f023 0303 	bic.w	r3, r3, #3
 800d052:	f1b8 0f02 	cmp.w	r8, #2
 800d056:	81a3      	strh	r3, [r4, #12]
 800d058:	d06c      	beq.n	800d134 <setvbuf+0x168>
 800d05a:	ab01      	add	r3, sp, #4
 800d05c:	466a      	mov	r2, sp
 800d05e:	4621      	mov	r1, r4
 800d060:	4638      	mov	r0, r7
 800d062:	f001 f970 	bl	800e346 <__swhatbuf_r>
 800d066:	89a3      	ldrh	r3, [r4, #12]
 800d068:	4318      	orrs	r0, r3
 800d06a:	81a0      	strh	r0, [r4, #12]
 800d06c:	2d00      	cmp	r5, #0
 800d06e:	d130      	bne.n	800d0d2 <setvbuf+0x106>
 800d070:	9d00      	ldr	r5, [sp, #0]
 800d072:	4628      	mov	r0, r5
 800d074:	f001 f9cc 	bl	800e410 <malloc>
 800d078:	4606      	mov	r6, r0
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d155      	bne.n	800d12a <setvbuf+0x15e>
 800d07e:	f8dd 9000 	ldr.w	r9, [sp]
 800d082:	45a9      	cmp	r9, r5
 800d084:	d14a      	bne.n	800d11c <setvbuf+0x150>
 800d086:	f04f 35ff 	mov.w	r5, #4294967295
 800d08a:	2200      	movs	r2, #0
 800d08c:	60a2      	str	r2, [r4, #8]
 800d08e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d092:	6022      	str	r2, [r4, #0]
 800d094:	6122      	str	r2, [r4, #16]
 800d096:	2201      	movs	r2, #1
 800d098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d09c:	6162      	str	r2, [r4, #20]
 800d09e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d0a0:	f043 0302 	orr.w	r3, r3, #2
 800d0a4:	07d2      	lsls	r2, r2, #31
 800d0a6:	81a3      	strh	r3, [r4, #12]
 800d0a8:	d405      	bmi.n	800d0b6 <setvbuf+0xea>
 800d0aa:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d0ae:	d102      	bne.n	800d0b6 <setvbuf+0xea>
 800d0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0b2:	f001 f947 	bl	800e344 <__retarget_lock_release_recursive>
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	b003      	add	sp, #12
 800d0ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0be:	4b24      	ldr	r3, [pc, #144]	; (800d150 <setvbuf+0x184>)
 800d0c0:	429c      	cmp	r4, r3
 800d0c2:	d101      	bne.n	800d0c8 <setvbuf+0xfc>
 800d0c4:	68bc      	ldr	r4, [r7, #8]
 800d0c6:	e793      	b.n	800cff0 <setvbuf+0x24>
 800d0c8:	4b22      	ldr	r3, [pc, #136]	; (800d154 <setvbuf+0x188>)
 800d0ca:	429c      	cmp	r4, r3
 800d0cc:	bf08      	it	eq
 800d0ce:	68fc      	ldreq	r4, [r7, #12]
 800d0d0:	e78e      	b.n	800cff0 <setvbuf+0x24>
 800d0d2:	2e00      	cmp	r6, #0
 800d0d4:	d0cd      	beq.n	800d072 <setvbuf+0xa6>
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	b913      	cbnz	r3, 800d0e0 <setvbuf+0x114>
 800d0da:	4638      	mov	r0, r7
 800d0dc:	f001 f88e 	bl	800e1fc <__sinit>
 800d0e0:	f1b8 0f01 	cmp.w	r8, #1
 800d0e4:	bf08      	it	eq
 800d0e6:	89a3      	ldrheq	r3, [r4, #12]
 800d0e8:	6026      	str	r6, [r4, #0]
 800d0ea:	bf04      	itt	eq
 800d0ec:	f043 0301 	orreq.w	r3, r3, #1
 800d0f0:	81a3      	strheq	r3, [r4, #12]
 800d0f2:	89a2      	ldrh	r2, [r4, #12]
 800d0f4:	f012 0308 	ands.w	r3, r2, #8
 800d0f8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d0fc:	d01c      	beq.n	800d138 <setvbuf+0x16c>
 800d0fe:	07d3      	lsls	r3, r2, #31
 800d100:	bf41      	itttt	mi
 800d102:	2300      	movmi	r3, #0
 800d104:	426d      	negmi	r5, r5
 800d106:	60a3      	strmi	r3, [r4, #8]
 800d108:	61a5      	strmi	r5, [r4, #24]
 800d10a:	bf58      	it	pl
 800d10c:	60a5      	strpl	r5, [r4, #8]
 800d10e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d110:	f015 0501 	ands.w	r5, r5, #1
 800d114:	d115      	bne.n	800d142 <setvbuf+0x176>
 800d116:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d11a:	e7c8      	b.n	800d0ae <setvbuf+0xe2>
 800d11c:	4648      	mov	r0, r9
 800d11e:	f001 f977 	bl	800e410 <malloc>
 800d122:	4606      	mov	r6, r0
 800d124:	2800      	cmp	r0, #0
 800d126:	d0ae      	beq.n	800d086 <setvbuf+0xba>
 800d128:	464d      	mov	r5, r9
 800d12a:	89a3      	ldrh	r3, [r4, #12]
 800d12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d130:	81a3      	strh	r3, [r4, #12]
 800d132:	e7d0      	b.n	800d0d6 <setvbuf+0x10a>
 800d134:	2500      	movs	r5, #0
 800d136:	e7a8      	b.n	800d08a <setvbuf+0xbe>
 800d138:	60a3      	str	r3, [r4, #8]
 800d13a:	e7e8      	b.n	800d10e <setvbuf+0x142>
 800d13c:	f04f 35ff 	mov.w	r5, #4294967295
 800d140:	e7b9      	b.n	800d0b6 <setvbuf+0xea>
 800d142:	2500      	movs	r5, #0
 800d144:	e7b7      	b.n	800d0b6 <setvbuf+0xea>
 800d146:	bf00      	nop
 800d148:	20000028 	.word	0x20000028
 800d14c:	0800f46c 	.word	0x0800f46c
 800d150:	0800f48c 	.word	0x0800f48c
 800d154:	0800f44c 	.word	0x0800f44c

0800d158 <__swbuf_r>:
 800d158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15a:	460e      	mov	r6, r1
 800d15c:	4614      	mov	r4, r2
 800d15e:	4605      	mov	r5, r0
 800d160:	b118      	cbz	r0, 800d16a <__swbuf_r+0x12>
 800d162:	6983      	ldr	r3, [r0, #24]
 800d164:	b90b      	cbnz	r3, 800d16a <__swbuf_r+0x12>
 800d166:	f001 f849 	bl	800e1fc <__sinit>
 800d16a:	4b21      	ldr	r3, [pc, #132]	; (800d1f0 <__swbuf_r+0x98>)
 800d16c:	429c      	cmp	r4, r3
 800d16e:	d12b      	bne.n	800d1c8 <__swbuf_r+0x70>
 800d170:	686c      	ldr	r4, [r5, #4]
 800d172:	69a3      	ldr	r3, [r4, #24]
 800d174:	60a3      	str	r3, [r4, #8]
 800d176:	89a3      	ldrh	r3, [r4, #12]
 800d178:	071a      	lsls	r2, r3, #28
 800d17a:	d52f      	bpl.n	800d1dc <__swbuf_r+0x84>
 800d17c:	6923      	ldr	r3, [r4, #16]
 800d17e:	b36b      	cbz	r3, 800d1dc <__swbuf_r+0x84>
 800d180:	6923      	ldr	r3, [r4, #16]
 800d182:	6820      	ldr	r0, [r4, #0]
 800d184:	1ac0      	subs	r0, r0, r3
 800d186:	6963      	ldr	r3, [r4, #20]
 800d188:	b2f6      	uxtb	r6, r6
 800d18a:	4283      	cmp	r3, r0
 800d18c:	4637      	mov	r7, r6
 800d18e:	dc04      	bgt.n	800d19a <__swbuf_r+0x42>
 800d190:	4621      	mov	r1, r4
 800d192:	4628      	mov	r0, r5
 800d194:	f000 ff9e 	bl	800e0d4 <_fflush_r>
 800d198:	bb30      	cbnz	r0, 800d1e8 <__swbuf_r+0x90>
 800d19a:	68a3      	ldr	r3, [r4, #8]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	60a3      	str	r3, [r4, #8]
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	6022      	str	r2, [r4, #0]
 800d1a6:	701e      	strb	r6, [r3, #0]
 800d1a8:	6963      	ldr	r3, [r4, #20]
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	4283      	cmp	r3, r0
 800d1ae:	d004      	beq.n	800d1ba <__swbuf_r+0x62>
 800d1b0:	89a3      	ldrh	r3, [r4, #12]
 800d1b2:	07db      	lsls	r3, r3, #31
 800d1b4:	d506      	bpl.n	800d1c4 <__swbuf_r+0x6c>
 800d1b6:	2e0a      	cmp	r6, #10
 800d1b8:	d104      	bne.n	800d1c4 <__swbuf_r+0x6c>
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4628      	mov	r0, r5
 800d1be:	f000 ff89 	bl	800e0d4 <_fflush_r>
 800d1c2:	b988      	cbnz	r0, 800d1e8 <__swbuf_r+0x90>
 800d1c4:	4638      	mov	r0, r7
 800d1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1c8:	4b0a      	ldr	r3, [pc, #40]	; (800d1f4 <__swbuf_r+0x9c>)
 800d1ca:	429c      	cmp	r4, r3
 800d1cc:	d101      	bne.n	800d1d2 <__swbuf_r+0x7a>
 800d1ce:	68ac      	ldr	r4, [r5, #8]
 800d1d0:	e7cf      	b.n	800d172 <__swbuf_r+0x1a>
 800d1d2:	4b09      	ldr	r3, [pc, #36]	; (800d1f8 <__swbuf_r+0xa0>)
 800d1d4:	429c      	cmp	r4, r3
 800d1d6:	bf08      	it	eq
 800d1d8:	68ec      	ldreq	r4, [r5, #12]
 800d1da:	e7ca      	b.n	800d172 <__swbuf_r+0x1a>
 800d1dc:	4621      	mov	r1, r4
 800d1de:	4628      	mov	r0, r5
 800d1e0:	f000 f80c 	bl	800d1fc <__swsetup_r>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d0cb      	beq.n	800d180 <__swbuf_r+0x28>
 800d1e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d1ec:	e7ea      	b.n	800d1c4 <__swbuf_r+0x6c>
 800d1ee:	bf00      	nop
 800d1f0:	0800f46c 	.word	0x0800f46c
 800d1f4:	0800f48c 	.word	0x0800f48c
 800d1f8:	0800f44c 	.word	0x0800f44c

0800d1fc <__swsetup_r>:
 800d1fc:	4b32      	ldr	r3, [pc, #200]	; (800d2c8 <__swsetup_r+0xcc>)
 800d1fe:	b570      	push	{r4, r5, r6, lr}
 800d200:	681d      	ldr	r5, [r3, #0]
 800d202:	4606      	mov	r6, r0
 800d204:	460c      	mov	r4, r1
 800d206:	b125      	cbz	r5, 800d212 <__swsetup_r+0x16>
 800d208:	69ab      	ldr	r3, [r5, #24]
 800d20a:	b913      	cbnz	r3, 800d212 <__swsetup_r+0x16>
 800d20c:	4628      	mov	r0, r5
 800d20e:	f000 fff5 	bl	800e1fc <__sinit>
 800d212:	4b2e      	ldr	r3, [pc, #184]	; (800d2cc <__swsetup_r+0xd0>)
 800d214:	429c      	cmp	r4, r3
 800d216:	d10f      	bne.n	800d238 <__swsetup_r+0x3c>
 800d218:	686c      	ldr	r4, [r5, #4]
 800d21a:	89a3      	ldrh	r3, [r4, #12]
 800d21c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d220:	0719      	lsls	r1, r3, #28
 800d222:	d42c      	bmi.n	800d27e <__swsetup_r+0x82>
 800d224:	06dd      	lsls	r5, r3, #27
 800d226:	d411      	bmi.n	800d24c <__swsetup_r+0x50>
 800d228:	2309      	movs	r3, #9
 800d22a:	6033      	str	r3, [r6, #0]
 800d22c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d230:	81a3      	strh	r3, [r4, #12]
 800d232:	f04f 30ff 	mov.w	r0, #4294967295
 800d236:	e03e      	b.n	800d2b6 <__swsetup_r+0xba>
 800d238:	4b25      	ldr	r3, [pc, #148]	; (800d2d0 <__swsetup_r+0xd4>)
 800d23a:	429c      	cmp	r4, r3
 800d23c:	d101      	bne.n	800d242 <__swsetup_r+0x46>
 800d23e:	68ac      	ldr	r4, [r5, #8]
 800d240:	e7eb      	b.n	800d21a <__swsetup_r+0x1e>
 800d242:	4b24      	ldr	r3, [pc, #144]	; (800d2d4 <__swsetup_r+0xd8>)
 800d244:	429c      	cmp	r4, r3
 800d246:	bf08      	it	eq
 800d248:	68ec      	ldreq	r4, [r5, #12]
 800d24a:	e7e6      	b.n	800d21a <__swsetup_r+0x1e>
 800d24c:	0758      	lsls	r0, r3, #29
 800d24e:	d512      	bpl.n	800d276 <__swsetup_r+0x7a>
 800d250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d252:	b141      	cbz	r1, 800d266 <__swsetup_r+0x6a>
 800d254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d258:	4299      	cmp	r1, r3
 800d25a:	d002      	beq.n	800d262 <__swsetup_r+0x66>
 800d25c:	4630      	mov	r0, r6
 800d25e:	f001 fc6d 	bl	800eb3c <_free_r>
 800d262:	2300      	movs	r3, #0
 800d264:	6363      	str	r3, [r4, #52]	; 0x34
 800d266:	89a3      	ldrh	r3, [r4, #12]
 800d268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d26c:	81a3      	strh	r3, [r4, #12]
 800d26e:	2300      	movs	r3, #0
 800d270:	6063      	str	r3, [r4, #4]
 800d272:	6923      	ldr	r3, [r4, #16]
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	89a3      	ldrh	r3, [r4, #12]
 800d278:	f043 0308 	orr.w	r3, r3, #8
 800d27c:	81a3      	strh	r3, [r4, #12]
 800d27e:	6923      	ldr	r3, [r4, #16]
 800d280:	b94b      	cbnz	r3, 800d296 <__swsetup_r+0x9a>
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d28c:	d003      	beq.n	800d296 <__swsetup_r+0x9a>
 800d28e:	4621      	mov	r1, r4
 800d290:	4630      	mov	r0, r6
 800d292:	f001 f87d 	bl	800e390 <__smakebuf_r>
 800d296:	89a0      	ldrh	r0, [r4, #12]
 800d298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d29c:	f010 0301 	ands.w	r3, r0, #1
 800d2a0:	d00a      	beq.n	800d2b8 <__swsetup_r+0xbc>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	60a3      	str	r3, [r4, #8]
 800d2a6:	6963      	ldr	r3, [r4, #20]
 800d2a8:	425b      	negs	r3, r3
 800d2aa:	61a3      	str	r3, [r4, #24]
 800d2ac:	6923      	ldr	r3, [r4, #16]
 800d2ae:	b943      	cbnz	r3, 800d2c2 <__swsetup_r+0xc6>
 800d2b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2b4:	d1ba      	bne.n	800d22c <__swsetup_r+0x30>
 800d2b6:	bd70      	pop	{r4, r5, r6, pc}
 800d2b8:	0781      	lsls	r1, r0, #30
 800d2ba:	bf58      	it	pl
 800d2bc:	6963      	ldrpl	r3, [r4, #20]
 800d2be:	60a3      	str	r3, [r4, #8]
 800d2c0:	e7f4      	b.n	800d2ac <__swsetup_r+0xb0>
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	e7f7      	b.n	800d2b6 <__swsetup_r+0xba>
 800d2c6:	bf00      	nop
 800d2c8:	20000028 	.word	0x20000028
 800d2cc:	0800f46c 	.word	0x0800f46c
 800d2d0:	0800f48c 	.word	0x0800f48c
 800d2d4:	0800f44c 	.word	0x0800f44c

0800d2d8 <quorem>:
 800d2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2dc:	6903      	ldr	r3, [r0, #16]
 800d2de:	690c      	ldr	r4, [r1, #16]
 800d2e0:	42a3      	cmp	r3, r4
 800d2e2:	4607      	mov	r7, r0
 800d2e4:	f2c0 8081 	blt.w	800d3ea <quorem+0x112>
 800d2e8:	3c01      	subs	r4, #1
 800d2ea:	f101 0814 	add.w	r8, r1, #20
 800d2ee:	f100 0514 	add.w	r5, r0, #20
 800d2f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2f6:	9301      	str	r3, [sp, #4]
 800d2f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d300:	3301      	adds	r3, #1
 800d302:	429a      	cmp	r2, r3
 800d304:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d308:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d30c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d310:	d331      	bcc.n	800d376 <quorem+0x9e>
 800d312:	f04f 0e00 	mov.w	lr, #0
 800d316:	4640      	mov	r0, r8
 800d318:	46ac      	mov	ip, r5
 800d31a:	46f2      	mov	sl, lr
 800d31c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d320:	b293      	uxth	r3, r2
 800d322:	fb06 e303 	mla	r3, r6, r3, lr
 800d326:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	ebaa 0303 	sub.w	r3, sl, r3
 800d330:	0c12      	lsrs	r2, r2, #16
 800d332:	f8dc a000 	ldr.w	sl, [ip]
 800d336:	fb06 e202 	mla	r2, r6, r2, lr
 800d33a:	fa13 f38a 	uxtah	r3, r3, sl
 800d33e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d342:	fa1f fa82 	uxth.w	sl, r2
 800d346:	f8dc 2000 	ldr.w	r2, [ip]
 800d34a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d34e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d352:	b29b      	uxth	r3, r3
 800d354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d358:	4581      	cmp	r9, r0
 800d35a:	f84c 3b04 	str.w	r3, [ip], #4
 800d35e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d362:	d2db      	bcs.n	800d31c <quorem+0x44>
 800d364:	f855 300b 	ldr.w	r3, [r5, fp]
 800d368:	b92b      	cbnz	r3, 800d376 <quorem+0x9e>
 800d36a:	9b01      	ldr	r3, [sp, #4]
 800d36c:	3b04      	subs	r3, #4
 800d36e:	429d      	cmp	r5, r3
 800d370:	461a      	mov	r2, r3
 800d372:	d32e      	bcc.n	800d3d2 <quorem+0xfa>
 800d374:	613c      	str	r4, [r7, #16]
 800d376:	4638      	mov	r0, r7
 800d378:	f001 fad0 	bl	800e91c <__mcmp>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	db24      	blt.n	800d3ca <quorem+0xf2>
 800d380:	3601      	adds	r6, #1
 800d382:	4628      	mov	r0, r5
 800d384:	f04f 0c00 	mov.w	ip, #0
 800d388:	f858 2b04 	ldr.w	r2, [r8], #4
 800d38c:	f8d0 e000 	ldr.w	lr, [r0]
 800d390:	b293      	uxth	r3, r2
 800d392:	ebac 0303 	sub.w	r3, ip, r3
 800d396:	0c12      	lsrs	r2, r2, #16
 800d398:	fa13 f38e 	uxtah	r3, r3, lr
 800d39c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d3a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3aa:	45c1      	cmp	r9, r8
 800d3ac:	f840 3b04 	str.w	r3, [r0], #4
 800d3b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d3b4:	d2e8      	bcs.n	800d388 <quorem+0xb0>
 800d3b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3be:	b922      	cbnz	r2, 800d3ca <quorem+0xf2>
 800d3c0:	3b04      	subs	r3, #4
 800d3c2:	429d      	cmp	r5, r3
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	d30a      	bcc.n	800d3de <quorem+0x106>
 800d3c8:	613c      	str	r4, [r7, #16]
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	b003      	add	sp, #12
 800d3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d2:	6812      	ldr	r2, [r2, #0]
 800d3d4:	3b04      	subs	r3, #4
 800d3d6:	2a00      	cmp	r2, #0
 800d3d8:	d1cc      	bne.n	800d374 <quorem+0x9c>
 800d3da:	3c01      	subs	r4, #1
 800d3dc:	e7c7      	b.n	800d36e <quorem+0x96>
 800d3de:	6812      	ldr	r2, [r2, #0]
 800d3e0:	3b04      	subs	r3, #4
 800d3e2:	2a00      	cmp	r2, #0
 800d3e4:	d1f0      	bne.n	800d3c8 <quorem+0xf0>
 800d3e6:	3c01      	subs	r4, #1
 800d3e8:	e7eb      	b.n	800d3c2 <quorem+0xea>
 800d3ea:	2000      	movs	r0, #0
 800d3ec:	e7ee      	b.n	800d3cc <quorem+0xf4>
	...

0800d3f0 <_dtoa_r>:
 800d3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f4:	ed2d 8b02 	vpush	{d8}
 800d3f8:	ec57 6b10 	vmov	r6, r7, d0
 800d3fc:	b095      	sub	sp, #84	; 0x54
 800d3fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d400:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d404:	9105      	str	r1, [sp, #20]
 800d406:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d40a:	4604      	mov	r4, r0
 800d40c:	9209      	str	r2, [sp, #36]	; 0x24
 800d40e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d410:	b975      	cbnz	r5, 800d430 <_dtoa_r+0x40>
 800d412:	2010      	movs	r0, #16
 800d414:	f000 fffc 	bl	800e410 <malloc>
 800d418:	4602      	mov	r2, r0
 800d41a:	6260      	str	r0, [r4, #36]	; 0x24
 800d41c:	b920      	cbnz	r0, 800d428 <_dtoa_r+0x38>
 800d41e:	4bb2      	ldr	r3, [pc, #712]	; (800d6e8 <_dtoa_r+0x2f8>)
 800d420:	21ea      	movs	r1, #234	; 0xea
 800d422:	48b2      	ldr	r0, [pc, #712]	; (800d6ec <_dtoa_r+0x2fc>)
 800d424:	f001 fc9a 	bl	800ed5c <__assert_func>
 800d428:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d42c:	6005      	str	r5, [r0, #0]
 800d42e:	60c5      	str	r5, [r0, #12]
 800d430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d432:	6819      	ldr	r1, [r3, #0]
 800d434:	b151      	cbz	r1, 800d44c <_dtoa_r+0x5c>
 800d436:	685a      	ldr	r2, [r3, #4]
 800d438:	604a      	str	r2, [r1, #4]
 800d43a:	2301      	movs	r3, #1
 800d43c:	4093      	lsls	r3, r2
 800d43e:	608b      	str	r3, [r1, #8]
 800d440:	4620      	mov	r0, r4
 800d442:	f001 f82d 	bl	800e4a0 <_Bfree>
 800d446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d448:	2200      	movs	r2, #0
 800d44a:	601a      	str	r2, [r3, #0]
 800d44c:	1e3b      	subs	r3, r7, #0
 800d44e:	bfb9      	ittee	lt
 800d450:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d454:	9303      	strlt	r3, [sp, #12]
 800d456:	2300      	movge	r3, #0
 800d458:	f8c8 3000 	strge.w	r3, [r8]
 800d45c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d460:	4ba3      	ldr	r3, [pc, #652]	; (800d6f0 <_dtoa_r+0x300>)
 800d462:	bfbc      	itt	lt
 800d464:	2201      	movlt	r2, #1
 800d466:	f8c8 2000 	strlt.w	r2, [r8]
 800d46a:	ea33 0309 	bics.w	r3, r3, r9
 800d46e:	d11b      	bne.n	800d4a8 <_dtoa_r+0xb8>
 800d470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d472:	f242 730f 	movw	r3, #9999	; 0x270f
 800d476:	6013      	str	r3, [r2, #0]
 800d478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d47c:	4333      	orrs	r3, r6
 800d47e:	f000 857a 	beq.w	800df76 <_dtoa_r+0xb86>
 800d482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d484:	b963      	cbnz	r3, 800d4a0 <_dtoa_r+0xb0>
 800d486:	4b9b      	ldr	r3, [pc, #620]	; (800d6f4 <_dtoa_r+0x304>)
 800d488:	e024      	b.n	800d4d4 <_dtoa_r+0xe4>
 800d48a:	4b9b      	ldr	r3, [pc, #620]	; (800d6f8 <_dtoa_r+0x308>)
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	3308      	adds	r3, #8
 800d490:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	9800      	ldr	r0, [sp, #0]
 800d496:	b015      	add	sp, #84	; 0x54
 800d498:	ecbd 8b02 	vpop	{d8}
 800d49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a0:	4b94      	ldr	r3, [pc, #592]	; (800d6f4 <_dtoa_r+0x304>)
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	3303      	adds	r3, #3
 800d4a6:	e7f3      	b.n	800d490 <_dtoa_r+0xa0>
 800d4a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	ec51 0b17 	vmov	r0, r1, d7
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d4b8:	f7f3 fb06 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4bc:	4680      	mov	r8, r0
 800d4be:	b158      	cbz	r0, 800d4d8 <_dtoa_r+0xe8>
 800d4c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	6013      	str	r3, [r2, #0]
 800d4c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f000 8551 	beq.w	800df70 <_dtoa_r+0xb80>
 800d4ce:	488b      	ldr	r0, [pc, #556]	; (800d6fc <_dtoa_r+0x30c>)
 800d4d0:	6018      	str	r0, [r3, #0]
 800d4d2:	1e43      	subs	r3, r0, #1
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	e7dd      	b.n	800d494 <_dtoa_r+0xa4>
 800d4d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d4dc:	aa12      	add	r2, sp, #72	; 0x48
 800d4de:	a913      	add	r1, sp, #76	; 0x4c
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f001 fabf 	bl	800ea64 <__d2b>
 800d4e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d4ea:	4683      	mov	fp, r0
 800d4ec:	2d00      	cmp	r5, #0
 800d4ee:	d07c      	beq.n	800d5ea <_dtoa_r+0x1fa>
 800d4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d4f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d4fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d502:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d50a:	4b7d      	ldr	r3, [pc, #500]	; (800d700 <_dtoa_r+0x310>)
 800d50c:	2200      	movs	r2, #0
 800d50e:	4630      	mov	r0, r6
 800d510:	4639      	mov	r1, r7
 800d512:	f7f2 feb9 	bl	8000288 <__aeabi_dsub>
 800d516:	a36e      	add	r3, pc, #440	; (adr r3, 800d6d0 <_dtoa_r+0x2e0>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	f7f3 f86c 	bl	80005f8 <__aeabi_dmul>
 800d520:	a36d      	add	r3, pc, #436	; (adr r3, 800d6d8 <_dtoa_r+0x2e8>)
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	f7f2 feb1 	bl	800028c <__adddf3>
 800d52a:	4606      	mov	r6, r0
 800d52c:	4628      	mov	r0, r5
 800d52e:	460f      	mov	r7, r1
 800d530:	f7f2 fff8 	bl	8000524 <__aeabi_i2d>
 800d534:	a36a      	add	r3, pc, #424	; (adr r3, 800d6e0 <_dtoa_r+0x2f0>)
 800d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53a:	f7f3 f85d 	bl	80005f8 <__aeabi_dmul>
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	4630      	mov	r0, r6
 800d544:	4639      	mov	r1, r7
 800d546:	f7f2 fea1 	bl	800028c <__adddf3>
 800d54a:	4606      	mov	r6, r0
 800d54c:	460f      	mov	r7, r1
 800d54e:	f7f3 fb03 	bl	8000b58 <__aeabi_d2iz>
 800d552:	2200      	movs	r2, #0
 800d554:	4682      	mov	sl, r0
 800d556:	2300      	movs	r3, #0
 800d558:	4630      	mov	r0, r6
 800d55a:	4639      	mov	r1, r7
 800d55c:	f7f3 fabe 	bl	8000adc <__aeabi_dcmplt>
 800d560:	b148      	cbz	r0, 800d576 <_dtoa_r+0x186>
 800d562:	4650      	mov	r0, sl
 800d564:	f7f2 ffde 	bl	8000524 <__aeabi_i2d>
 800d568:	4632      	mov	r2, r6
 800d56a:	463b      	mov	r3, r7
 800d56c:	f7f3 faac 	bl	8000ac8 <__aeabi_dcmpeq>
 800d570:	b908      	cbnz	r0, 800d576 <_dtoa_r+0x186>
 800d572:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d576:	f1ba 0f16 	cmp.w	sl, #22
 800d57a:	d854      	bhi.n	800d626 <_dtoa_r+0x236>
 800d57c:	4b61      	ldr	r3, [pc, #388]	; (800d704 <_dtoa_r+0x314>)
 800d57e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d586:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d58a:	f7f3 faa7 	bl	8000adc <__aeabi_dcmplt>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d04b      	beq.n	800d62a <_dtoa_r+0x23a>
 800d592:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d596:	2300      	movs	r3, #0
 800d598:	930e      	str	r3, [sp, #56]	; 0x38
 800d59a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d59c:	1b5d      	subs	r5, r3, r5
 800d59e:	1e6b      	subs	r3, r5, #1
 800d5a0:	9304      	str	r3, [sp, #16]
 800d5a2:	bf43      	ittte	mi
 800d5a4:	2300      	movmi	r3, #0
 800d5a6:	f1c5 0801 	rsbmi	r8, r5, #1
 800d5aa:	9304      	strmi	r3, [sp, #16]
 800d5ac:	f04f 0800 	movpl.w	r8, #0
 800d5b0:	f1ba 0f00 	cmp.w	sl, #0
 800d5b4:	db3b      	blt.n	800d62e <_dtoa_r+0x23e>
 800d5b6:	9b04      	ldr	r3, [sp, #16]
 800d5b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d5bc:	4453      	add	r3, sl
 800d5be:	9304      	str	r3, [sp, #16]
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	9306      	str	r3, [sp, #24]
 800d5c4:	9b05      	ldr	r3, [sp, #20]
 800d5c6:	2b09      	cmp	r3, #9
 800d5c8:	d869      	bhi.n	800d69e <_dtoa_r+0x2ae>
 800d5ca:	2b05      	cmp	r3, #5
 800d5cc:	bfc4      	itt	gt
 800d5ce:	3b04      	subgt	r3, #4
 800d5d0:	9305      	strgt	r3, [sp, #20]
 800d5d2:	9b05      	ldr	r3, [sp, #20]
 800d5d4:	f1a3 0302 	sub.w	r3, r3, #2
 800d5d8:	bfcc      	ite	gt
 800d5da:	2500      	movgt	r5, #0
 800d5dc:	2501      	movle	r5, #1
 800d5de:	2b03      	cmp	r3, #3
 800d5e0:	d869      	bhi.n	800d6b6 <_dtoa_r+0x2c6>
 800d5e2:	e8df f003 	tbb	[pc, r3]
 800d5e6:	4e2c      	.short	0x4e2c
 800d5e8:	5a4c      	.short	0x5a4c
 800d5ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d5ee:	441d      	add	r5, r3
 800d5f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d5f4:	2b20      	cmp	r3, #32
 800d5f6:	bfc1      	itttt	gt
 800d5f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d600:	fa09 f303 	lslgt.w	r3, r9, r3
 800d604:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d608:	bfda      	itte	le
 800d60a:	f1c3 0320 	rsble	r3, r3, #32
 800d60e:	fa06 f003 	lslle.w	r0, r6, r3
 800d612:	4318      	orrgt	r0, r3
 800d614:	f7f2 ff76 	bl	8000504 <__aeabi_ui2d>
 800d618:	2301      	movs	r3, #1
 800d61a:	4606      	mov	r6, r0
 800d61c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d620:	3d01      	subs	r5, #1
 800d622:	9310      	str	r3, [sp, #64]	; 0x40
 800d624:	e771      	b.n	800d50a <_dtoa_r+0x11a>
 800d626:	2301      	movs	r3, #1
 800d628:	e7b6      	b.n	800d598 <_dtoa_r+0x1a8>
 800d62a:	900e      	str	r0, [sp, #56]	; 0x38
 800d62c:	e7b5      	b.n	800d59a <_dtoa_r+0x1aa>
 800d62e:	f1ca 0300 	rsb	r3, sl, #0
 800d632:	9306      	str	r3, [sp, #24]
 800d634:	2300      	movs	r3, #0
 800d636:	eba8 080a 	sub.w	r8, r8, sl
 800d63a:	930d      	str	r3, [sp, #52]	; 0x34
 800d63c:	e7c2      	b.n	800d5c4 <_dtoa_r+0x1d4>
 800d63e:	2300      	movs	r3, #0
 800d640:	9308      	str	r3, [sp, #32]
 800d642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d644:	2b00      	cmp	r3, #0
 800d646:	dc39      	bgt.n	800d6bc <_dtoa_r+0x2cc>
 800d648:	f04f 0901 	mov.w	r9, #1
 800d64c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d650:	464b      	mov	r3, r9
 800d652:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d656:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d658:	2200      	movs	r2, #0
 800d65a:	6042      	str	r2, [r0, #4]
 800d65c:	2204      	movs	r2, #4
 800d65e:	f102 0614 	add.w	r6, r2, #20
 800d662:	429e      	cmp	r6, r3
 800d664:	6841      	ldr	r1, [r0, #4]
 800d666:	d92f      	bls.n	800d6c8 <_dtoa_r+0x2d8>
 800d668:	4620      	mov	r0, r4
 800d66a:	f000 fed9 	bl	800e420 <_Balloc>
 800d66e:	9000      	str	r0, [sp, #0]
 800d670:	2800      	cmp	r0, #0
 800d672:	d14b      	bne.n	800d70c <_dtoa_r+0x31c>
 800d674:	4b24      	ldr	r3, [pc, #144]	; (800d708 <_dtoa_r+0x318>)
 800d676:	4602      	mov	r2, r0
 800d678:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d67c:	e6d1      	b.n	800d422 <_dtoa_r+0x32>
 800d67e:	2301      	movs	r3, #1
 800d680:	e7de      	b.n	800d640 <_dtoa_r+0x250>
 800d682:	2300      	movs	r3, #0
 800d684:	9308      	str	r3, [sp, #32]
 800d686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d688:	eb0a 0903 	add.w	r9, sl, r3
 800d68c:	f109 0301 	add.w	r3, r9, #1
 800d690:	2b01      	cmp	r3, #1
 800d692:	9301      	str	r3, [sp, #4]
 800d694:	bfb8      	it	lt
 800d696:	2301      	movlt	r3, #1
 800d698:	e7dd      	b.n	800d656 <_dtoa_r+0x266>
 800d69a:	2301      	movs	r3, #1
 800d69c:	e7f2      	b.n	800d684 <_dtoa_r+0x294>
 800d69e:	2501      	movs	r5, #1
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	9305      	str	r3, [sp, #20]
 800d6a4:	9508      	str	r5, [sp, #32]
 800d6a6:	f04f 39ff 	mov.w	r9, #4294967295
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800d6b0:	2312      	movs	r3, #18
 800d6b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d6b4:	e7cf      	b.n	800d656 <_dtoa_r+0x266>
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	9308      	str	r3, [sp, #32]
 800d6ba:	e7f4      	b.n	800d6a6 <_dtoa_r+0x2b6>
 800d6bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d6c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d6c4:	464b      	mov	r3, r9
 800d6c6:	e7c6      	b.n	800d656 <_dtoa_r+0x266>
 800d6c8:	3101      	adds	r1, #1
 800d6ca:	6041      	str	r1, [r0, #4]
 800d6cc:	0052      	lsls	r2, r2, #1
 800d6ce:	e7c6      	b.n	800d65e <_dtoa_r+0x26e>
 800d6d0:	636f4361 	.word	0x636f4361
 800d6d4:	3fd287a7 	.word	0x3fd287a7
 800d6d8:	8b60c8b3 	.word	0x8b60c8b3
 800d6dc:	3fc68a28 	.word	0x3fc68a28
 800d6e0:	509f79fb 	.word	0x509f79fb
 800d6e4:	3fd34413 	.word	0x3fd34413
 800d6e8:	0800f3c5 	.word	0x0800f3c5
 800d6ec:	0800f3dc 	.word	0x0800f3dc
 800d6f0:	7ff00000 	.word	0x7ff00000
 800d6f4:	0800f3c1 	.word	0x0800f3c1
 800d6f8:	0800f3b8 	.word	0x0800f3b8
 800d6fc:	0800f395 	.word	0x0800f395
 800d700:	3ff80000 	.word	0x3ff80000
 800d704:	0800f538 	.word	0x0800f538
 800d708:	0800f43b 	.word	0x0800f43b
 800d70c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d70e:	9a00      	ldr	r2, [sp, #0]
 800d710:	601a      	str	r2, [r3, #0]
 800d712:	9b01      	ldr	r3, [sp, #4]
 800d714:	2b0e      	cmp	r3, #14
 800d716:	f200 80ad 	bhi.w	800d874 <_dtoa_r+0x484>
 800d71a:	2d00      	cmp	r5, #0
 800d71c:	f000 80aa 	beq.w	800d874 <_dtoa_r+0x484>
 800d720:	f1ba 0f00 	cmp.w	sl, #0
 800d724:	dd36      	ble.n	800d794 <_dtoa_r+0x3a4>
 800d726:	4ac3      	ldr	r2, [pc, #780]	; (800da34 <_dtoa_r+0x644>)
 800d728:	f00a 030f 	and.w	r3, sl, #15
 800d72c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d730:	ed93 7b00 	vldr	d7, [r3]
 800d734:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d738:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d73c:	eeb0 8a47 	vmov.f32	s16, s14
 800d740:	eef0 8a67 	vmov.f32	s17, s15
 800d744:	d016      	beq.n	800d774 <_dtoa_r+0x384>
 800d746:	4bbc      	ldr	r3, [pc, #752]	; (800da38 <_dtoa_r+0x648>)
 800d748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d74c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d750:	f7f3 f87c 	bl	800084c <__aeabi_ddiv>
 800d754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d758:	f007 070f 	and.w	r7, r7, #15
 800d75c:	2503      	movs	r5, #3
 800d75e:	4eb6      	ldr	r6, [pc, #728]	; (800da38 <_dtoa_r+0x648>)
 800d760:	b957      	cbnz	r7, 800d778 <_dtoa_r+0x388>
 800d762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d766:	ec53 2b18 	vmov	r2, r3, d8
 800d76a:	f7f3 f86f 	bl	800084c <__aeabi_ddiv>
 800d76e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d772:	e029      	b.n	800d7c8 <_dtoa_r+0x3d8>
 800d774:	2502      	movs	r5, #2
 800d776:	e7f2      	b.n	800d75e <_dtoa_r+0x36e>
 800d778:	07f9      	lsls	r1, r7, #31
 800d77a:	d508      	bpl.n	800d78e <_dtoa_r+0x39e>
 800d77c:	ec51 0b18 	vmov	r0, r1, d8
 800d780:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d784:	f7f2 ff38 	bl	80005f8 <__aeabi_dmul>
 800d788:	ec41 0b18 	vmov	d8, r0, r1
 800d78c:	3501      	adds	r5, #1
 800d78e:	107f      	asrs	r7, r7, #1
 800d790:	3608      	adds	r6, #8
 800d792:	e7e5      	b.n	800d760 <_dtoa_r+0x370>
 800d794:	f000 80a6 	beq.w	800d8e4 <_dtoa_r+0x4f4>
 800d798:	f1ca 0600 	rsb	r6, sl, #0
 800d79c:	4ba5      	ldr	r3, [pc, #660]	; (800da34 <_dtoa_r+0x644>)
 800d79e:	4fa6      	ldr	r7, [pc, #664]	; (800da38 <_dtoa_r+0x648>)
 800d7a0:	f006 020f 	and.w	r2, r6, #15
 800d7a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d7b0:	f7f2 ff22 	bl	80005f8 <__aeabi_dmul>
 800d7b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7b8:	1136      	asrs	r6, r6, #4
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2502      	movs	r5, #2
 800d7be:	2e00      	cmp	r6, #0
 800d7c0:	f040 8085 	bne.w	800d8ce <_dtoa_r+0x4de>
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1d2      	bne.n	800d76e <_dtoa_r+0x37e>
 800d7c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 808c 	beq.w	800d8e8 <_dtoa_r+0x4f8>
 800d7d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d7d4:	4b99      	ldr	r3, [pc, #612]	; (800da3c <_dtoa_r+0x64c>)
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	4630      	mov	r0, r6
 800d7da:	4639      	mov	r1, r7
 800d7dc:	f7f3 f97e 	bl	8000adc <__aeabi_dcmplt>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	f000 8081 	beq.w	800d8e8 <_dtoa_r+0x4f8>
 800d7e6:	9b01      	ldr	r3, [sp, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d07d      	beq.n	800d8e8 <_dtoa_r+0x4f8>
 800d7ec:	f1b9 0f00 	cmp.w	r9, #0
 800d7f0:	dd3c      	ble.n	800d86c <_dtoa_r+0x47c>
 800d7f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d7f6:	9307      	str	r3, [sp, #28]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	4b91      	ldr	r3, [pc, #580]	; (800da40 <_dtoa_r+0x650>)
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	4639      	mov	r1, r7
 800d800:	f7f2 fefa 	bl	80005f8 <__aeabi_dmul>
 800d804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d808:	3501      	adds	r5, #1
 800d80a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d80e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d812:	4628      	mov	r0, r5
 800d814:	f7f2 fe86 	bl	8000524 <__aeabi_i2d>
 800d818:	4632      	mov	r2, r6
 800d81a:	463b      	mov	r3, r7
 800d81c:	f7f2 feec 	bl	80005f8 <__aeabi_dmul>
 800d820:	4b88      	ldr	r3, [pc, #544]	; (800da44 <_dtoa_r+0x654>)
 800d822:	2200      	movs	r2, #0
 800d824:	f7f2 fd32 	bl	800028c <__adddf3>
 800d828:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d82c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d830:	9303      	str	r3, [sp, #12]
 800d832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d834:	2b00      	cmp	r3, #0
 800d836:	d15c      	bne.n	800d8f2 <_dtoa_r+0x502>
 800d838:	4b83      	ldr	r3, [pc, #524]	; (800da48 <_dtoa_r+0x658>)
 800d83a:	2200      	movs	r2, #0
 800d83c:	4630      	mov	r0, r6
 800d83e:	4639      	mov	r1, r7
 800d840:	f7f2 fd22 	bl	8000288 <__aeabi_dsub>
 800d844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d848:	4606      	mov	r6, r0
 800d84a:	460f      	mov	r7, r1
 800d84c:	f7f3 f964 	bl	8000b18 <__aeabi_dcmpgt>
 800d850:	2800      	cmp	r0, #0
 800d852:	f040 8296 	bne.w	800dd82 <_dtoa_r+0x992>
 800d856:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d85a:	4630      	mov	r0, r6
 800d85c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d860:	4639      	mov	r1, r7
 800d862:	f7f3 f93b 	bl	8000adc <__aeabi_dcmplt>
 800d866:	2800      	cmp	r0, #0
 800d868:	f040 8288 	bne.w	800dd7c <_dtoa_r+0x98c>
 800d86c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d870:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d876:	2b00      	cmp	r3, #0
 800d878:	f2c0 8158 	blt.w	800db2c <_dtoa_r+0x73c>
 800d87c:	f1ba 0f0e 	cmp.w	sl, #14
 800d880:	f300 8154 	bgt.w	800db2c <_dtoa_r+0x73c>
 800d884:	4b6b      	ldr	r3, [pc, #428]	; (800da34 <_dtoa_r+0x644>)
 800d886:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d88a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d890:	2b00      	cmp	r3, #0
 800d892:	f280 80e3 	bge.w	800da5c <_dtoa_r+0x66c>
 800d896:	9b01      	ldr	r3, [sp, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f300 80df 	bgt.w	800da5c <_dtoa_r+0x66c>
 800d89e:	f040 826d 	bne.w	800dd7c <_dtoa_r+0x98c>
 800d8a2:	4b69      	ldr	r3, [pc, #420]	; (800da48 <_dtoa_r+0x658>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	f7f2 fea5 	bl	80005f8 <__aeabi_dmul>
 800d8ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8b2:	f7f3 f927 	bl	8000b04 <__aeabi_dcmpge>
 800d8b6:	9e01      	ldr	r6, [sp, #4]
 800d8b8:	4637      	mov	r7, r6
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f040 8243 	bne.w	800dd46 <_dtoa_r+0x956>
 800d8c0:	9d00      	ldr	r5, [sp, #0]
 800d8c2:	2331      	movs	r3, #49	; 0x31
 800d8c4:	f805 3b01 	strb.w	r3, [r5], #1
 800d8c8:	f10a 0a01 	add.w	sl, sl, #1
 800d8cc:	e23f      	b.n	800dd4e <_dtoa_r+0x95e>
 800d8ce:	07f2      	lsls	r2, r6, #31
 800d8d0:	d505      	bpl.n	800d8de <_dtoa_r+0x4ee>
 800d8d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8d6:	f7f2 fe8f 	bl	80005f8 <__aeabi_dmul>
 800d8da:	3501      	adds	r5, #1
 800d8dc:	2301      	movs	r3, #1
 800d8de:	1076      	asrs	r6, r6, #1
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	e76c      	b.n	800d7be <_dtoa_r+0x3ce>
 800d8e4:	2502      	movs	r5, #2
 800d8e6:	e76f      	b.n	800d7c8 <_dtoa_r+0x3d8>
 800d8e8:	9b01      	ldr	r3, [sp, #4]
 800d8ea:	f8cd a01c 	str.w	sl, [sp, #28]
 800d8ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d8f0:	e78d      	b.n	800d80e <_dtoa_r+0x41e>
 800d8f2:	9900      	ldr	r1, [sp, #0]
 800d8f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d8f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d8f8:	4b4e      	ldr	r3, [pc, #312]	; (800da34 <_dtoa_r+0x644>)
 800d8fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8fe:	4401      	add	r1, r0
 800d900:	9102      	str	r1, [sp, #8]
 800d902:	9908      	ldr	r1, [sp, #32]
 800d904:	eeb0 8a47 	vmov.f32	s16, s14
 800d908:	eef0 8a67 	vmov.f32	s17, s15
 800d90c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d910:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d914:	2900      	cmp	r1, #0
 800d916:	d045      	beq.n	800d9a4 <_dtoa_r+0x5b4>
 800d918:	494c      	ldr	r1, [pc, #304]	; (800da4c <_dtoa_r+0x65c>)
 800d91a:	2000      	movs	r0, #0
 800d91c:	f7f2 ff96 	bl	800084c <__aeabi_ddiv>
 800d920:	ec53 2b18 	vmov	r2, r3, d8
 800d924:	f7f2 fcb0 	bl	8000288 <__aeabi_dsub>
 800d928:	9d00      	ldr	r5, [sp, #0]
 800d92a:	ec41 0b18 	vmov	d8, r0, r1
 800d92e:	4639      	mov	r1, r7
 800d930:	4630      	mov	r0, r6
 800d932:	f7f3 f911 	bl	8000b58 <__aeabi_d2iz>
 800d936:	900c      	str	r0, [sp, #48]	; 0x30
 800d938:	f7f2 fdf4 	bl	8000524 <__aeabi_i2d>
 800d93c:	4602      	mov	r2, r0
 800d93e:	460b      	mov	r3, r1
 800d940:	4630      	mov	r0, r6
 800d942:	4639      	mov	r1, r7
 800d944:	f7f2 fca0 	bl	8000288 <__aeabi_dsub>
 800d948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d94a:	3330      	adds	r3, #48	; 0x30
 800d94c:	f805 3b01 	strb.w	r3, [r5], #1
 800d950:	ec53 2b18 	vmov	r2, r3, d8
 800d954:	4606      	mov	r6, r0
 800d956:	460f      	mov	r7, r1
 800d958:	f7f3 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d165      	bne.n	800da2c <_dtoa_r+0x63c>
 800d960:	4632      	mov	r2, r6
 800d962:	463b      	mov	r3, r7
 800d964:	4935      	ldr	r1, [pc, #212]	; (800da3c <_dtoa_r+0x64c>)
 800d966:	2000      	movs	r0, #0
 800d968:	f7f2 fc8e 	bl	8000288 <__aeabi_dsub>
 800d96c:	ec53 2b18 	vmov	r2, r3, d8
 800d970:	f7f3 f8b4 	bl	8000adc <__aeabi_dcmplt>
 800d974:	2800      	cmp	r0, #0
 800d976:	f040 80b9 	bne.w	800daec <_dtoa_r+0x6fc>
 800d97a:	9b02      	ldr	r3, [sp, #8]
 800d97c:	429d      	cmp	r5, r3
 800d97e:	f43f af75 	beq.w	800d86c <_dtoa_r+0x47c>
 800d982:	4b2f      	ldr	r3, [pc, #188]	; (800da40 <_dtoa_r+0x650>)
 800d984:	ec51 0b18 	vmov	r0, r1, d8
 800d988:	2200      	movs	r2, #0
 800d98a:	f7f2 fe35 	bl	80005f8 <__aeabi_dmul>
 800d98e:	4b2c      	ldr	r3, [pc, #176]	; (800da40 <_dtoa_r+0x650>)
 800d990:	ec41 0b18 	vmov	d8, r0, r1
 800d994:	2200      	movs	r2, #0
 800d996:	4630      	mov	r0, r6
 800d998:	4639      	mov	r1, r7
 800d99a:	f7f2 fe2d 	bl	80005f8 <__aeabi_dmul>
 800d99e:	4606      	mov	r6, r0
 800d9a0:	460f      	mov	r7, r1
 800d9a2:	e7c4      	b.n	800d92e <_dtoa_r+0x53e>
 800d9a4:	ec51 0b17 	vmov	r0, r1, d7
 800d9a8:	f7f2 fe26 	bl	80005f8 <__aeabi_dmul>
 800d9ac:	9b02      	ldr	r3, [sp, #8]
 800d9ae:	9d00      	ldr	r5, [sp, #0]
 800d9b0:	930c      	str	r3, [sp, #48]	; 0x30
 800d9b2:	ec41 0b18 	vmov	d8, r0, r1
 800d9b6:	4639      	mov	r1, r7
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f7f3 f8cd 	bl	8000b58 <__aeabi_d2iz>
 800d9be:	9011      	str	r0, [sp, #68]	; 0x44
 800d9c0:	f7f2 fdb0 	bl	8000524 <__aeabi_i2d>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	f7f2 fc5c 	bl	8000288 <__aeabi_dsub>
 800d9d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9d2:	3330      	adds	r3, #48	; 0x30
 800d9d4:	f805 3b01 	strb.w	r3, [r5], #1
 800d9d8:	9b02      	ldr	r3, [sp, #8]
 800d9da:	429d      	cmp	r5, r3
 800d9dc:	4606      	mov	r6, r0
 800d9de:	460f      	mov	r7, r1
 800d9e0:	f04f 0200 	mov.w	r2, #0
 800d9e4:	d134      	bne.n	800da50 <_dtoa_r+0x660>
 800d9e6:	4b19      	ldr	r3, [pc, #100]	; (800da4c <_dtoa_r+0x65c>)
 800d9e8:	ec51 0b18 	vmov	r0, r1, d8
 800d9ec:	f7f2 fc4e 	bl	800028c <__adddf3>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	f7f3 f88e 	bl	8000b18 <__aeabi_dcmpgt>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d175      	bne.n	800daec <_dtoa_r+0x6fc>
 800da00:	ec53 2b18 	vmov	r2, r3, d8
 800da04:	4911      	ldr	r1, [pc, #68]	; (800da4c <_dtoa_r+0x65c>)
 800da06:	2000      	movs	r0, #0
 800da08:	f7f2 fc3e 	bl	8000288 <__aeabi_dsub>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	4630      	mov	r0, r6
 800da12:	4639      	mov	r1, r7
 800da14:	f7f3 f862 	bl	8000adc <__aeabi_dcmplt>
 800da18:	2800      	cmp	r0, #0
 800da1a:	f43f af27 	beq.w	800d86c <_dtoa_r+0x47c>
 800da1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da20:	1e6b      	subs	r3, r5, #1
 800da22:	930c      	str	r3, [sp, #48]	; 0x30
 800da24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da28:	2b30      	cmp	r3, #48	; 0x30
 800da2a:	d0f8      	beq.n	800da1e <_dtoa_r+0x62e>
 800da2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800da30:	e04a      	b.n	800dac8 <_dtoa_r+0x6d8>
 800da32:	bf00      	nop
 800da34:	0800f538 	.word	0x0800f538
 800da38:	0800f510 	.word	0x0800f510
 800da3c:	3ff00000 	.word	0x3ff00000
 800da40:	40240000 	.word	0x40240000
 800da44:	401c0000 	.word	0x401c0000
 800da48:	40140000 	.word	0x40140000
 800da4c:	3fe00000 	.word	0x3fe00000
 800da50:	4baf      	ldr	r3, [pc, #700]	; (800dd10 <_dtoa_r+0x920>)
 800da52:	f7f2 fdd1 	bl	80005f8 <__aeabi_dmul>
 800da56:	4606      	mov	r6, r0
 800da58:	460f      	mov	r7, r1
 800da5a:	e7ac      	b.n	800d9b6 <_dtoa_r+0x5c6>
 800da5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800da60:	9d00      	ldr	r5, [sp, #0]
 800da62:	4642      	mov	r2, r8
 800da64:	464b      	mov	r3, r9
 800da66:	4630      	mov	r0, r6
 800da68:	4639      	mov	r1, r7
 800da6a:	f7f2 feef 	bl	800084c <__aeabi_ddiv>
 800da6e:	f7f3 f873 	bl	8000b58 <__aeabi_d2iz>
 800da72:	9002      	str	r0, [sp, #8]
 800da74:	f7f2 fd56 	bl	8000524 <__aeabi_i2d>
 800da78:	4642      	mov	r2, r8
 800da7a:	464b      	mov	r3, r9
 800da7c:	f7f2 fdbc 	bl	80005f8 <__aeabi_dmul>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	4630      	mov	r0, r6
 800da86:	4639      	mov	r1, r7
 800da88:	f7f2 fbfe 	bl	8000288 <__aeabi_dsub>
 800da8c:	9e02      	ldr	r6, [sp, #8]
 800da8e:	9f01      	ldr	r7, [sp, #4]
 800da90:	3630      	adds	r6, #48	; 0x30
 800da92:	f805 6b01 	strb.w	r6, [r5], #1
 800da96:	9e00      	ldr	r6, [sp, #0]
 800da98:	1bae      	subs	r6, r5, r6
 800da9a:	42b7      	cmp	r7, r6
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	d137      	bne.n	800db12 <_dtoa_r+0x722>
 800daa2:	f7f2 fbf3 	bl	800028c <__adddf3>
 800daa6:	4642      	mov	r2, r8
 800daa8:	464b      	mov	r3, r9
 800daaa:	4606      	mov	r6, r0
 800daac:	460f      	mov	r7, r1
 800daae:	f7f3 f833 	bl	8000b18 <__aeabi_dcmpgt>
 800dab2:	b9c8      	cbnz	r0, 800dae8 <_dtoa_r+0x6f8>
 800dab4:	4642      	mov	r2, r8
 800dab6:	464b      	mov	r3, r9
 800dab8:	4630      	mov	r0, r6
 800daba:	4639      	mov	r1, r7
 800dabc:	f7f3 f804 	bl	8000ac8 <__aeabi_dcmpeq>
 800dac0:	b110      	cbz	r0, 800dac8 <_dtoa_r+0x6d8>
 800dac2:	9b02      	ldr	r3, [sp, #8]
 800dac4:	07d9      	lsls	r1, r3, #31
 800dac6:	d40f      	bmi.n	800dae8 <_dtoa_r+0x6f8>
 800dac8:	4620      	mov	r0, r4
 800daca:	4659      	mov	r1, fp
 800dacc:	f000 fce8 	bl	800e4a0 <_Bfree>
 800dad0:	2300      	movs	r3, #0
 800dad2:	702b      	strb	r3, [r5, #0]
 800dad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dad6:	f10a 0001 	add.w	r0, sl, #1
 800dada:	6018      	str	r0, [r3, #0]
 800dadc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f43f acd8 	beq.w	800d494 <_dtoa_r+0xa4>
 800dae4:	601d      	str	r5, [r3, #0]
 800dae6:	e4d5      	b.n	800d494 <_dtoa_r+0xa4>
 800dae8:	f8cd a01c 	str.w	sl, [sp, #28]
 800daec:	462b      	mov	r3, r5
 800daee:	461d      	mov	r5, r3
 800daf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800daf4:	2a39      	cmp	r2, #57	; 0x39
 800daf6:	d108      	bne.n	800db0a <_dtoa_r+0x71a>
 800daf8:	9a00      	ldr	r2, [sp, #0]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d1f7      	bne.n	800daee <_dtoa_r+0x6fe>
 800dafe:	9a07      	ldr	r2, [sp, #28]
 800db00:	9900      	ldr	r1, [sp, #0]
 800db02:	3201      	adds	r2, #1
 800db04:	9207      	str	r2, [sp, #28]
 800db06:	2230      	movs	r2, #48	; 0x30
 800db08:	700a      	strb	r2, [r1, #0]
 800db0a:	781a      	ldrb	r2, [r3, #0]
 800db0c:	3201      	adds	r2, #1
 800db0e:	701a      	strb	r2, [r3, #0]
 800db10:	e78c      	b.n	800da2c <_dtoa_r+0x63c>
 800db12:	4b7f      	ldr	r3, [pc, #508]	; (800dd10 <_dtoa_r+0x920>)
 800db14:	2200      	movs	r2, #0
 800db16:	f7f2 fd6f 	bl	80005f8 <__aeabi_dmul>
 800db1a:	2200      	movs	r2, #0
 800db1c:	2300      	movs	r3, #0
 800db1e:	4606      	mov	r6, r0
 800db20:	460f      	mov	r7, r1
 800db22:	f7f2 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800db26:	2800      	cmp	r0, #0
 800db28:	d09b      	beq.n	800da62 <_dtoa_r+0x672>
 800db2a:	e7cd      	b.n	800dac8 <_dtoa_r+0x6d8>
 800db2c:	9a08      	ldr	r2, [sp, #32]
 800db2e:	2a00      	cmp	r2, #0
 800db30:	f000 80c4 	beq.w	800dcbc <_dtoa_r+0x8cc>
 800db34:	9a05      	ldr	r2, [sp, #20]
 800db36:	2a01      	cmp	r2, #1
 800db38:	f300 80a8 	bgt.w	800dc8c <_dtoa_r+0x89c>
 800db3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db3e:	2a00      	cmp	r2, #0
 800db40:	f000 80a0 	beq.w	800dc84 <_dtoa_r+0x894>
 800db44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800db48:	9e06      	ldr	r6, [sp, #24]
 800db4a:	4645      	mov	r5, r8
 800db4c:	9a04      	ldr	r2, [sp, #16]
 800db4e:	2101      	movs	r1, #1
 800db50:	441a      	add	r2, r3
 800db52:	4620      	mov	r0, r4
 800db54:	4498      	add	r8, r3
 800db56:	9204      	str	r2, [sp, #16]
 800db58:	f000 fd5e 	bl	800e618 <__i2b>
 800db5c:	4607      	mov	r7, r0
 800db5e:	2d00      	cmp	r5, #0
 800db60:	dd0b      	ble.n	800db7a <_dtoa_r+0x78a>
 800db62:	9b04      	ldr	r3, [sp, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	dd08      	ble.n	800db7a <_dtoa_r+0x78a>
 800db68:	42ab      	cmp	r3, r5
 800db6a:	9a04      	ldr	r2, [sp, #16]
 800db6c:	bfa8      	it	ge
 800db6e:	462b      	movge	r3, r5
 800db70:	eba8 0803 	sub.w	r8, r8, r3
 800db74:	1aed      	subs	r5, r5, r3
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	9304      	str	r3, [sp, #16]
 800db7a:	9b06      	ldr	r3, [sp, #24]
 800db7c:	b1fb      	cbz	r3, 800dbbe <_dtoa_r+0x7ce>
 800db7e:	9b08      	ldr	r3, [sp, #32]
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 809f 	beq.w	800dcc4 <_dtoa_r+0x8d4>
 800db86:	2e00      	cmp	r6, #0
 800db88:	dd11      	ble.n	800dbae <_dtoa_r+0x7be>
 800db8a:	4639      	mov	r1, r7
 800db8c:	4632      	mov	r2, r6
 800db8e:	4620      	mov	r0, r4
 800db90:	f000 fdfe 	bl	800e790 <__pow5mult>
 800db94:	465a      	mov	r2, fp
 800db96:	4601      	mov	r1, r0
 800db98:	4607      	mov	r7, r0
 800db9a:	4620      	mov	r0, r4
 800db9c:	f000 fd52 	bl	800e644 <__multiply>
 800dba0:	4659      	mov	r1, fp
 800dba2:	9007      	str	r0, [sp, #28]
 800dba4:	4620      	mov	r0, r4
 800dba6:	f000 fc7b 	bl	800e4a0 <_Bfree>
 800dbaa:	9b07      	ldr	r3, [sp, #28]
 800dbac:	469b      	mov	fp, r3
 800dbae:	9b06      	ldr	r3, [sp, #24]
 800dbb0:	1b9a      	subs	r2, r3, r6
 800dbb2:	d004      	beq.n	800dbbe <_dtoa_r+0x7ce>
 800dbb4:	4659      	mov	r1, fp
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f000 fdea 	bl	800e790 <__pow5mult>
 800dbbc:	4683      	mov	fp, r0
 800dbbe:	2101      	movs	r1, #1
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f000 fd29 	bl	800e618 <__i2b>
 800dbc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	4606      	mov	r6, r0
 800dbcc:	dd7c      	ble.n	800dcc8 <_dtoa_r+0x8d8>
 800dbce:	461a      	mov	r2, r3
 800dbd0:	4601      	mov	r1, r0
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 fddc 	bl	800e790 <__pow5mult>
 800dbd8:	9b05      	ldr	r3, [sp, #20]
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	4606      	mov	r6, r0
 800dbde:	dd76      	ble.n	800dcce <_dtoa_r+0x8de>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	9306      	str	r3, [sp, #24]
 800dbe4:	6933      	ldr	r3, [r6, #16]
 800dbe6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dbea:	6918      	ldr	r0, [r3, #16]
 800dbec:	f000 fcc4 	bl	800e578 <__hi0bits>
 800dbf0:	f1c0 0020 	rsb	r0, r0, #32
 800dbf4:	9b04      	ldr	r3, [sp, #16]
 800dbf6:	4418      	add	r0, r3
 800dbf8:	f010 001f 	ands.w	r0, r0, #31
 800dbfc:	f000 8086 	beq.w	800dd0c <_dtoa_r+0x91c>
 800dc00:	f1c0 0320 	rsb	r3, r0, #32
 800dc04:	2b04      	cmp	r3, #4
 800dc06:	dd7f      	ble.n	800dd08 <_dtoa_r+0x918>
 800dc08:	f1c0 001c 	rsb	r0, r0, #28
 800dc0c:	9b04      	ldr	r3, [sp, #16]
 800dc0e:	4403      	add	r3, r0
 800dc10:	4480      	add	r8, r0
 800dc12:	4405      	add	r5, r0
 800dc14:	9304      	str	r3, [sp, #16]
 800dc16:	f1b8 0f00 	cmp.w	r8, #0
 800dc1a:	dd05      	ble.n	800dc28 <_dtoa_r+0x838>
 800dc1c:	4659      	mov	r1, fp
 800dc1e:	4642      	mov	r2, r8
 800dc20:	4620      	mov	r0, r4
 800dc22:	f000 fe0f 	bl	800e844 <__lshift>
 800dc26:	4683      	mov	fp, r0
 800dc28:	9b04      	ldr	r3, [sp, #16]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	dd05      	ble.n	800dc3a <_dtoa_r+0x84a>
 800dc2e:	4631      	mov	r1, r6
 800dc30:	461a      	mov	r2, r3
 800dc32:	4620      	mov	r0, r4
 800dc34:	f000 fe06 	bl	800e844 <__lshift>
 800dc38:	4606      	mov	r6, r0
 800dc3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d069      	beq.n	800dd14 <_dtoa_r+0x924>
 800dc40:	4631      	mov	r1, r6
 800dc42:	4658      	mov	r0, fp
 800dc44:	f000 fe6a 	bl	800e91c <__mcmp>
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	da63      	bge.n	800dd14 <_dtoa_r+0x924>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4659      	mov	r1, fp
 800dc50:	220a      	movs	r2, #10
 800dc52:	4620      	mov	r0, r4
 800dc54:	f000 fc46 	bl	800e4e4 <__multadd>
 800dc58:	9b08      	ldr	r3, [sp, #32]
 800dc5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc5e:	4683      	mov	fp, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f000 818f 	beq.w	800df84 <_dtoa_r+0xb94>
 800dc66:	4639      	mov	r1, r7
 800dc68:	2300      	movs	r3, #0
 800dc6a:	220a      	movs	r2, #10
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f000 fc39 	bl	800e4e4 <__multadd>
 800dc72:	f1b9 0f00 	cmp.w	r9, #0
 800dc76:	4607      	mov	r7, r0
 800dc78:	f300 808e 	bgt.w	800dd98 <_dtoa_r+0x9a8>
 800dc7c:	9b05      	ldr	r3, [sp, #20]
 800dc7e:	2b02      	cmp	r3, #2
 800dc80:	dc50      	bgt.n	800dd24 <_dtoa_r+0x934>
 800dc82:	e089      	b.n	800dd98 <_dtoa_r+0x9a8>
 800dc84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc8a:	e75d      	b.n	800db48 <_dtoa_r+0x758>
 800dc8c:	9b01      	ldr	r3, [sp, #4]
 800dc8e:	1e5e      	subs	r6, r3, #1
 800dc90:	9b06      	ldr	r3, [sp, #24]
 800dc92:	42b3      	cmp	r3, r6
 800dc94:	bfbf      	itttt	lt
 800dc96:	9b06      	ldrlt	r3, [sp, #24]
 800dc98:	9606      	strlt	r6, [sp, #24]
 800dc9a:	1af2      	sublt	r2, r6, r3
 800dc9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800dc9e:	bfb6      	itet	lt
 800dca0:	189b      	addlt	r3, r3, r2
 800dca2:	1b9e      	subge	r6, r3, r6
 800dca4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800dca6:	9b01      	ldr	r3, [sp, #4]
 800dca8:	bfb8      	it	lt
 800dcaa:	2600      	movlt	r6, #0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	bfb5      	itete	lt
 800dcb0:	eba8 0503 	sublt.w	r5, r8, r3
 800dcb4:	9b01      	ldrge	r3, [sp, #4]
 800dcb6:	2300      	movlt	r3, #0
 800dcb8:	4645      	movge	r5, r8
 800dcba:	e747      	b.n	800db4c <_dtoa_r+0x75c>
 800dcbc:	9e06      	ldr	r6, [sp, #24]
 800dcbe:	9f08      	ldr	r7, [sp, #32]
 800dcc0:	4645      	mov	r5, r8
 800dcc2:	e74c      	b.n	800db5e <_dtoa_r+0x76e>
 800dcc4:	9a06      	ldr	r2, [sp, #24]
 800dcc6:	e775      	b.n	800dbb4 <_dtoa_r+0x7c4>
 800dcc8:	9b05      	ldr	r3, [sp, #20]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	dc18      	bgt.n	800dd00 <_dtoa_r+0x910>
 800dcce:	9b02      	ldr	r3, [sp, #8]
 800dcd0:	b9b3      	cbnz	r3, 800dd00 <_dtoa_r+0x910>
 800dcd2:	9b03      	ldr	r3, [sp, #12]
 800dcd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcd8:	b9a3      	cbnz	r3, 800dd04 <_dtoa_r+0x914>
 800dcda:	9b03      	ldr	r3, [sp, #12]
 800dcdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dce0:	0d1b      	lsrs	r3, r3, #20
 800dce2:	051b      	lsls	r3, r3, #20
 800dce4:	b12b      	cbz	r3, 800dcf2 <_dtoa_r+0x902>
 800dce6:	9b04      	ldr	r3, [sp, #16]
 800dce8:	3301      	adds	r3, #1
 800dcea:	9304      	str	r3, [sp, #16]
 800dcec:	f108 0801 	add.w	r8, r8, #1
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	9306      	str	r3, [sp, #24]
 800dcf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f47f af74 	bne.w	800dbe4 <_dtoa_r+0x7f4>
 800dcfc:	2001      	movs	r0, #1
 800dcfe:	e779      	b.n	800dbf4 <_dtoa_r+0x804>
 800dd00:	2300      	movs	r3, #0
 800dd02:	e7f6      	b.n	800dcf2 <_dtoa_r+0x902>
 800dd04:	9b02      	ldr	r3, [sp, #8]
 800dd06:	e7f4      	b.n	800dcf2 <_dtoa_r+0x902>
 800dd08:	d085      	beq.n	800dc16 <_dtoa_r+0x826>
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	301c      	adds	r0, #28
 800dd0e:	e77d      	b.n	800dc0c <_dtoa_r+0x81c>
 800dd10:	40240000 	.word	0x40240000
 800dd14:	9b01      	ldr	r3, [sp, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	dc38      	bgt.n	800dd8c <_dtoa_r+0x99c>
 800dd1a:	9b05      	ldr	r3, [sp, #20]
 800dd1c:	2b02      	cmp	r3, #2
 800dd1e:	dd35      	ble.n	800dd8c <_dtoa_r+0x99c>
 800dd20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dd24:	f1b9 0f00 	cmp.w	r9, #0
 800dd28:	d10d      	bne.n	800dd46 <_dtoa_r+0x956>
 800dd2a:	4631      	mov	r1, r6
 800dd2c:	464b      	mov	r3, r9
 800dd2e:	2205      	movs	r2, #5
 800dd30:	4620      	mov	r0, r4
 800dd32:	f000 fbd7 	bl	800e4e4 <__multadd>
 800dd36:	4601      	mov	r1, r0
 800dd38:	4606      	mov	r6, r0
 800dd3a:	4658      	mov	r0, fp
 800dd3c:	f000 fdee 	bl	800e91c <__mcmp>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	f73f adbd 	bgt.w	800d8c0 <_dtoa_r+0x4d0>
 800dd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd48:	9d00      	ldr	r5, [sp, #0]
 800dd4a:	ea6f 0a03 	mvn.w	sl, r3
 800dd4e:	f04f 0800 	mov.w	r8, #0
 800dd52:	4631      	mov	r1, r6
 800dd54:	4620      	mov	r0, r4
 800dd56:	f000 fba3 	bl	800e4a0 <_Bfree>
 800dd5a:	2f00      	cmp	r7, #0
 800dd5c:	f43f aeb4 	beq.w	800dac8 <_dtoa_r+0x6d8>
 800dd60:	f1b8 0f00 	cmp.w	r8, #0
 800dd64:	d005      	beq.n	800dd72 <_dtoa_r+0x982>
 800dd66:	45b8      	cmp	r8, r7
 800dd68:	d003      	beq.n	800dd72 <_dtoa_r+0x982>
 800dd6a:	4641      	mov	r1, r8
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f000 fb97 	bl	800e4a0 <_Bfree>
 800dd72:	4639      	mov	r1, r7
 800dd74:	4620      	mov	r0, r4
 800dd76:	f000 fb93 	bl	800e4a0 <_Bfree>
 800dd7a:	e6a5      	b.n	800dac8 <_dtoa_r+0x6d8>
 800dd7c:	2600      	movs	r6, #0
 800dd7e:	4637      	mov	r7, r6
 800dd80:	e7e1      	b.n	800dd46 <_dtoa_r+0x956>
 800dd82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800dd84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dd88:	4637      	mov	r7, r6
 800dd8a:	e599      	b.n	800d8c0 <_dtoa_r+0x4d0>
 800dd8c:	9b08      	ldr	r3, [sp, #32]
 800dd8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f000 80fd 	beq.w	800df92 <_dtoa_r+0xba2>
 800dd98:	2d00      	cmp	r5, #0
 800dd9a:	dd05      	ble.n	800dda8 <_dtoa_r+0x9b8>
 800dd9c:	4639      	mov	r1, r7
 800dd9e:	462a      	mov	r2, r5
 800dda0:	4620      	mov	r0, r4
 800dda2:	f000 fd4f 	bl	800e844 <__lshift>
 800dda6:	4607      	mov	r7, r0
 800dda8:	9b06      	ldr	r3, [sp, #24]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d05c      	beq.n	800de68 <_dtoa_r+0xa78>
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f000 fb35 	bl	800e420 <_Balloc>
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	b928      	cbnz	r0, 800ddc6 <_dtoa_r+0x9d6>
 800ddba:	4b80      	ldr	r3, [pc, #512]	; (800dfbc <_dtoa_r+0xbcc>)
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ddc2:	f7ff bb2e 	b.w	800d422 <_dtoa_r+0x32>
 800ddc6:	693a      	ldr	r2, [r7, #16]
 800ddc8:	3202      	adds	r2, #2
 800ddca:	0092      	lsls	r2, r2, #2
 800ddcc:	f107 010c 	add.w	r1, r7, #12
 800ddd0:	300c      	adds	r0, #12
 800ddd2:	f7fe fc05 	bl	800c5e0 <memcpy>
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	4629      	mov	r1, r5
 800ddda:	4620      	mov	r0, r4
 800dddc:	f000 fd32 	bl	800e844 <__lshift>
 800dde0:	9b00      	ldr	r3, [sp, #0]
 800dde2:	3301      	adds	r3, #1
 800dde4:	9301      	str	r3, [sp, #4]
 800dde6:	9b00      	ldr	r3, [sp, #0]
 800dde8:	444b      	add	r3, r9
 800ddea:	9307      	str	r3, [sp, #28]
 800ddec:	9b02      	ldr	r3, [sp, #8]
 800ddee:	f003 0301 	and.w	r3, r3, #1
 800ddf2:	46b8      	mov	r8, r7
 800ddf4:	9306      	str	r3, [sp, #24]
 800ddf6:	4607      	mov	r7, r0
 800ddf8:	9b01      	ldr	r3, [sp, #4]
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	4658      	mov	r0, fp
 800de00:	9302      	str	r3, [sp, #8]
 800de02:	f7ff fa69 	bl	800d2d8 <quorem>
 800de06:	4603      	mov	r3, r0
 800de08:	3330      	adds	r3, #48	; 0x30
 800de0a:	9004      	str	r0, [sp, #16]
 800de0c:	4641      	mov	r1, r8
 800de0e:	4658      	mov	r0, fp
 800de10:	9308      	str	r3, [sp, #32]
 800de12:	f000 fd83 	bl	800e91c <__mcmp>
 800de16:	463a      	mov	r2, r7
 800de18:	4681      	mov	r9, r0
 800de1a:	4631      	mov	r1, r6
 800de1c:	4620      	mov	r0, r4
 800de1e:	f000 fd99 	bl	800e954 <__mdiff>
 800de22:	68c2      	ldr	r2, [r0, #12]
 800de24:	9b08      	ldr	r3, [sp, #32]
 800de26:	4605      	mov	r5, r0
 800de28:	bb02      	cbnz	r2, 800de6c <_dtoa_r+0xa7c>
 800de2a:	4601      	mov	r1, r0
 800de2c:	4658      	mov	r0, fp
 800de2e:	f000 fd75 	bl	800e91c <__mcmp>
 800de32:	9b08      	ldr	r3, [sp, #32]
 800de34:	4602      	mov	r2, r0
 800de36:	4629      	mov	r1, r5
 800de38:	4620      	mov	r0, r4
 800de3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800de3e:	f000 fb2f 	bl	800e4a0 <_Bfree>
 800de42:	9b05      	ldr	r3, [sp, #20]
 800de44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de46:	9d01      	ldr	r5, [sp, #4]
 800de48:	ea43 0102 	orr.w	r1, r3, r2
 800de4c:	9b06      	ldr	r3, [sp, #24]
 800de4e:	430b      	orrs	r3, r1
 800de50:	9b08      	ldr	r3, [sp, #32]
 800de52:	d10d      	bne.n	800de70 <_dtoa_r+0xa80>
 800de54:	2b39      	cmp	r3, #57	; 0x39
 800de56:	d029      	beq.n	800deac <_dtoa_r+0xabc>
 800de58:	f1b9 0f00 	cmp.w	r9, #0
 800de5c:	dd01      	ble.n	800de62 <_dtoa_r+0xa72>
 800de5e:	9b04      	ldr	r3, [sp, #16]
 800de60:	3331      	adds	r3, #49	; 0x31
 800de62:	9a02      	ldr	r2, [sp, #8]
 800de64:	7013      	strb	r3, [r2, #0]
 800de66:	e774      	b.n	800dd52 <_dtoa_r+0x962>
 800de68:	4638      	mov	r0, r7
 800de6a:	e7b9      	b.n	800dde0 <_dtoa_r+0x9f0>
 800de6c:	2201      	movs	r2, #1
 800de6e:	e7e2      	b.n	800de36 <_dtoa_r+0xa46>
 800de70:	f1b9 0f00 	cmp.w	r9, #0
 800de74:	db06      	blt.n	800de84 <_dtoa_r+0xa94>
 800de76:	9905      	ldr	r1, [sp, #20]
 800de78:	ea41 0909 	orr.w	r9, r1, r9
 800de7c:	9906      	ldr	r1, [sp, #24]
 800de7e:	ea59 0101 	orrs.w	r1, r9, r1
 800de82:	d120      	bne.n	800dec6 <_dtoa_r+0xad6>
 800de84:	2a00      	cmp	r2, #0
 800de86:	ddec      	ble.n	800de62 <_dtoa_r+0xa72>
 800de88:	4659      	mov	r1, fp
 800de8a:	2201      	movs	r2, #1
 800de8c:	4620      	mov	r0, r4
 800de8e:	9301      	str	r3, [sp, #4]
 800de90:	f000 fcd8 	bl	800e844 <__lshift>
 800de94:	4631      	mov	r1, r6
 800de96:	4683      	mov	fp, r0
 800de98:	f000 fd40 	bl	800e91c <__mcmp>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	9b01      	ldr	r3, [sp, #4]
 800dea0:	dc02      	bgt.n	800dea8 <_dtoa_r+0xab8>
 800dea2:	d1de      	bne.n	800de62 <_dtoa_r+0xa72>
 800dea4:	07da      	lsls	r2, r3, #31
 800dea6:	d5dc      	bpl.n	800de62 <_dtoa_r+0xa72>
 800dea8:	2b39      	cmp	r3, #57	; 0x39
 800deaa:	d1d8      	bne.n	800de5e <_dtoa_r+0xa6e>
 800deac:	9a02      	ldr	r2, [sp, #8]
 800deae:	2339      	movs	r3, #57	; 0x39
 800deb0:	7013      	strb	r3, [r2, #0]
 800deb2:	462b      	mov	r3, r5
 800deb4:	461d      	mov	r5, r3
 800deb6:	3b01      	subs	r3, #1
 800deb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800debc:	2a39      	cmp	r2, #57	; 0x39
 800debe:	d050      	beq.n	800df62 <_dtoa_r+0xb72>
 800dec0:	3201      	adds	r2, #1
 800dec2:	701a      	strb	r2, [r3, #0]
 800dec4:	e745      	b.n	800dd52 <_dtoa_r+0x962>
 800dec6:	2a00      	cmp	r2, #0
 800dec8:	dd03      	ble.n	800ded2 <_dtoa_r+0xae2>
 800deca:	2b39      	cmp	r3, #57	; 0x39
 800decc:	d0ee      	beq.n	800deac <_dtoa_r+0xabc>
 800dece:	3301      	adds	r3, #1
 800ded0:	e7c7      	b.n	800de62 <_dtoa_r+0xa72>
 800ded2:	9a01      	ldr	r2, [sp, #4]
 800ded4:	9907      	ldr	r1, [sp, #28]
 800ded6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800deda:	428a      	cmp	r2, r1
 800dedc:	d02a      	beq.n	800df34 <_dtoa_r+0xb44>
 800dede:	4659      	mov	r1, fp
 800dee0:	2300      	movs	r3, #0
 800dee2:	220a      	movs	r2, #10
 800dee4:	4620      	mov	r0, r4
 800dee6:	f000 fafd 	bl	800e4e4 <__multadd>
 800deea:	45b8      	cmp	r8, r7
 800deec:	4683      	mov	fp, r0
 800deee:	f04f 0300 	mov.w	r3, #0
 800def2:	f04f 020a 	mov.w	r2, #10
 800def6:	4641      	mov	r1, r8
 800def8:	4620      	mov	r0, r4
 800defa:	d107      	bne.n	800df0c <_dtoa_r+0xb1c>
 800defc:	f000 faf2 	bl	800e4e4 <__multadd>
 800df00:	4680      	mov	r8, r0
 800df02:	4607      	mov	r7, r0
 800df04:	9b01      	ldr	r3, [sp, #4]
 800df06:	3301      	adds	r3, #1
 800df08:	9301      	str	r3, [sp, #4]
 800df0a:	e775      	b.n	800ddf8 <_dtoa_r+0xa08>
 800df0c:	f000 faea 	bl	800e4e4 <__multadd>
 800df10:	4639      	mov	r1, r7
 800df12:	4680      	mov	r8, r0
 800df14:	2300      	movs	r3, #0
 800df16:	220a      	movs	r2, #10
 800df18:	4620      	mov	r0, r4
 800df1a:	f000 fae3 	bl	800e4e4 <__multadd>
 800df1e:	4607      	mov	r7, r0
 800df20:	e7f0      	b.n	800df04 <_dtoa_r+0xb14>
 800df22:	f1b9 0f00 	cmp.w	r9, #0
 800df26:	9a00      	ldr	r2, [sp, #0]
 800df28:	bfcc      	ite	gt
 800df2a:	464d      	movgt	r5, r9
 800df2c:	2501      	movle	r5, #1
 800df2e:	4415      	add	r5, r2
 800df30:	f04f 0800 	mov.w	r8, #0
 800df34:	4659      	mov	r1, fp
 800df36:	2201      	movs	r2, #1
 800df38:	4620      	mov	r0, r4
 800df3a:	9301      	str	r3, [sp, #4]
 800df3c:	f000 fc82 	bl	800e844 <__lshift>
 800df40:	4631      	mov	r1, r6
 800df42:	4683      	mov	fp, r0
 800df44:	f000 fcea 	bl	800e91c <__mcmp>
 800df48:	2800      	cmp	r0, #0
 800df4a:	dcb2      	bgt.n	800deb2 <_dtoa_r+0xac2>
 800df4c:	d102      	bne.n	800df54 <_dtoa_r+0xb64>
 800df4e:	9b01      	ldr	r3, [sp, #4]
 800df50:	07db      	lsls	r3, r3, #31
 800df52:	d4ae      	bmi.n	800deb2 <_dtoa_r+0xac2>
 800df54:	462b      	mov	r3, r5
 800df56:	461d      	mov	r5, r3
 800df58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df5c:	2a30      	cmp	r2, #48	; 0x30
 800df5e:	d0fa      	beq.n	800df56 <_dtoa_r+0xb66>
 800df60:	e6f7      	b.n	800dd52 <_dtoa_r+0x962>
 800df62:	9a00      	ldr	r2, [sp, #0]
 800df64:	429a      	cmp	r2, r3
 800df66:	d1a5      	bne.n	800deb4 <_dtoa_r+0xac4>
 800df68:	f10a 0a01 	add.w	sl, sl, #1
 800df6c:	2331      	movs	r3, #49	; 0x31
 800df6e:	e779      	b.n	800de64 <_dtoa_r+0xa74>
 800df70:	4b13      	ldr	r3, [pc, #76]	; (800dfc0 <_dtoa_r+0xbd0>)
 800df72:	f7ff baaf 	b.w	800d4d4 <_dtoa_r+0xe4>
 800df76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f47f aa86 	bne.w	800d48a <_dtoa_r+0x9a>
 800df7e:	4b11      	ldr	r3, [pc, #68]	; (800dfc4 <_dtoa_r+0xbd4>)
 800df80:	f7ff baa8 	b.w	800d4d4 <_dtoa_r+0xe4>
 800df84:	f1b9 0f00 	cmp.w	r9, #0
 800df88:	dc03      	bgt.n	800df92 <_dtoa_r+0xba2>
 800df8a:	9b05      	ldr	r3, [sp, #20]
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	f73f aec9 	bgt.w	800dd24 <_dtoa_r+0x934>
 800df92:	9d00      	ldr	r5, [sp, #0]
 800df94:	4631      	mov	r1, r6
 800df96:	4658      	mov	r0, fp
 800df98:	f7ff f99e 	bl	800d2d8 <quorem>
 800df9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dfa0:	f805 3b01 	strb.w	r3, [r5], #1
 800dfa4:	9a00      	ldr	r2, [sp, #0]
 800dfa6:	1aaa      	subs	r2, r5, r2
 800dfa8:	4591      	cmp	r9, r2
 800dfaa:	ddba      	ble.n	800df22 <_dtoa_r+0xb32>
 800dfac:	4659      	mov	r1, fp
 800dfae:	2300      	movs	r3, #0
 800dfb0:	220a      	movs	r2, #10
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f000 fa96 	bl	800e4e4 <__multadd>
 800dfb8:	4683      	mov	fp, r0
 800dfba:	e7eb      	b.n	800df94 <_dtoa_r+0xba4>
 800dfbc:	0800f43b 	.word	0x0800f43b
 800dfc0:	0800f394 	.word	0x0800f394
 800dfc4:	0800f3b8 	.word	0x0800f3b8

0800dfc8 <__sflush_r>:
 800dfc8:	898a      	ldrh	r2, [r1, #12]
 800dfca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfce:	4605      	mov	r5, r0
 800dfd0:	0710      	lsls	r0, r2, #28
 800dfd2:	460c      	mov	r4, r1
 800dfd4:	d458      	bmi.n	800e088 <__sflush_r+0xc0>
 800dfd6:	684b      	ldr	r3, [r1, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	dc05      	bgt.n	800dfe8 <__sflush_r+0x20>
 800dfdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	dc02      	bgt.n	800dfe8 <__sflush_r+0x20>
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfea:	2e00      	cmp	r6, #0
 800dfec:	d0f9      	beq.n	800dfe2 <__sflush_r+0x1a>
 800dfee:	2300      	movs	r3, #0
 800dff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dff4:	682f      	ldr	r7, [r5, #0]
 800dff6:	602b      	str	r3, [r5, #0]
 800dff8:	d032      	beq.n	800e060 <__sflush_r+0x98>
 800dffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dffc:	89a3      	ldrh	r3, [r4, #12]
 800dffe:	075a      	lsls	r2, r3, #29
 800e000:	d505      	bpl.n	800e00e <__sflush_r+0x46>
 800e002:	6863      	ldr	r3, [r4, #4]
 800e004:	1ac0      	subs	r0, r0, r3
 800e006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e008:	b10b      	cbz	r3, 800e00e <__sflush_r+0x46>
 800e00a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e00c:	1ac0      	subs	r0, r0, r3
 800e00e:	2300      	movs	r3, #0
 800e010:	4602      	mov	r2, r0
 800e012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e014:	6a21      	ldr	r1, [r4, #32]
 800e016:	4628      	mov	r0, r5
 800e018:	47b0      	blx	r6
 800e01a:	1c43      	adds	r3, r0, #1
 800e01c:	89a3      	ldrh	r3, [r4, #12]
 800e01e:	d106      	bne.n	800e02e <__sflush_r+0x66>
 800e020:	6829      	ldr	r1, [r5, #0]
 800e022:	291d      	cmp	r1, #29
 800e024:	d82c      	bhi.n	800e080 <__sflush_r+0xb8>
 800e026:	4a2a      	ldr	r2, [pc, #168]	; (800e0d0 <__sflush_r+0x108>)
 800e028:	40ca      	lsrs	r2, r1
 800e02a:	07d6      	lsls	r6, r2, #31
 800e02c:	d528      	bpl.n	800e080 <__sflush_r+0xb8>
 800e02e:	2200      	movs	r2, #0
 800e030:	6062      	str	r2, [r4, #4]
 800e032:	04d9      	lsls	r1, r3, #19
 800e034:	6922      	ldr	r2, [r4, #16]
 800e036:	6022      	str	r2, [r4, #0]
 800e038:	d504      	bpl.n	800e044 <__sflush_r+0x7c>
 800e03a:	1c42      	adds	r2, r0, #1
 800e03c:	d101      	bne.n	800e042 <__sflush_r+0x7a>
 800e03e:	682b      	ldr	r3, [r5, #0]
 800e040:	b903      	cbnz	r3, 800e044 <__sflush_r+0x7c>
 800e042:	6560      	str	r0, [r4, #84]	; 0x54
 800e044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e046:	602f      	str	r7, [r5, #0]
 800e048:	2900      	cmp	r1, #0
 800e04a:	d0ca      	beq.n	800dfe2 <__sflush_r+0x1a>
 800e04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e050:	4299      	cmp	r1, r3
 800e052:	d002      	beq.n	800e05a <__sflush_r+0x92>
 800e054:	4628      	mov	r0, r5
 800e056:	f000 fd71 	bl	800eb3c <_free_r>
 800e05a:	2000      	movs	r0, #0
 800e05c:	6360      	str	r0, [r4, #52]	; 0x34
 800e05e:	e7c1      	b.n	800dfe4 <__sflush_r+0x1c>
 800e060:	6a21      	ldr	r1, [r4, #32]
 800e062:	2301      	movs	r3, #1
 800e064:	4628      	mov	r0, r5
 800e066:	47b0      	blx	r6
 800e068:	1c41      	adds	r1, r0, #1
 800e06a:	d1c7      	bne.n	800dffc <__sflush_r+0x34>
 800e06c:	682b      	ldr	r3, [r5, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d0c4      	beq.n	800dffc <__sflush_r+0x34>
 800e072:	2b1d      	cmp	r3, #29
 800e074:	d001      	beq.n	800e07a <__sflush_r+0xb2>
 800e076:	2b16      	cmp	r3, #22
 800e078:	d101      	bne.n	800e07e <__sflush_r+0xb6>
 800e07a:	602f      	str	r7, [r5, #0]
 800e07c:	e7b1      	b.n	800dfe2 <__sflush_r+0x1a>
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e084:	81a3      	strh	r3, [r4, #12]
 800e086:	e7ad      	b.n	800dfe4 <__sflush_r+0x1c>
 800e088:	690f      	ldr	r7, [r1, #16]
 800e08a:	2f00      	cmp	r7, #0
 800e08c:	d0a9      	beq.n	800dfe2 <__sflush_r+0x1a>
 800e08e:	0793      	lsls	r3, r2, #30
 800e090:	680e      	ldr	r6, [r1, #0]
 800e092:	bf08      	it	eq
 800e094:	694b      	ldreq	r3, [r1, #20]
 800e096:	600f      	str	r7, [r1, #0]
 800e098:	bf18      	it	ne
 800e09a:	2300      	movne	r3, #0
 800e09c:	eba6 0807 	sub.w	r8, r6, r7
 800e0a0:	608b      	str	r3, [r1, #8]
 800e0a2:	f1b8 0f00 	cmp.w	r8, #0
 800e0a6:	dd9c      	ble.n	800dfe2 <__sflush_r+0x1a>
 800e0a8:	6a21      	ldr	r1, [r4, #32]
 800e0aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0ac:	4643      	mov	r3, r8
 800e0ae:	463a      	mov	r2, r7
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	47b0      	blx	r6
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	dc06      	bgt.n	800e0c6 <__sflush_r+0xfe>
 800e0b8:	89a3      	ldrh	r3, [r4, #12]
 800e0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0be:	81a3      	strh	r3, [r4, #12]
 800e0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c4:	e78e      	b.n	800dfe4 <__sflush_r+0x1c>
 800e0c6:	4407      	add	r7, r0
 800e0c8:	eba8 0800 	sub.w	r8, r8, r0
 800e0cc:	e7e9      	b.n	800e0a2 <__sflush_r+0xda>
 800e0ce:	bf00      	nop
 800e0d0:	20400001 	.word	0x20400001

0800e0d4 <_fflush_r>:
 800e0d4:	b538      	push	{r3, r4, r5, lr}
 800e0d6:	690b      	ldr	r3, [r1, #16]
 800e0d8:	4605      	mov	r5, r0
 800e0da:	460c      	mov	r4, r1
 800e0dc:	b913      	cbnz	r3, 800e0e4 <_fflush_r+0x10>
 800e0de:	2500      	movs	r5, #0
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	bd38      	pop	{r3, r4, r5, pc}
 800e0e4:	b118      	cbz	r0, 800e0ee <_fflush_r+0x1a>
 800e0e6:	6983      	ldr	r3, [r0, #24]
 800e0e8:	b90b      	cbnz	r3, 800e0ee <_fflush_r+0x1a>
 800e0ea:	f000 f887 	bl	800e1fc <__sinit>
 800e0ee:	4b14      	ldr	r3, [pc, #80]	; (800e140 <_fflush_r+0x6c>)
 800e0f0:	429c      	cmp	r4, r3
 800e0f2:	d11b      	bne.n	800e12c <_fflush_r+0x58>
 800e0f4:	686c      	ldr	r4, [r5, #4]
 800e0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d0ef      	beq.n	800e0de <_fflush_r+0xa>
 800e0fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e100:	07d0      	lsls	r0, r2, #31
 800e102:	d404      	bmi.n	800e10e <_fflush_r+0x3a>
 800e104:	0599      	lsls	r1, r3, #22
 800e106:	d402      	bmi.n	800e10e <_fflush_r+0x3a>
 800e108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e10a:	f000 f91a 	bl	800e342 <__retarget_lock_acquire_recursive>
 800e10e:	4628      	mov	r0, r5
 800e110:	4621      	mov	r1, r4
 800e112:	f7ff ff59 	bl	800dfc8 <__sflush_r>
 800e116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e118:	07da      	lsls	r2, r3, #31
 800e11a:	4605      	mov	r5, r0
 800e11c:	d4e0      	bmi.n	800e0e0 <_fflush_r+0xc>
 800e11e:	89a3      	ldrh	r3, [r4, #12]
 800e120:	059b      	lsls	r3, r3, #22
 800e122:	d4dd      	bmi.n	800e0e0 <_fflush_r+0xc>
 800e124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e126:	f000 f90d 	bl	800e344 <__retarget_lock_release_recursive>
 800e12a:	e7d9      	b.n	800e0e0 <_fflush_r+0xc>
 800e12c:	4b05      	ldr	r3, [pc, #20]	; (800e144 <_fflush_r+0x70>)
 800e12e:	429c      	cmp	r4, r3
 800e130:	d101      	bne.n	800e136 <_fflush_r+0x62>
 800e132:	68ac      	ldr	r4, [r5, #8]
 800e134:	e7df      	b.n	800e0f6 <_fflush_r+0x22>
 800e136:	4b04      	ldr	r3, [pc, #16]	; (800e148 <_fflush_r+0x74>)
 800e138:	429c      	cmp	r4, r3
 800e13a:	bf08      	it	eq
 800e13c:	68ec      	ldreq	r4, [r5, #12]
 800e13e:	e7da      	b.n	800e0f6 <_fflush_r+0x22>
 800e140:	0800f46c 	.word	0x0800f46c
 800e144:	0800f48c 	.word	0x0800f48c
 800e148:	0800f44c 	.word	0x0800f44c

0800e14c <std>:
 800e14c:	2300      	movs	r3, #0
 800e14e:	b510      	push	{r4, lr}
 800e150:	4604      	mov	r4, r0
 800e152:	e9c0 3300 	strd	r3, r3, [r0]
 800e156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e15a:	6083      	str	r3, [r0, #8]
 800e15c:	8181      	strh	r1, [r0, #12]
 800e15e:	6643      	str	r3, [r0, #100]	; 0x64
 800e160:	81c2      	strh	r2, [r0, #14]
 800e162:	6183      	str	r3, [r0, #24]
 800e164:	4619      	mov	r1, r3
 800e166:	2208      	movs	r2, #8
 800e168:	305c      	adds	r0, #92	; 0x5c
 800e16a:	f7fe fa47 	bl	800c5fc <memset>
 800e16e:	4b05      	ldr	r3, [pc, #20]	; (800e184 <std+0x38>)
 800e170:	6263      	str	r3, [r4, #36]	; 0x24
 800e172:	4b05      	ldr	r3, [pc, #20]	; (800e188 <std+0x3c>)
 800e174:	62a3      	str	r3, [r4, #40]	; 0x28
 800e176:	4b05      	ldr	r3, [pc, #20]	; (800e18c <std+0x40>)
 800e178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e17a:	4b05      	ldr	r3, [pc, #20]	; (800e190 <std+0x44>)
 800e17c:	6224      	str	r4, [r4, #32]
 800e17e:	6323      	str	r3, [r4, #48]	; 0x30
 800e180:	bd10      	pop	{r4, pc}
 800e182:	bf00      	nop
 800e184:	0800ecb1 	.word	0x0800ecb1
 800e188:	0800ecd3 	.word	0x0800ecd3
 800e18c:	0800ed0b 	.word	0x0800ed0b
 800e190:	0800ed2f 	.word	0x0800ed2f

0800e194 <_cleanup_r>:
 800e194:	4901      	ldr	r1, [pc, #4]	; (800e19c <_cleanup_r+0x8>)
 800e196:	f000 b8af 	b.w	800e2f8 <_fwalk_reent>
 800e19a:	bf00      	nop
 800e19c:	0800e0d5 	.word	0x0800e0d5

0800e1a0 <__sfmoreglue>:
 800e1a0:	b570      	push	{r4, r5, r6, lr}
 800e1a2:	1e4a      	subs	r2, r1, #1
 800e1a4:	2568      	movs	r5, #104	; 0x68
 800e1a6:	4355      	muls	r5, r2
 800e1a8:	460e      	mov	r6, r1
 800e1aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1ae:	f000 fd15 	bl	800ebdc <_malloc_r>
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	b140      	cbz	r0, 800e1c8 <__sfmoreglue+0x28>
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	e9c0 1600 	strd	r1, r6, [r0]
 800e1bc:	300c      	adds	r0, #12
 800e1be:	60a0      	str	r0, [r4, #8]
 800e1c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e1c4:	f7fe fa1a 	bl	800c5fc <memset>
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	bd70      	pop	{r4, r5, r6, pc}

0800e1cc <__sfp_lock_acquire>:
 800e1cc:	4801      	ldr	r0, [pc, #4]	; (800e1d4 <__sfp_lock_acquire+0x8>)
 800e1ce:	f000 b8b8 	b.w	800e342 <__retarget_lock_acquire_recursive>
 800e1d2:	bf00      	nop
 800e1d4:	200042e4 	.word	0x200042e4

0800e1d8 <__sfp_lock_release>:
 800e1d8:	4801      	ldr	r0, [pc, #4]	; (800e1e0 <__sfp_lock_release+0x8>)
 800e1da:	f000 b8b3 	b.w	800e344 <__retarget_lock_release_recursive>
 800e1de:	bf00      	nop
 800e1e0:	200042e4 	.word	0x200042e4

0800e1e4 <__sinit_lock_acquire>:
 800e1e4:	4801      	ldr	r0, [pc, #4]	; (800e1ec <__sinit_lock_acquire+0x8>)
 800e1e6:	f000 b8ac 	b.w	800e342 <__retarget_lock_acquire_recursive>
 800e1ea:	bf00      	nop
 800e1ec:	200042df 	.word	0x200042df

0800e1f0 <__sinit_lock_release>:
 800e1f0:	4801      	ldr	r0, [pc, #4]	; (800e1f8 <__sinit_lock_release+0x8>)
 800e1f2:	f000 b8a7 	b.w	800e344 <__retarget_lock_release_recursive>
 800e1f6:	bf00      	nop
 800e1f8:	200042df 	.word	0x200042df

0800e1fc <__sinit>:
 800e1fc:	b510      	push	{r4, lr}
 800e1fe:	4604      	mov	r4, r0
 800e200:	f7ff fff0 	bl	800e1e4 <__sinit_lock_acquire>
 800e204:	69a3      	ldr	r3, [r4, #24]
 800e206:	b11b      	cbz	r3, 800e210 <__sinit+0x14>
 800e208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e20c:	f7ff bff0 	b.w	800e1f0 <__sinit_lock_release>
 800e210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e214:	6523      	str	r3, [r4, #80]	; 0x50
 800e216:	4b13      	ldr	r3, [pc, #76]	; (800e264 <__sinit+0x68>)
 800e218:	4a13      	ldr	r2, [pc, #76]	; (800e268 <__sinit+0x6c>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e21e:	42a3      	cmp	r3, r4
 800e220:	bf04      	itt	eq
 800e222:	2301      	moveq	r3, #1
 800e224:	61a3      	streq	r3, [r4, #24]
 800e226:	4620      	mov	r0, r4
 800e228:	f000 f820 	bl	800e26c <__sfp>
 800e22c:	6060      	str	r0, [r4, #4]
 800e22e:	4620      	mov	r0, r4
 800e230:	f000 f81c 	bl	800e26c <__sfp>
 800e234:	60a0      	str	r0, [r4, #8]
 800e236:	4620      	mov	r0, r4
 800e238:	f000 f818 	bl	800e26c <__sfp>
 800e23c:	2200      	movs	r2, #0
 800e23e:	60e0      	str	r0, [r4, #12]
 800e240:	2104      	movs	r1, #4
 800e242:	6860      	ldr	r0, [r4, #4]
 800e244:	f7ff ff82 	bl	800e14c <std>
 800e248:	68a0      	ldr	r0, [r4, #8]
 800e24a:	2201      	movs	r2, #1
 800e24c:	2109      	movs	r1, #9
 800e24e:	f7ff ff7d 	bl	800e14c <std>
 800e252:	68e0      	ldr	r0, [r4, #12]
 800e254:	2202      	movs	r2, #2
 800e256:	2112      	movs	r1, #18
 800e258:	f7ff ff78 	bl	800e14c <std>
 800e25c:	2301      	movs	r3, #1
 800e25e:	61a3      	str	r3, [r4, #24]
 800e260:	e7d2      	b.n	800e208 <__sinit+0xc>
 800e262:	bf00      	nop
 800e264:	0800f380 	.word	0x0800f380
 800e268:	0800e195 	.word	0x0800e195

0800e26c <__sfp>:
 800e26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e26e:	4607      	mov	r7, r0
 800e270:	f7ff ffac 	bl	800e1cc <__sfp_lock_acquire>
 800e274:	4b1e      	ldr	r3, [pc, #120]	; (800e2f0 <__sfp+0x84>)
 800e276:	681e      	ldr	r6, [r3, #0]
 800e278:	69b3      	ldr	r3, [r6, #24]
 800e27a:	b913      	cbnz	r3, 800e282 <__sfp+0x16>
 800e27c:	4630      	mov	r0, r6
 800e27e:	f7ff ffbd 	bl	800e1fc <__sinit>
 800e282:	3648      	adds	r6, #72	; 0x48
 800e284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e288:	3b01      	subs	r3, #1
 800e28a:	d503      	bpl.n	800e294 <__sfp+0x28>
 800e28c:	6833      	ldr	r3, [r6, #0]
 800e28e:	b30b      	cbz	r3, 800e2d4 <__sfp+0x68>
 800e290:	6836      	ldr	r6, [r6, #0]
 800e292:	e7f7      	b.n	800e284 <__sfp+0x18>
 800e294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e298:	b9d5      	cbnz	r5, 800e2d0 <__sfp+0x64>
 800e29a:	4b16      	ldr	r3, [pc, #88]	; (800e2f4 <__sfp+0x88>)
 800e29c:	60e3      	str	r3, [r4, #12]
 800e29e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2a2:	6665      	str	r5, [r4, #100]	; 0x64
 800e2a4:	f000 f84c 	bl	800e340 <__retarget_lock_init_recursive>
 800e2a8:	f7ff ff96 	bl	800e1d8 <__sfp_lock_release>
 800e2ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2b4:	6025      	str	r5, [r4, #0]
 800e2b6:	61a5      	str	r5, [r4, #24]
 800e2b8:	2208      	movs	r2, #8
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e2c0:	f7fe f99c 	bl	800c5fc <memset>
 800e2c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e2c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2d0:	3468      	adds	r4, #104	; 0x68
 800e2d2:	e7d9      	b.n	800e288 <__sfp+0x1c>
 800e2d4:	2104      	movs	r1, #4
 800e2d6:	4638      	mov	r0, r7
 800e2d8:	f7ff ff62 	bl	800e1a0 <__sfmoreglue>
 800e2dc:	4604      	mov	r4, r0
 800e2de:	6030      	str	r0, [r6, #0]
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d1d5      	bne.n	800e290 <__sfp+0x24>
 800e2e4:	f7ff ff78 	bl	800e1d8 <__sfp_lock_release>
 800e2e8:	230c      	movs	r3, #12
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	e7ee      	b.n	800e2cc <__sfp+0x60>
 800e2ee:	bf00      	nop
 800e2f0:	0800f380 	.word	0x0800f380
 800e2f4:	ffff0001 	.word	0xffff0001

0800e2f8 <_fwalk_reent>:
 800e2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2fc:	4606      	mov	r6, r0
 800e2fe:	4688      	mov	r8, r1
 800e300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e304:	2700      	movs	r7, #0
 800e306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e30a:	f1b9 0901 	subs.w	r9, r9, #1
 800e30e:	d505      	bpl.n	800e31c <_fwalk_reent+0x24>
 800e310:	6824      	ldr	r4, [r4, #0]
 800e312:	2c00      	cmp	r4, #0
 800e314:	d1f7      	bne.n	800e306 <_fwalk_reent+0xe>
 800e316:	4638      	mov	r0, r7
 800e318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e31c:	89ab      	ldrh	r3, [r5, #12]
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d907      	bls.n	800e332 <_fwalk_reent+0x3a>
 800e322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e326:	3301      	adds	r3, #1
 800e328:	d003      	beq.n	800e332 <_fwalk_reent+0x3a>
 800e32a:	4629      	mov	r1, r5
 800e32c:	4630      	mov	r0, r6
 800e32e:	47c0      	blx	r8
 800e330:	4307      	orrs	r7, r0
 800e332:	3568      	adds	r5, #104	; 0x68
 800e334:	e7e9      	b.n	800e30a <_fwalk_reent+0x12>
	...

0800e338 <_localeconv_r>:
 800e338:	4800      	ldr	r0, [pc, #0]	; (800e33c <_localeconv_r+0x4>)
 800e33a:	4770      	bx	lr
 800e33c:	2000017c 	.word	0x2000017c

0800e340 <__retarget_lock_init_recursive>:
 800e340:	4770      	bx	lr

0800e342 <__retarget_lock_acquire_recursive>:
 800e342:	4770      	bx	lr

0800e344 <__retarget_lock_release_recursive>:
 800e344:	4770      	bx	lr

0800e346 <__swhatbuf_r>:
 800e346:	b570      	push	{r4, r5, r6, lr}
 800e348:	460e      	mov	r6, r1
 800e34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e34e:	2900      	cmp	r1, #0
 800e350:	b096      	sub	sp, #88	; 0x58
 800e352:	4614      	mov	r4, r2
 800e354:	461d      	mov	r5, r3
 800e356:	da07      	bge.n	800e368 <__swhatbuf_r+0x22>
 800e358:	2300      	movs	r3, #0
 800e35a:	602b      	str	r3, [r5, #0]
 800e35c:	89b3      	ldrh	r3, [r6, #12]
 800e35e:	061a      	lsls	r2, r3, #24
 800e360:	d410      	bmi.n	800e384 <__swhatbuf_r+0x3e>
 800e362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e366:	e00e      	b.n	800e386 <__swhatbuf_r+0x40>
 800e368:	466a      	mov	r2, sp
 800e36a:	f000 fd37 	bl	800eddc <_fstat_r>
 800e36e:	2800      	cmp	r0, #0
 800e370:	dbf2      	blt.n	800e358 <__swhatbuf_r+0x12>
 800e372:	9a01      	ldr	r2, [sp, #4]
 800e374:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e378:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e37c:	425a      	negs	r2, r3
 800e37e:	415a      	adcs	r2, r3
 800e380:	602a      	str	r2, [r5, #0]
 800e382:	e7ee      	b.n	800e362 <__swhatbuf_r+0x1c>
 800e384:	2340      	movs	r3, #64	; 0x40
 800e386:	2000      	movs	r0, #0
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	b016      	add	sp, #88	; 0x58
 800e38c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e390 <__smakebuf_r>:
 800e390:	898b      	ldrh	r3, [r1, #12]
 800e392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e394:	079d      	lsls	r5, r3, #30
 800e396:	4606      	mov	r6, r0
 800e398:	460c      	mov	r4, r1
 800e39a:	d507      	bpl.n	800e3ac <__smakebuf_r+0x1c>
 800e39c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	6123      	str	r3, [r4, #16]
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	6163      	str	r3, [r4, #20]
 800e3a8:	b002      	add	sp, #8
 800e3aa:	bd70      	pop	{r4, r5, r6, pc}
 800e3ac:	ab01      	add	r3, sp, #4
 800e3ae:	466a      	mov	r2, sp
 800e3b0:	f7ff ffc9 	bl	800e346 <__swhatbuf_r>
 800e3b4:	9900      	ldr	r1, [sp, #0]
 800e3b6:	4605      	mov	r5, r0
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f000 fc0f 	bl	800ebdc <_malloc_r>
 800e3be:	b948      	cbnz	r0, 800e3d4 <__smakebuf_r+0x44>
 800e3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3c4:	059a      	lsls	r2, r3, #22
 800e3c6:	d4ef      	bmi.n	800e3a8 <__smakebuf_r+0x18>
 800e3c8:	f023 0303 	bic.w	r3, r3, #3
 800e3cc:	f043 0302 	orr.w	r3, r3, #2
 800e3d0:	81a3      	strh	r3, [r4, #12]
 800e3d2:	e7e3      	b.n	800e39c <__smakebuf_r+0xc>
 800e3d4:	4b0d      	ldr	r3, [pc, #52]	; (800e40c <__smakebuf_r+0x7c>)
 800e3d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e3d8:	89a3      	ldrh	r3, [r4, #12]
 800e3da:	6020      	str	r0, [r4, #0]
 800e3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3e0:	81a3      	strh	r3, [r4, #12]
 800e3e2:	9b00      	ldr	r3, [sp, #0]
 800e3e4:	6163      	str	r3, [r4, #20]
 800e3e6:	9b01      	ldr	r3, [sp, #4]
 800e3e8:	6120      	str	r0, [r4, #16]
 800e3ea:	b15b      	cbz	r3, 800e404 <__smakebuf_r+0x74>
 800e3ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	f000 fd05 	bl	800ee00 <_isatty_r>
 800e3f6:	b128      	cbz	r0, 800e404 <__smakebuf_r+0x74>
 800e3f8:	89a3      	ldrh	r3, [r4, #12]
 800e3fa:	f023 0303 	bic.w	r3, r3, #3
 800e3fe:	f043 0301 	orr.w	r3, r3, #1
 800e402:	81a3      	strh	r3, [r4, #12]
 800e404:	89a0      	ldrh	r0, [r4, #12]
 800e406:	4305      	orrs	r5, r0
 800e408:	81a5      	strh	r5, [r4, #12]
 800e40a:	e7cd      	b.n	800e3a8 <__smakebuf_r+0x18>
 800e40c:	0800e195 	.word	0x0800e195

0800e410 <malloc>:
 800e410:	4b02      	ldr	r3, [pc, #8]	; (800e41c <malloc+0xc>)
 800e412:	4601      	mov	r1, r0
 800e414:	6818      	ldr	r0, [r3, #0]
 800e416:	f000 bbe1 	b.w	800ebdc <_malloc_r>
 800e41a:	bf00      	nop
 800e41c:	20000028 	.word	0x20000028

0800e420 <_Balloc>:
 800e420:	b570      	push	{r4, r5, r6, lr}
 800e422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e424:	4604      	mov	r4, r0
 800e426:	460d      	mov	r5, r1
 800e428:	b976      	cbnz	r6, 800e448 <_Balloc+0x28>
 800e42a:	2010      	movs	r0, #16
 800e42c:	f7ff fff0 	bl	800e410 <malloc>
 800e430:	4602      	mov	r2, r0
 800e432:	6260      	str	r0, [r4, #36]	; 0x24
 800e434:	b920      	cbnz	r0, 800e440 <_Balloc+0x20>
 800e436:	4b18      	ldr	r3, [pc, #96]	; (800e498 <_Balloc+0x78>)
 800e438:	4818      	ldr	r0, [pc, #96]	; (800e49c <_Balloc+0x7c>)
 800e43a:	2166      	movs	r1, #102	; 0x66
 800e43c:	f000 fc8e 	bl	800ed5c <__assert_func>
 800e440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e444:	6006      	str	r6, [r0, #0]
 800e446:	60c6      	str	r6, [r0, #12]
 800e448:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e44a:	68f3      	ldr	r3, [r6, #12]
 800e44c:	b183      	cbz	r3, 800e470 <_Balloc+0x50>
 800e44e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e456:	b9b8      	cbnz	r0, 800e488 <_Balloc+0x68>
 800e458:	2101      	movs	r1, #1
 800e45a:	fa01 f605 	lsl.w	r6, r1, r5
 800e45e:	1d72      	adds	r2, r6, #5
 800e460:	0092      	lsls	r2, r2, #2
 800e462:	4620      	mov	r0, r4
 800e464:	f000 fb5a 	bl	800eb1c <_calloc_r>
 800e468:	b160      	cbz	r0, 800e484 <_Balloc+0x64>
 800e46a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e46e:	e00e      	b.n	800e48e <_Balloc+0x6e>
 800e470:	2221      	movs	r2, #33	; 0x21
 800e472:	2104      	movs	r1, #4
 800e474:	4620      	mov	r0, r4
 800e476:	f000 fb51 	bl	800eb1c <_calloc_r>
 800e47a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e47c:	60f0      	str	r0, [r6, #12]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d1e4      	bne.n	800e44e <_Balloc+0x2e>
 800e484:	2000      	movs	r0, #0
 800e486:	bd70      	pop	{r4, r5, r6, pc}
 800e488:	6802      	ldr	r2, [r0, #0]
 800e48a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e48e:	2300      	movs	r3, #0
 800e490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e494:	e7f7      	b.n	800e486 <_Balloc+0x66>
 800e496:	bf00      	nop
 800e498:	0800f3c5 	.word	0x0800f3c5
 800e49c:	0800f4ac 	.word	0x0800f4ac

0800e4a0 <_Bfree>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4a4:	4605      	mov	r5, r0
 800e4a6:	460c      	mov	r4, r1
 800e4a8:	b976      	cbnz	r6, 800e4c8 <_Bfree+0x28>
 800e4aa:	2010      	movs	r0, #16
 800e4ac:	f7ff ffb0 	bl	800e410 <malloc>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	6268      	str	r0, [r5, #36]	; 0x24
 800e4b4:	b920      	cbnz	r0, 800e4c0 <_Bfree+0x20>
 800e4b6:	4b09      	ldr	r3, [pc, #36]	; (800e4dc <_Bfree+0x3c>)
 800e4b8:	4809      	ldr	r0, [pc, #36]	; (800e4e0 <_Bfree+0x40>)
 800e4ba:	218a      	movs	r1, #138	; 0x8a
 800e4bc:	f000 fc4e 	bl	800ed5c <__assert_func>
 800e4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4c4:	6006      	str	r6, [r0, #0]
 800e4c6:	60c6      	str	r6, [r0, #12]
 800e4c8:	b13c      	cbz	r4, 800e4da <_Bfree+0x3a>
 800e4ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4cc:	6862      	ldr	r2, [r4, #4]
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4d4:	6021      	str	r1, [r4, #0]
 800e4d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4da:	bd70      	pop	{r4, r5, r6, pc}
 800e4dc:	0800f3c5 	.word	0x0800f3c5
 800e4e0:	0800f4ac 	.word	0x0800f4ac

0800e4e4 <__multadd>:
 800e4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e8:	690e      	ldr	r6, [r1, #16]
 800e4ea:	4607      	mov	r7, r0
 800e4ec:	4698      	mov	r8, r3
 800e4ee:	460c      	mov	r4, r1
 800e4f0:	f101 0014 	add.w	r0, r1, #20
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	6805      	ldr	r5, [r0, #0]
 800e4f8:	b2a9      	uxth	r1, r5
 800e4fa:	fb02 8101 	mla	r1, r2, r1, r8
 800e4fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e502:	0c2d      	lsrs	r5, r5, #16
 800e504:	fb02 c505 	mla	r5, r2, r5, ip
 800e508:	b289      	uxth	r1, r1
 800e50a:	3301      	adds	r3, #1
 800e50c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e510:	429e      	cmp	r6, r3
 800e512:	f840 1b04 	str.w	r1, [r0], #4
 800e516:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e51a:	dcec      	bgt.n	800e4f6 <__multadd+0x12>
 800e51c:	f1b8 0f00 	cmp.w	r8, #0
 800e520:	d022      	beq.n	800e568 <__multadd+0x84>
 800e522:	68a3      	ldr	r3, [r4, #8]
 800e524:	42b3      	cmp	r3, r6
 800e526:	dc19      	bgt.n	800e55c <__multadd+0x78>
 800e528:	6861      	ldr	r1, [r4, #4]
 800e52a:	4638      	mov	r0, r7
 800e52c:	3101      	adds	r1, #1
 800e52e:	f7ff ff77 	bl	800e420 <_Balloc>
 800e532:	4605      	mov	r5, r0
 800e534:	b928      	cbnz	r0, 800e542 <__multadd+0x5e>
 800e536:	4602      	mov	r2, r0
 800e538:	4b0d      	ldr	r3, [pc, #52]	; (800e570 <__multadd+0x8c>)
 800e53a:	480e      	ldr	r0, [pc, #56]	; (800e574 <__multadd+0x90>)
 800e53c:	21b5      	movs	r1, #181	; 0xb5
 800e53e:	f000 fc0d 	bl	800ed5c <__assert_func>
 800e542:	6922      	ldr	r2, [r4, #16]
 800e544:	3202      	adds	r2, #2
 800e546:	f104 010c 	add.w	r1, r4, #12
 800e54a:	0092      	lsls	r2, r2, #2
 800e54c:	300c      	adds	r0, #12
 800e54e:	f7fe f847 	bl	800c5e0 <memcpy>
 800e552:	4621      	mov	r1, r4
 800e554:	4638      	mov	r0, r7
 800e556:	f7ff ffa3 	bl	800e4a0 <_Bfree>
 800e55a:	462c      	mov	r4, r5
 800e55c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e560:	3601      	adds	r6, #1
 800e562:	f8c3 8014 	str.w	r8, [r3, #20]
 800e566:	6126      	str	r6, [r4, #16]
 800e568:	4620      	mov	r0, r4
 800e56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e56e:	bf00      	nop
 800e570:	0800f43b 	.word	0x0800f43b
 800e574:	0800f4ac 	.word	0x0800f4ac

0800e578 <__hi0bits>:
 800e578:	0c03      	lsrs	r3, r0, #16
 800e57a:	041b      	lsls	r3, r3, #16
 800e57c:	b9d3      	cbnz	r3, 800e5b4 <__hi0bits+0x3c>
 800e57e:	0400      	lsls	r0, r0, #16
 800e580:	2310      	movs	r3, #16
 800e582:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e586:	bf04      	itt	eq
 800e588:	0200      	lsleq	r0, r0, #8
 800e58a:	3308      	addeq	r3, #8
 800e58c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e590:	bf04      	itt	eq
 800e592:	0100      	lsleq	r0, r0, #4
 800e594:	3304      	addeq	r3, #4
 800e596:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e59a:	bf04      	itt	eq
 800e59c:	0080      	lsleq	r0, r0, #2
 800e59e:	3302      	addeq	r3, #2
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	db05      	blt.n	800e5b0 <__hi0bits+0x38>
 800e5a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5a8:	f103 0301 	add.w	r3, r3, #1
 800e5ac:	bf08      	it	eq
 800e5ae:	2320      	moveq	r3, #32
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	4770      	bx	lr
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	e7e4      	b.n	800e582 <__hi0bits+0xa>

0800e5b8 <__lo0bits>:
 800e5b8:	6803      	ldr	r3, [r0, #0]
 800e5ba:	f013 0207 	ands.w	r2, r3, #7
 800e5be:	4601      	mov	r1, r0
 800e5c0:	d00b      	beq.n	800e5da <__lo0bits+0x22>
 800e5c2:	07da      	lsls	r2, r3, #31
 800e5c4:	d424      	bmi.n	800e610 <__lo0bits+0x58>
 800e5c6:	0798      	lsls	r0, r3, #30
 800e5c8:	bf49      	itett	mi
 800e5ca:	085b      	lsrmi	r3, r3, #1
 800e5cc:	089b      	lsrpl	r3, r3, #2
 800e5ce:	2001      	movmi	r0, #1
 800e5d0:	600b      	strmi	r3, [r1, #0]
 800e5d2:	bf5c      	itt	pl
 800e5d4:	600b      	strpl	r3, [r1, #0]
 800e5d6:	2002      	movpl	r0, #2
 800e5d8:	4770      	bx	lr
 800e5da:	b298      	uxth	r0, r3
 800e5dc:	b9b0      	cbnz	r0, 800e60c <__lo0bits+0x54>
 800e5de:	0c1b      	lsrs	r3, r3, #16
 800e5e0:	2010      	movs	r0, #16
 800e5e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e5e6:	bf04      	itt	eq
 800e5e8:	0a1b      	lsreq	r3, r3, #8
 800e5ea:	3008      	addeq	r0, #8
 800e5ec:	071a      	lsls	r2, r3, #28
 800e5ee:	bf04      	itt	eq
 800e5f0:	091b      	lsreq	r3, r3, #4
 800e5f2:	3004      	addeq	r0, #4
 800e5f4:	079a      	lsls	r2, r3, #30
 800e5f6:	bf04      	itt	eq
 800e5f8:	089b      	lsreq	r3, r3, #2
 800e5fa:	3002      	addeq	r0, #2
 800e5fc:	07da      	lsls	r2, r3, #31
 800e5fe:	d403      	bmi.n	800e608 <__lo0bits+0x50>
 800e600:	085b      	lsrs	r3, r3, #1
 800e602:	f100 0001 	add.w	r0, r0, #1
 800e606:	d005      	beq.n	800e614 <__lo0bits+0x5c>
 800e608:	600b      	str	r3, [r1, #0]
 800e60a:	4770      	bx	lr
 800e60c:	4610      	mov	r0, r2
 800e60e:	e7e8      	b.n	800e5e2 <__lo0bits+0x2a>
 800e610:	2000      	movs	r0, #0
 800e612:	4770      	bx	lr
 800e614:	2020      	movs	r0, #32
 800e616:	4770      	bx	lr

0800e618 <__i2b>:
 800e618:	b510      	push	{r4, lr}
 800e61a:	460c      	mov	r4, r1
 800e61c:	2101      	movs	r1, #1
 800e61e:	f7ff feff 	bl	800e420 <_Balloc>
 800e622:	4602      	mov	r2, r0
 800e624:	b928      	cbnz	r0, 800e632 <__i2b+0x1a>
 800e626:	4b05      	ldr	r3, [pc, #20]	; (800e63c <__i2b+0x24>)
 800e628:	4805      	ldr	r0, [pc, #20]	; (800e640 <__i2b+0x28>)
 800e62a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e62e:	f000 fb95 	bl	800ed5c <__assert_func>
 800e632:	2301      	movs	r3, #1
 800e634:	6144      	str	r4, [r0, #20]
 800e636:	6103      	str	r3, [r0, #16]
 800e638:	bd10      	pop	{r4, pc}
 800e63a:	bf00      	nop
 800e63c:	0800f43b 	.word	0x0800f43b
 800e640:	0800f4ac 	.word	0x0800f4ac

0800e644 <__multiply>:
 800e644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e648:	4614      	mov	r4, r2
 800e64a:	690a      	ldr	r2, [r1, #16]
 800e64c:	6923      	ldr	r3, [r4, #16]
 800e64e:	429a      	cmp	r2, r3
 800e650:	bfb8      	it	lt
 800e652:	460b      	movlt	r3, r1
 800e654:	460d      	mov	r5, r1
 800e656:	bfbc      	itt	lt
 800e658:	4625      	movlt	r5, r4
 800e65a:	461c      	movlt	r4, r3
 800e65c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e660:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e664:	68ab      	ldr	r3, [r5, #8]
 800e666:	6869      	ldr	r1, [r5, #4]
 800e668:	eb0a 0709 	add.w	r7, sl, r9
 800e66c:	42bb      	cmp	r3, r7
 800e66e:	b085      	sub	sp, #20
 800e670:	bfb8      	it	lt
 800e672:	3101      	addlt	r1, #1
 800e674:	f7ff fed4 	bl	800e420 <_Balloc>
 800e678:	b930      	cbnz	r0, 800e688 <__multiply+0x44>
 800e67a:	4602      	mov	r2, r0
 800e67c:	4b42      	ldr	r3, [pc, #264]	; (800e788 <__multiply+0x144>)
 800e67e:	4843      	ldr	r0, [pc, #268]	; (800e78c <__multiply+0x148>)
 800e680:	f240 115d 	movw	r1, #349	; 0x15d
 800e684:	f000 fb6a 	bl	800ed5c <__assert_func>
 800e688:	f100 0614 	add.w	r6, r0, #20
 800e68c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e690:	4633      	mov	r3, r6
 800e692:	2200      	movs	r2, #0
 800e694:	4543      	cmp	r3, r8
 800e696:	d31e      	bcc.n	800e6d6 <__multiply+0x92>
 800e698:	f105 0c14 	add.w	ip, r5, #20
 800e69c:	f104 0314 	add.w	r3, r4, #20
 800e6a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e6a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e6a8:	9202      	str	r2, [sp, #8]
 800e6aa:	ebac 0205 	sub.w	r2, ip, r5
 800e6ae:	3a15      	subs	r2, #21
 800e6b0:	f022 0203 	bic.w	r2, r2, #3
 800e6b4:	3204      	adds	r2, #4
 800e6b6:	f105 0115 	add.w	r1, r5, #21
 800e6ba:	458c      	cmp	ip, r1
 800e6bc:	bf38      	it	cc
 800e6be:	2204      	movcc	r2, #4
 800e6c0:	9201      	str	r2, [sp, #4]
 800e6c2:	9a02      	ldr	r2, [sp, #8]
 800e6c4:	9303      	str	r3, [sp, #12]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d808      	bhi.n	800e6dc <__multiply+0x98>
 800e6ca:	2f00      	cmp	r7, #0
 800e6cc:	dc55      	bgt.n	800e77a <__multiply+0x136>
 800e6ce:	6107      	str	r7, [r0, #16]
 800e6d0:	b005      	add	sp, #20
 800e6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d6:	f843 2b04 	str.w	r2, [r3], #4
 800e6da:	e7db      	b.n	800e694 <__multiply+0x50>
 800e6dc:	f8b3 a000 	ldrh.w	sl, [r3]
 800e6e0:	f1ba 0f00 	cmp.w	sl, #0
 800e6e4:	d020      	beq.n	800e728 <__multiply+0xe4>
 800e6e6:	f105 0e14 	add.w	lr, r5, #20
 800e6ea:	46b1      	mov	r9, r6
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e6f2:	f8d9 b000 	ldr.w	fp, [r9]
 800e6f6:	b2a1      	uxth	r1, r4
 800e6f8:	fa1f fb8b 	uxth.w	fp, fp
 800e6fc:	fb0a b101 	mla	r1, sl, r1, fp
 800e700:	4411      	add	r1, r2
 800e702:	f8d9 2000 	ldr.w	r2, [r9]
 800e706:	0c24      	lsrs	r4, r4, #16
 800e708:	0c12      	lsrs	r2, r2, #16
 800e70a:	fb0a 2404 	mla	r4, sl, r4, r2
 800e70e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e712:	b289      	uxth	r1, r1
 800e714:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e718:	45f4      	cmp	ip, lr
 800e71a:	f849 1b04 	str.w	r1, [r9], #4
 800e71e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e722:	d8e4      	bhi.n	800e6ee <__multiply+0xaa>
 800e724:	9901      	ldr	r1, [sp, #4]
 800e726:	5072      	str	r2, [r6, r1]
 800e728:	9a03      	ldr	r2, [sp, #12]
 800e72a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e72e:	3304      	adds	r3, #4
 800e730:	f1b9 0f00 	cmp.w	r9, #0
 800e734:	d01f      	beq.n	800e776 <__multiply+0x132>
 800e736:	6834      	ldr	r4, [r6, #0]
 800e738:	f105 0114 	add.w	r1, r5, #20
 800e73c:	46b6      	mov	lr, r6
 800e73e:	f04f 0a00 	mov.w	sl, #0
 800e742:	880a      	ldrh	r2, [r1, #0]
 800e744:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e748:	fb09 b202 	mla	r2, r9, r2, fp
 800e74c:	4492      	add	sl, r2
 800e74e:	b2a4      	uxth	r4, r4
 800e750:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e754:	f84e 4b04 	str.w	r4, [lr], #4
 800e758:	f851 4b04 	ldr.w	r4, [r1], #4
 800e75c:	f8be 2000 	ldrh.w	r2, [lr]
 800e760:	0c24      	lsrs	r4, r4, #16
 800e762:	fb09 2404 	mla	r4, r9, r4, r2
 800e766:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e76a:	458c      	cmp	ip, r1
 800e76c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e770:	d8e7      	bhi.n	800e742 <__multiply+0xfe>
 800e772:	9a01      	ldr	r2, [sp, #4]
 800e774:	50b4      	str	r4, [r6, r2]
 800e776:	3604      	adds	r6, #4
 800e778:	e7a3      	b.n	800e6c2 <__multiply+0x7e>
 800e77a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1a5      	bne.n	800e6ce <__multiply+0x8a>
 800e782:	3f01      	subs	r7, #1
 800e784:	e7a1      	b.n	800e6ca <__multiply+0x86>
 800e786:	bf00      	nop
 800e788:	0800f43b 	.word	0x0800f43b
 800e78c:	0800f4ac 	.word	0x0800f4ac

0800e790 <__pow5mult>:
 800e790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e794:	4615      	mov	r5, r2
 800e796:	f012 0203 	ands.w	r2, r2, #3
 800e79a:	4606      	mov	r6, r0
 800e79c:	460f      	mov	r7, r1
 800e79e:	d007      	beq.n	800e7b0 <__pow5mult+0x20>
 800e7a0:	4c25      	ldr	r4, [pc, #148]	; (800e838 <__pow5mult+0xa8>)
 800e7a2:	3a01      	subs	r2, #1
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7aa:	f7ff fe9b 	bl	800e4e4 <__multadd>
 800e7ae:	4607      	mov	r7, r0
 800e7b0:	10ad      	asrs	r5, r5, #2
 800e7b2:	d03d      	beq.n	800e830 <__pow5mult+0xa0>
 800e7b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e7b6:	b97c      	cbnz	r4, 800e7d8 <__pow5mult+0x48>
 800e7b8:	2010      	movs	r0, #16
 800e7ba:	f7ff fe29 	bl	800e410 <malloc>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	6270      	str	r0, [r6, #36]	; 0x24
 800e7c2:	b928      	cbnz	r0, 800e7d0 <__pow5mult+0x40>
 800e7c4:	4b1d      	ldr	r3, [pc, #116]	; (800e83c <__pow5mult+0xac>)
 800e7c6:	481e      	ldr	r0, [pc, #120]	; (800e840 <__pow5mult+0xb0>)
 800e7c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e7cc:	f000 fac6 	bl	800ed5c <__assert_func>
 800e7d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7d4:	6004      	str	r4, [r0, #0]
 800e7d6:	60c4      	str	r4, [r0, #12]
 800e7d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e7dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7e0:	b94c      	cbnz	r4, 800e7f6 <__pow5mult+0x66>
 800e7e2:	f240 2171 	movw	r1, #625	; 0x271
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	f7ff ff16 	bl	800e618 <__i2b>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	6003      	str	r3, [r0, #0]
 800e7f6:	f04f 0900 	mov.w	r9, #0
 800e7fa:	07eb      	lsls	r3, r5, #31
 800e7fc:	d50a      	bpl.n	800e814 <__pow5mult+0x84>
 800e7fe:	4639      	mov	r1, r7
 800e800:	4622      	mov	r2, r4
 800e802:	4630      	mov	r0, r6
 800e804:	f7ff ff1e 	bl	800e644 <__multiply>
 800e808:	4639      	mov	r1, r7
 800e80a:	4680      	mov	r8, r0
 800e80c:	4630      	mov	r0, r6
 800e80e:	f7ff fe47 	bl	800e4a0 <_Bfree>
 800e812:	4647      	mov	r7, r8
 800e814:	106d      	asrs	r5, r5, #1
 800e816:	d00b      	beq.n	800e830 <__pow5mult+0xa0>
 800e818:	6820      	ldr	r0, [r4, #0]
 800e81a:	b938      	cbnz	r0, 800e82c <__pow5mult+0x9c>
 800e81c:	4622      	mov	r2, r4
 800e81e:	4621      	mov	r1, r4
 800e820:	4630      	mov	r0, r6
 800e822:	f7ff ff0f 	bl	800e644 <__multiply>
 800e826:	6020      	str	r0, [r4, #0]
 800e828:	f8c0 9000 	str.w	r9, [r0]
 800e82c:	4604      	mov	r4, r0
 800e82e:	e7e4      	b.n	800e7fa <__pow5mult+0x6a>
 800e830:	4638      	mov	r0, r7
 800e832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e836:	bf00      	nop
 800e838:	0800f600 	.word	0x0800f600
 800e83c:	0800f3c5 	.word	0x0800f3c5
 800e840:	0800f4ac 	.word	0x0800f4ac

0800e844 <__lshift>:
 800e844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e848:	460c      	mov	r4, r1
 800e84a:	6849      	ldr	r1, [r1, #4]
 800e84c:	6923      	ldr	r3, [r4, #16]
 800e84e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e852:	68a3      	ldr	r3, [r4, #8]
 800e854:	4607      	mov	r7, r0
 800e856:	4691      	mov	r9, r2
 800e858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e85c:	f108 0601 	add.w	r6, r8, #1
 800e860:	42b3      	cmp	r3, r6
 800e862:	db0b      	blt.n	800e87c <__lshift+0x38>
 800e864:	4638      	mov	r0, r7
 800e866:	f7ff fddb 	bl	800e420 <_Balloc>
 800e86a:	4605      	mov	r5, r0
 800e86c:	b948      	cbnz	r0, 800e882 <__lshift+0x3e>
 800e86e:	4602      	mov	r2, r0
 800e870:	4b28      	ldr	r3, [pc, #160]	; (800e914 <__lshift+0xd0>)
 800e872:	4829      	ldr	r0, [pc, #164]	; (800e918 <__lshift+0xd4>)
 800e874:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e878:	f000 fa70 	bl	800ed5c <__assert_func>
 800e87c:	3101      	adds	r1, #1
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	e7ee      	b.n	800e860 <__lshift+0x1c>
 800e882:	2300      	movs	r3, #0
 800e884:	f100 0114 	add.w	r1, r0, #20
 800e888:	f100 0210 	add.w	r2, r0, #16
 800e88c:	4618      	mov	r0, r3
 800e88e:	4553      	cmp	r3, sl
 800e890:	db33      	blt.n	800e8fa <__lshift+0xb6>
 800e892:	6920      	ldr	r0, [r4, #16]
 800e894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e898:	f104 0314 	add.w	r3, r4, #20
 800e89c:	f019 091f 	ands.w	r9, r9, #31
 800e8a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8a8:	d02b      	beq.n	800e902 <__lshift+0xbe>
 800e8aa:	f1c9 0e20 	rsb	lr, r9, #32
 800e8ae:	468a      	mov	sl, r1
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	6818      	ldr	r0, [r3, #0]
 800e8b4:	fa00 f009 	lsl.w	r0, r0, r9
 800e8b8:	4302      	orrs	r2, r0
 800e8ba:	f84a 2b04 	str.w	r2, [sl], #4
 800e8be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8c2:	459c      	cmp	ip, r3
 800e8c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e8c8:	d8f3      	bhi.n	800e8b2 <__lshift+0x6e>
 800e8ca:	ebac 0304 	sub.w	r3, ip, r4
 800e8ce:	3b15      	subs	r3, #21
 800e8d0:	f023 0303 	bic.w	r3, r3, #3
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	f104 0015 	add.w	r0, r4, #21
 800e8da:	4584      	cmp	ip, r0
 800e8dc:	bf38      	it	cc
 800e8de:	2304      	movcc	r3, #4
 800e8e0:	50ca      	str	r2, [r1, r3]
 800e8e2:	b10a      	cbz	r2, 800e8e8 <__lshift+0xa4>
 800e8e4:	f108 0602 	add.w	r6, r8, #2
 800e8e8:	3e01      	subs	r6, #1
 800e8ea:	4638      	mov	r0, r7
 800e8ec:	612e      	str	r6, [r5, #16]
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	f7ff fdd6 	bl	800e4a0 <_Bfree>
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e8fe:	3301      	adds	r3, #1
 800e900:	e7c5      	b.n	800e88e <__lshift+0x4a>
 800e902:	3904      	subs	r1, #4
 800e904:	f853 2b04 	ldr.w	r2, [r3], #4
 800e908:	f841 2f04 	str.w	r2, [r1, #4]!
 800e90c:	459c      	cmp	ip, r3
 800e90e:	d8f9      	bhi.n	800e904 <__lshift+0xc0>
 800e910:	e7ea      	b.n	800e8e8 <__lshift+0xa4>
 800e912:	bf00      	nop
 800e914:	0800f43b 	.word	0x0800f43b
 800e918:	0800f4ac 	.word	0x0800f4ac

0800e91c <__mcmp>:
 800e91c:	b530      	push	{r4, r5, lr}
 800e91e:	6902      	ldr	r2, [r0, #16]
 800e920:	690c      	ldr	r4, [r1, #16]
 800e922:	1b12      	subs	r2, r2, r4
 800e924:	d10e      	bne.n	800e944 <__mcmp+0x28>
 800e926:	f100 0314 	add.w	r3, r0, #20
 800e92a:	3114      	adds	r1, #20
 800e92c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e930:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e934:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e938:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e93c:	42a5      	cmp	r5, r4
 800e93e:	d003      	beq.n	800e948 <__mcmp+0x2c>
 800e940:	d305      	bcc.n	800e94e <__mcmp+0x32>
 800e942:	2201      	movs	r2, #1
 800e944:	4610      	mov	r0, r2
 800e946:	bd30      	pop	{r4, r5, pc}
 800e948:	4283      	cmp	r3, r0
 800e94a:	d3f3      	bcc.n	800e934 <__mcmp+0x18>
 800e94c:	e7fa      	b.n	800e944 <__mcmp+0x28>
 800e94e:	f04f 32ff 	mov.w	r2, #4294967295
 800e952:	e7f7      	b.n	800e944 <__mcmp+0x28>

0800e954 <__mdiff>:
 800e954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e958:	460c      	mov	r4, r1
 800e95a:	4606      	mov	r6, r0
 800e95c:	4611      	mov	r1, r2
 800e95e:	4620      	mov	r0, r4
 800e960:	4617      	mov	r7, r2
 800e962:	f7ff ffdb 	bl	800e91c <__mcmp>
 800e966:	1e05      	subs	r5, r0, #0
 800e968:	d110      	bne.n	800e98c <__mdiff+0x38>
 800e96a:	4629      	mov	r1, r5
 800e96c:	4630      	mov	r0, r6
 800e96e:	f7ff fd57 	bl	800e420 <_Balloc>
 800e972:	b930      	cbnz	r0, 800e982 <__mdiff+0x2e>
 800e974:	4b39      	ldr	r3, [pc, #228]	; (800ea5c <__mdiff+0x108>)
 800e976:	4602      	mov	r2, r0
 800e978:	f240 2132 	movw	r1, #562	; 0x232
 800e97c:	4838      	ldr	r0, [pc, #224]	; (800ea60 <__mdiff+0x10c>)
 800e97e:	f000 f9ed 	bl	800ed5c <__assert_func>
 800e982:	2301      	movs	r3, #1
 800e984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e98c:	bfa4      	itt	ge
 800e98e:	463b      	movge	r3, r7
 800e990:	4627      	movge	r7, r4
 800e992:	4630      	mov	r0, r6
 800e994:	6879      	ldr	r1, [r7, #4]
 800e996:	bfa6      	itte	ge
 800e998:	461c      	movge	r4, r3
 800e99a:	2500      	movge	r5, #0
 800e99c:	2501      	movlt	r5, #1
 800e99e:	f7ff fd3f 	bl	800e420 <_Balloc>
 800e9a2:	b920      	cbnz	r0, 800e9ae <__mdiff+0x5a>
 800e9a4:	4b2d      	ldr	r3, [pc, #180]	; (800ea5c <__mdiff+0x108>)
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e9ac:	e7e6      	b.n	800e97c <__mdiff+0x28>
 800e9ae:	693e      	ldr	r6, [r7, #16]
 800e9b0:	60c5      	str	r5, [r0, #12]
 800e9b2:	6925      	ldr	r5, [r4, #16]
 800e9b4:	f107 0114 	add.w	r1, r7, #20
 800e9b8:	f104 0914 	add.w	r9, r4, #20
 800e9bc:	f100 0e14 	add.w	lr, r0, #20
 800e9c0:	f107 0210 	add.w	r2, r7, #16
 800e9c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e9c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e9cc:	46f2      	mov	sl, lr
 800e9ce:	2700      	movs	r7, #0
 800e9d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9d8:	fa1f f883 	uxth.w	r8, r3
 800e9dc:	fa17 f78b 	uxtah	r7, r7, fp
 800e9e0:	0c1b      	lsrs	r3, r3, #16
 800e9e2:	eba7 0808 	sub.w	r8, r7, r8
 800e9e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e9ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e9ee:	fa1f f888 	uxth.w	r8, r8
 800e9f2:	141f      	asrs	r7, r3, #16
 800e9f4:	454d      	cmp	r5, r9
 800e9f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e9fa:	f84a 3b04 	str.w	r3, [sl], #4
 800e9fe:	d8e7      	bhi.n	800e9d0 <__mdiff+0x7c>
 800ea00:	1b2b      	subs	r3, r5, r4
 800ea02:	3b15      	subs	r3, #21
 800ea04:	f023 0303 	bic.w	r3, r3, #3
 800ea08:	3304      	adds	r3, #4
 800ea0a:	3415      	adds	r4, #21
 800ea0c:	42a5      	cmp	r5, r4
 800ea0e:	bf38      	it	cc
 800ea10:	2304      	movcc	r3, #4
 800ea12:	4419      	add	r1, r3
 800ea14:	4473      	add	r3, lr
 800ea16:	469e      	mov	lr, r3
 800ea18:	460d      	mov	r5, r1
 800ea1a:	4565      	cmp	r5, ip
 800ea1c:	d30e      	bcc.n	800ea3c <__mdiff+0xe8>
 800ea1e:	f10c 0203 	add.w	r2, ip, #3
 800ea22:	1a52      	subs	r2, r2, r1
 800ea24:	f022 0203 	bic.w	r2, r2, #3
 800ea28:	3903      	subs	r1, #3
 800ea2a:	458c      	cmp	ip, r1
 800ea2c:	bf38      	it	cc
 800ea2e:	2200      	movcc	r2, #0
 800ea30:	441a      	add	r2, r3
 800ea32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea36:	b17b      	cbz	r3, 800ea58 <__mdiff+0x104>
 800ea38:	6106      	str	r6, [r0, #16]
 800ea3a:	e7a5      	b.n	800e988 <__mdiff+0x34>
 800ea3c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ea40:	fa17 f488 	uxtah	r4, r7, r8
 800ea44:	1422      	asrs	r2, r4, #16
 800ea46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ea4a:	b2a4      	uxth	r4, r4
 800ea4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ea50:	f84e 4b04 	str.w	r4, [lr], #4
 800ea54:	1417      	asrs	r7, r2, #16
 800ea56:	e7e0      	b.n	800ea1a <__mdiff+0xc6>
 800ea58:	3e01      	subs	r6, #1
 800ea5a:	e7ea      	b.n	800ea32 <__mdiff+0xde>
 800ea5c:	0800f43b 	.word	0x0800f43b
 800ea60:	0800f4ac 	.word	0x0800f4ac

0800ea64 <__d2b>:
 800ea64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea68:	4689      	mov	r9, r1
 800ea6a:	2101      	movs	r1, #1
 800ea6c:	ec57 6b10 	vmov	r6, r7, d0
 800ea70:	4690      	mov	r8, r2
 800ea72:	f7ff fcd5 	bl	800e420 <_Balloc>
 800ea76:	4604      	mov	r4, r0
 800ea78:	b930      	cbnz	r0, 800ea88 <__d2b+0x24>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	4b25      	ldr	r3, [pc, #148]	; (800eb14 <__d2b+0xb0>)
 800ea7e:	4826      	ldr	r0, [pc, #152]	; (800eb18 <__d2b+0xb4>)
 800ea80:	f240 310a 	movw	r1, #778	; 0x30a
 800ea84:	f000 f96a 	bl	800ed5c <__assert_func>
 800ea88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ea8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea90:	bb35      	cbnz	r5, 800eae0 <__d2b+0x7c>
 800ea92:	2e00      	cmp	r6, #0
 800ea94:	9301      	str	r3, [sp, #4]
 800ea96:	d028      	beq.n	800eaea <__d2b+0x86>
 800ea98:	4668      	mov	r0, sp
 800ea9a:	9600      	str	r6, [sp, #0]
 800ea9c:	f7ff fd8c 	bl	800e5b8 <__lo0bits>
 800eaa0:	9900      	ldr	r1, [sp, #0]
 800eaa2:	b300      	cbz	r0, 800eae6 <__d2b+0x82>
 800eaa4:	9a01      	ldr	r2, [sp, #4]
 800eaa6:	f1c0 0320 	rsb	r3, r0, #32
 800eaaa:	fa02 f303 	lsl.w	r3, r2, r3
 800eaae:	430b      	orrs	r3, r1
 800eab0:	40c2      	lsrs	r2, r0
 800eab2:	6163      	str	r3, [r4, #20]
 800eab4:	9201      	str	r2, [sp, #4]
 800eab6:	9b01      	ldr	r3, [sp, #4]
 800eab8:	61a3      	str	r3, [r4, #24]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	bf14      	ite	ne
 800eabe:	2202      	movne	r2, #2
 800eac0:	2201      	moveq	r2, #1
 800eac2:	6122      	str	r2, [r4, #16]
 800eac4:	b1d5      	cbz	r5, 800eafc <__d2b+0x98>
 800eac6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eaca:	4405      	add	r5, r0
 800eacc:	f8c9 5000 	str.w	r5, [r9]
 800ead0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ead4:	f8c8 0000 	str.w	r0, [r8]
 800ead8:	4620      	mov	r0, r4
 800eada:	b003      	add	sp, #12
 800eadc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eae4:	e7d5      	b.n	800ea92 <__d2b+0x2e>
 800eae6:	6161      	str	r1, [r4, #20]
 800eae8:	e7e5      	b.n	800eab6 <__d2b+0x52>
 800eaea:	a801      	add	r0, sp, #4
 800eaec:	f7ff fd64 	bl	800e5b8 <__lo0bits>
 800eaf0:	9b01      	ldr	r3, [sp, #4]
 800eaf2:	6163      	str	r3, [r4, #20]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	6122      	str	r2, [r4, #16]
 800eaf8:	3020      	adds	r0, #32
 800eafa:	e7e3      	b.n	800eac4 <__d2b+0x60>
 800eafc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb04:	f8c9 0000 	str.w	r0, [r9]
 800eb08:	6918      	ldr	r0, [r3, #16]
 800eb0a:	f7ff fd35 	bl	800e578 <__hi0bits>
 800eb0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb12:	e7df      	b.n	800ead4 <__d2b+0x70>
 800eb14:	0800f43b 	.word	0x0800f43b
 800eb18:	0800f4ac 	.word	0x0800f4ac

0800eb1c <_calloc_r>:
 800eb1c:	b513      	push	{r0, r1, r4, lr}
 800eb1e:	434a      	muls	r2, r1
 800eb20:	4611      	mov	r1, r2
 800eb22:	9201      	str	r2, [sp, #4]
 800eb24:	f000 f85a 	bl	800ebdc <_malloc_r>
 800eb28:	4604      	mov	r4, r0
 800eb2a:	b118      	cbz	r0, 800eb34 <_calloc_r+0x18>
 800eb2c:	9a01      	ldr	r2, [sp, #4]
 800eb2e:	2100      	movs	r1, #0
 800eb30:	f7fd fd64 	bl	800c5fc <memset>
 800eb34:	4620      	mov	r0, r4
 800eb36:	b002      	add	sp, #8
 800eb38:	bd10      	pop	{r4, pc}
	...

0800eb3c <_free_r>:
 800eb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb3e:	2900      	cmp	r1, #0
 800eb40:	d048      	beq.n	800ebd4 <_free_r+0x98>
 800eb42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb46:	9001      	str	r0, [sp, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f1a1 0404 	sub.w	r4, r1, #4
 800eb4e:	bfb8      	it	lt
 800eb50:	18e4      	addlt	r4, r4, r3
 800eb52:	f000 f989 	bl	800ee68 <__malloc_lock>
 800eb56:	4a20      	ldr	r2, [pc, #128]	; (800ebd8 <_free_r+0x9c>)
 800eb58:	9801      	ldr	r0, [sp, #4]
 800eb5a:	6813      	ldr	r3, [r2, #0]
 800eb5c:	4615      	mov	r5, r2
 800eb5e:	b933      	cbnz	r3, 800eb6e <_free_r+0x32>
 800eb60:	6063      	str	r3, [r4, #4]
 800eb62:	6014      	str	r4, [r2, #0]
 800eb64:	b003      	add	sp, #12
 800eb66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb6a:	f000 b983 	b.w	800ee74 <__malloc_unlock>
 800eb6e:	42a3      	cmp	r3, r4
 800eb70:	d90b      	bls.n	800eb8a <_free_r+0x4e>
 800eb72:	6821      	ldr	r1, [r4, #0]
 800eb74:	1862      	adds	r2, r4, r1
 800eb76:	4293      	cmp	r3, r2
 800eb78:	bf04      	itt	eq
 800eb7a:	681a      	ldreq	r2, [r3, #0]
 800eb7c:	685b      	ldreq	r3, [r3, #4]
 800eb7e:	6063      	str	r3, [r4, #4]
 800eb80:	bf04      	itt	eq
 800eb82:	1852      	addeq	r2, r2, r1
 800eb84:	6022      	streq	r2, [r4, #0]
 800eb86:	602c      	str	r4, [r5, #0]
 800eb88:	e7ec      	b.n	800eb64 <_free_r+0x28>
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	b10b      	cbz	r3, 800eb94 <_free_r+0x58>
 800eb90:	42a3      	cmp	r3, r4
 800eb92:	d9fa      	bls.n	800eb8a <_free_r+0x4e>
 800eb94:	6811      	ldr	r1, [r2, #0]
 800eb96:	1855      	adds	r5, r2, r1
 800eb98:	42a5      	cmp	r5, r4
 800eb9a:	d10b      	bne.n	800ebb4 <_free_r+0x78>
 800eb9c:	6824      	ldr	r4, [r4, #0]
 800eb9e:	4421      	add	r1, r4
 800eba0:	1854      	adds	r4, r2, r1
 800eba2:	42a3      	cmp	r3, r4
 800eba4:	6011      	str	r1, [r2, #0]
 800eba6:	d1dd      	bne.n	800eb64 <_free_r+0x28>
 800eba8:	681c      	ldr	r4, [r3, #0]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	6053      	str	r3, [r2, #4]
 800ebae:	4421      	add	r1, r4
 800ebb0:	6011      	str	r1, [r2, #0]
 800ebb2:	e7d7      	b.n	800eb64 <_free_r+0x28>
 800ebb4:	d902      	bls.n	800ebbc <_free_r+0x80>
 800ebb6:	230c      	movs	r3, #12
 800ebb8:	6003      	str	r3, [r0, #0]
 800ebba:	e7d3      	b.n	800eb64 <_free_r+0x28>
 800ebbc:	6825      	ldr	r5, [r4, #0]
 800ebbe:	1961      	adds	r1, r4, r5
 800ebc0:	428b      	cmp	r3, r1
 800ebc2:	bf04      	itt	eq
 800ebc4:	6819      	ldreq	r1, [r3, #0]
 800ebc6:	685b      	ldreq	r3, [r3, #4]
 800ebc8:	6063      	str	r3, [r4, #4]
 800ebca:	bf04      	itt	eq
 800ebcc:	1949      	addeq	r1, r1, r5
 800ebce:	6021      	streq	r1, [r4, #0]
 800ebd0:	6054      	str	r4, [r2, #4]
 800ebd2:	e7c7      	b.n	800eb64 <_free_r+0x28>
 800ebd4:	b003      	add	sp, #12
 800ebd6:	bd30      	pop	{r4, r5, pc}
 800ebd8:	20003c7c 	.word	0x20003c7c

0800ebdc <_malloc_r>:
 800ebdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebde:	1ccd      	adds	r5, r1, #3
 800ebe0:	f025 0503 	bic.w	r5, r5, #3
 800ebe4:	3508      	adds	r5, #8
 800ebe6:	2d0c      	cmp	r5, #12
 800ebe8:	bf38      	it	cc
 800ebea:	250c      	movcc	r5, #12
 800ebec:	2d00      	cmp	r5, #0
 800ebee:	4606      	mov	r6, r0
 800ebf0:	db01      	blt.n	800ebf6 <_malloc_r+0x1a>
 800ebf2:	42a9      	cmp	r1, r5
 800ebf4:	d903      	bls.n	800ebfe <_malloc_r+0x22>
 800ebf6:	230c      	movs	r3, #12
 800ebf8:	6033      	str	r3, [r6, #0]
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebfe:	f000 f933 	bl	800ee68 <__malloc_lock>
 800ec02:	4921      	ldr	r1, [pc, #132]	; (800ec88 <_malloc_r+0xac>)
 800ec04:	680a      	ldr	r2, [r1, #0]
 800ec06:	4614      	mov	r4, r2
 800ec08:	b99c      	cbnz	r4, 800ec32 <_malloc_r+0x56>
 800ec0a:	4f20      	ldr	r7, [pc, #128]	; (800ec8c <_malloc_r+0xb0>)
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	b923      	cbnz	r3, 800ec1a <_malloc_r+0x3e>
 800ec10:	4621      	mov	r1, r4
 800ec12:	4630      	mov	r0, r6
 800ec14:	f000 f83c 	bl	800ec90 <_sbrk_r>
 800ec18:	6038      	str	r0, [r7, #0]
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	f000 f837 	bl	800ec90 <_sbrk_r>
 800ec22:	1c43      	adds	r3, r0, #1
 800ec24:	d123      	bne.n	800ec6e <_malloc_r+0x92>
 800ec26:	230c      	movs	r3, #12
 800ec28:	6033      	str	r3, [r6, #0]
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	f000 f922 	bl	800ee74 <__malloc_unlock>
 800ec30:	e7e3      	b.n	800ebfa <_malloc_r+0x1e>
 800ec32:	6823      	ldr	r3, [r4, #0]
 800ec34:	1b5b      	subs	r3, r3, r5
 800ec36:	d417      	bmi.n	800ec68 <_malloc_r+0x8c>
 800ec38:	2b0b      	cmp	r3, #11
 800ec3a:	d903      	bls.n	800ec44 <_malloc_r+0x68>
 800ec3c:	6023      	str	r3, [r4, #0]
 800ec3e:	441c      	add	r4, r3
 800ec40:	6025      	str	r5, [r4, #0]
 800ec42:	e004      	b.n	800ec4e <_malloc_r+0x72>
 800ec44:	6863      	ldr	r3, [r4, #4]
 800ec46:	42a2      	cmp	r2, r4
 800ec48:	bf0c      	ite	eq
 800ec4a:	600b      	streq	r3, [r1, #0]
 800ec4c:	6053      	strne	r3, [r2, #4]
 800ec4e:	4630      	mov	r0, r6
 800ec50:	f000 f910 	bl	800ee74 <__malloc_unlock>
 800ec54:	f104 000b 	add.w	r0, r4, #11
 800ec58:	1d23      	adds	r3, r4, #4
 800ec5a:	f020 0007 	bic.w	r0, r0, #7
 800ec5e:	1ac2      	subs	r2, r0, r3
 800ec60:	d0cc      	beq.n	800ebfc <_malloc_r+0x20>
 800ec62:	1a1b      	subs	r3, r3, r0
 800ec64:	50a3      	str	r3, [r4, r2]
 800ec66:	e7c9      	b.n	800ebfc <_malloc_r+0x20>
 800ec68:	4622      	mov	r2, r4
 800ec6a:	6864      	ldr	r4, [r4, #4]
 800ec6c:	e7cc      	b.n	800ec08 <_malloc_r+0x2c>
 800ec6e:	1cc4      	adds	r4, r0, #3
 800ec70:	f024 0403 	bic.w	r4, r4, #3
 800ec74:	42a0      	cmp	r0, r4
 800ec76:	d0e3      	beq.n	800ec40 <_malloc_r+0x64>
 800ec78:	1a21      	subs	r1, r4, r0
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f000 f808 	bl	800ec90 <_sbrk_r>
 800ec80:	3001      	adds	r0, #1
 800ec82:	d1dd      	bne.n	800ec40 <_malloc_r+0x64>
 800ec84:	e7cf      	b.n	800ec26 <_malloc_r+0x4a>
 800ec86:	bf00      	nop
 800ec88:	20003c7c 	.word	0x20003c7c
 800ec8c:	20003c80 	.word	0x20003c80

0800ec90 <_sbrk_r>:
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	4d06      	ldr	r5, [pc, #24]	; (800ecac <_sbrk_r+0x1c>)
 800ec94:	2300      	movs	r3, #0
 800ec96:	4604      	mov	r4, r0
 800ec98:	4608      	mov	r0, r1
 800ec9a:	602b      	str	r3, [r5, #0]
 800ec9c:	f7f4 f87e 	bl	8002d9c <_sbrk>
 800eca0:	1c43      	adds	r3, r0, #1
 800eca2:	d102      	bne.n	800ecaa <_sbrk_r+0x1a>
 800eca4:	682b      	ldr	r3, [r5, #0]
 800eca6:	b103      	cbz	r3, 800ecaa <_sbrk_r+0x1a>
 800eca8:	6023      	str	r3, [r4, #0]
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	200042e8 	.word	0x200042e8

0800ecb0 <__sread>:
 800ecb0:	b510      	push	{r4, lr}
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb8:	f000 fa3c 	bl	800f134 <_read_r>
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	bfab      	itete	ge
 800ecc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ecc2:	89a3      	ldrhlt	r3, [r4, #12]
 800ecc4:	181b      	addge	r3, r3, r0
 800ecc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ecca:	bfac      	ite	ge
 800eccc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ecce:	81a3      	strhlt	r3, [r4, #12]
 800ecd0:	bd10      	pop	{r4, pc}

0800ecd2 <__swrite>:
 800ecd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd6:	461f      	mov	r7, r3
 800ecd8:	898b      	ldrh	r3, [r1, #12]
 800ecda:	05db      	lsls	r3, r3, #23
 800ecdc:	4605      	mov	r5, r0
 800ecde:	460c      	mov	r4, r1
 800ece0:	4616      	mov	r6, r2
 800ece2:	d505      	bpl.n	800ecf0 <__swrite+0x1e>
 800ece4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ece8:	2302      	movs	r3, #2
 800ecea:	2200      	movs	r2, #0
 800ecec:	f000 f898 	bl	800ee20 <_lseek_r>
 800ecf0:	89a3      	ldrh	r3, [r4, #12]
 800ecf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecfa:	81a3      	strh	r3, [r4, #12]
 800ecfc:	4632      	mov	r2, r6
 800ecfe:	463b      	mov	r3, r7
 800ed00:	4628      	mov	r0, r5
 800ed02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed06:	f000 b817 	b.w	800ed38 <_write_r>

0800ed0a <__sseek>:
 800ed0a:	b510      	push	{r4, lr}
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed12:	f000 f885 	bl	800ee20 <_lseek_r>
 800ed16:	1c43      	adds	r3, r0, #1
 800ed18:	89a3      	ldrh	r3, [r4, #12]
 800ed1a:	bf15      	itete	ne
 800ed1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ed1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ed22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ed26:	81a3      	strheq	r3, [r4, #12]
 800ed28:	bf18      	it	ne
 800ed2a:	81a3      	strhne	r3, [r4, #12]
 800ed2c:	bd10      	pop	{r4, pc}

0800ed2e <__sclose>:
 800ed2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed32:	f000 b831 	b.w	800ed98 <_close_r>
	...

0800ed38 <_write_r>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	4d07      	ldr	r5, [pc, #28]	; (800ed58 <_write_r+0x20>)
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	4608      	mov	r0, r1
 800ed40:	4611      	mov	r1, r2
 800ed42:	2200      	movs	r2, #0
 800ed44:	602a      	str	r2, [r5, #0]
 800ed46:	461a      	mov	r2, r3
 800ed48:	f7f3 fba4 	bl	8002494 <_write>
 800ed4c:	1c43      	adds	r3, r0, #1
 800ed4e:	d102      	bne.n	800ed56 <_write_r+0x1e>
 800ed50:	682b      	ldr	r3, [r5, #0]
 800ed52:	b103      	cbz	r3, 800ed56 <_write_r+0x1e>
 800ed54:	6023      	str	r3, [r4, #0]
 800ed56:	bd38      	pop	{r3, r4, r5, pc}
 800ed58:	200042e8 	.word	0x200042e8

0800ed5c <__assert_func>:
 800ed5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed5e:	4614      	mov	r4, r2
 800ed60:	461a      	mov	r2, r3
 800ed62:	4b09      	ldr	r3, [pc, #36]	; (800ed88 <__assert_func+0x2c>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4605      	mov	r5, r0
 800ed68:	68d8      	ldr	r0, [r3, #12]
 800ed6a:	b14c      	cbz	r4, 800ed80 <__assert_func+0x24>
 800ed6c:	4b07      	ldr	r3, [pc, #28]	; (800ed8c <__assert_func+0x30>)
 800ed6e:	9100      	str	r1, [sp, #0]
 800ed70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed74:	4906      	ldr	r1, [pc, #24]	; (800ed90 <__assert_func+0x34>)
 800ed76:	462b      	mov	r3, r5
 800ed78:	f000 f81e 	bl	800edb8 <fiprintf>
 800ed7c:	f000 f9f9 	bl	800f172 <abort>
 800ed80:	4b04      	ldr	r3, [pc, #16]	; (800ed94 <__assert_func+0x38>)
 800ed82:	461c      	mov	r4, r3
 800ed84:	e7f3      	b.n	800ed6e <__assert_func+0x12>
 800ed86:	bf00      	nop
 800ed88:	20000028 	.word	0x20000028
 800ed8c:	0800f60c 	.word	0x0800f60c
 800ed90:	0800f619 	.word	0x0800f619
 800ed94:	0800f647 	.word	0x0800f647

0800ed98 <_close_r>:
 800ed98:	b538      	push	{r3, r4, r5, lr}
 800ed9a:	4d06      	ldr	r5, [pc, #24]	; (800edb4 <_close_r+0x1c>)
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4604      	mov	r4, r0
 800eda0:	4608      	mov	r0, r1
 800eda2:	602b      	str	r3, [r5, #0]
 800eda4:	f7f3 fba2 	bl	80024ec <_close>
 800eda8:	1c43      	adds	r3, r0, #1
 800edaa:	d102      	bne.n	800edb2 <_close_r+0x1a>
 800edac:	682b      	ldr	r3, [r5, #0]
 800edae:	b103      	cbz	r3, 800edb2 <_close_r+0x1a>
 800edb0:	6023      	str	r3, [r4, #0]
 800edb2:	bd38      	pop	{r3, r4, r5, pc}
 800edb4:	200042e8 	.word	0x200042e8

0800edb8 <fiprintf>:
 800edb8:	b40e      	push	{r1, r2, r3}
 800edba:	b503      	push	{r0, r1, lr}
 800edbc:	4601      	mov	r1, r0
 800edbe:	ab03      	add	r3, sp, #12
 800edc0:	4805      	ldr	r0, [pc, #20]	; (800edd8 <fiprintf+0x20>)
 800edc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800edc6:	6800      	ldr	r0, [r0, #0]
 800edc8:	9301      	str	r3, [sp, #4]
 800edca:	f000 f883 	bl	800eed4 <_vfiprintf_r>
 800edce:	b002      	add	sp, #8
 800edd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800edd4:	b003      	add	sp, #12
 800edd6:	4770      	bx	lr
 800edd8:	20000028 	.word	0x20000028

0800eddc <_fstat_r>:
 800eddc:	b538      	push	{r3, r4, r5, lr}
 800edde:	4d07      	ldr	r5, [pc, #28]	; (800edfc <_fstat_r+0x20>)
 800ede0:	2300      	movs	r3, #0
 800ede2:	4604      	mov	r4, r0
 800ede4:	4608      	mov	r0, r1
 800ede6:	4611      	mov	r1, r2
 800ede8:	602b      	str	r3, [r5, #0]
 800edea:	f7f3 fbcf 	bl	800258c <_fstat>
 800edee:	1c43      	adds	r3, r0, #1
 800edf0:	d102      	bne.n	800edf8 <_fstat_r+0x1c>
 800edf2:	682b      	ldr	r3, [r5, #0]
 800edf4:	b103      	cbz	r3, 800edf8 <_fstat_r+0x1c>
 800edf6:	6023      	str	r3, [r4, #0]
 800edf8:	bd38      	pop	{r3, r4, r5, pc}
 800edfa:	bf00      	nop
 800edfc:	200042e8 	.word	0x200042e8

0800ee00 <_isatty_r>:
 800ee00:	b538      	push	{r3, r4, r5, lr}
 800ee02:	4d06      	ldr	r5, [pc, #24]	; (800ee1c <_isatty_r+0x1c>)
 800ee04:	2300      	movs	r3, #0
 800ee06:	4604      	mov	r4, r0
 800ee08:	4608      	mov	r0, r1
 800ee0a:	602b      	str	r3, [r5, #0]
 800ee0c:	f7f3 fb2c 	bl	8002468 <_isatty>
 800ee10:	1c43      	adds	r3, r0, #1
 800ee12:	d102      	bne.n	800ee1a <_isatty_r+0x1a>
 800ee14:	682b      	ldr	r3, [r5, #0]
 800ee16:	b103      	cbz	r3, 800ee1a <_isatty_r+0x1a>
 800ee18:	6023      	str	r3, [r4, #0]
 800ee1a:	bd38      	pop	{r3, r4, r5, pc}
 800ee1c:	200042e8 	.word	0x200042e8

0800ee20 <_lseek_r>:
 800ee20:	b538      	push	{r3, r4, r5, lr}
 800ee22:	4d07      	ldr	r5, [pc, #28]	; (800ee40 <_lseek_r+0x20>)
 800ee24:	4604      	mov	r4, r0
 800ee26:	4608      	mov	r0, r1
 800ee28:	4611      	mov	r1, r2
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	602a      	str	r2, [r5, #0]
 800ee2e:	461a      	mov	r2, r3
 800ee30:	f7f3 fb73 	bl	800251a <_lseek>
 800ee34:	1c43      	adds	r3, r0, #1
 800ee36:	d102      	bne.n	800ee3e <_lseek_r+0x1e>
 800ee38:	682b      	ldr	r3, [r5, #0]
 800ee3a:	b103      	cbz	r3, 800ee3e <_lseek_r+0x1e>
 800ee3c:	6023      	str	r3, [r4, #0]
 800ee3e:	bd38      	pop	{r3, r4, r5, pc}
 800ee40:	200042e8 	.word	0x200042e8

0800ee44 <__ascii_mbtowc>:
 800ee44:	b082      	sub	sp, #8
 800ee46:	b901      	cbnz	r1, 800ee4a <__ascii_mbtowc+0x6>
 800ee48:	a901      	add	r1, sp, #4
 800ee4a:	b142      	cbz	r2, 800ee5e <__ascii_mbtowc+0x1a>
 800ee4c:	b14b      	cbz	r3, 800ee62 <__ascii_mbtowc+0x1e>
 800ee4e:	7813      	ldrb	r3, [r2, #0]
 800ee50:	600b      	str	r3, [r1, #0]
 800ee52:	7812      	ldrb	r2, [r2, #0]
 800ee54:	1e10      	subs	r0, r2, #0
 800ee56:	bf18      	it	ne
 800ee58:	2001      	movne	r0, #1
 800ee5a:	b002      	add	sp, #8
 800ee5c:	4770      	bx	lr
 800ee5e:	4610      	mov	r0, r2
 800ee60:	e7fb      	b.n	800ee5a <__ascii_mbtowc+0x16>
 800ee62:	f06f 0001 	mvn.w	r0, #1
 800ee66:	e7f8      	b.n	800ee5a <__ascii_mbtowc+0x16>

0800ee68 <__malloc_lock>:
 800ee68:	4801      	ldr	r0, [pc, #4]	; (800ee70 <__malloc_lock+0x8>)
 800ee6a:	f7ff ba6a 	b.w	800e342 <__retarget_lock_acquire_recursive>
 800ee6e:	bf00      	nop
 800ee70:	200042e0 	.word	0x200042e0

0800ee74 <__malloc_unlock>:
 800ee74:	4801      	ldr	r0, [pc, #4]	; (800ee7c <__malloc_unlock+0x8>)
 800ee76:	f7ff ba65 	b.w	800e344 <__retarget_lock_release_recursive>
 800ee7a:	bf00      	nop
 800ee7c:	200042e0 	.word	0x200042e0

0800ee80 <__sfputc_r>:
 800ee80:	6893      	ldr	r3, [r2, #8]
 800ee82:	3b01      	subs	r3, #1
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	b410      	push	{r4}
 800ee88:	6093      	str	r3, [r2, #8]
 800ee8a:	da08      	bge.n	800ee9e <__sfputc_r+0x1e>
 800ee8c:	6994      	ldr	r4, [r2, #24]
 800ee8e:	42a3      	cmp	r3, r4
 800ee90:	db01      	blt.n	800ee96 <__sfputc_r+0x16>
 800ee92:	290a      	cmp	r1, #10
 800ee94:	d103      	bne.n	800ee9e <__sfputc_r+0x1e>
 800ee96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee9a:	f7fe b95d 	b.w	800d158 <__swbuf_r>
 800ee9e:	6813      	ldr	r3, [r2, #0]
 800eea0:	1c58      	adds	r0, r3, #1
 800eea2:	6010      	str	r0, [r2, #0]
 800eea4:	7019      	strb	r1, [r3, #0]
 800eea6:	4608      	mov	r0, r1
 800eea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eeac:	4770      	bx	lr

0800eeae <__sfputs_r>:
 800eeae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb0:	4606      	mov	r6, r0
 800eeb2:	460f      	mov	r7, r1
 800eeb4:	4614      	mov	r4, r2
 800eeb6:	18d5      	adds	r5, r2, r3
 800eeb8:	42ac      	cmp	r4, r5
 800eeba:	d101      	bne.n	800eec0 <__sfputs_r+0x12>
 800eebc:	2000      	movs	r0, #0
 800eebe:	e007      	b.n	800eed0 <__sfputs_r+0x22>
 800eec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eec4:	463a      	mov	r2, r7
 800eec6:	4630      	mov	r0, r6
 800eec8:	f7ff ffda 	bl	800ee80 <__sfputc_r>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	d1f3      	bne.n	800eeb8 <__sfputs_r+0xa>
 800eed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eed4 <_vfiprintf_r>:
 800eed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed8:	460d      	mov	r5, r1
 800eeda:	b09d      	sub	sp, #116	; 0x74
 800eedc:	4614      	mov	r4, r2
 800eede:	4698      	mov	r8, r3
 800eee0:	4606      	mov	r6, r0
 800eee2:	b118      	cbz	r0, 800eeec <_vfiprintf_r+0x18>
 800eee4:	6983      	ldr	r3, [r0, #24]
 800eee6:	b90b      	cbnz	r3, 800eeec <_vfiprintf_r+0x18>
 800eee8:	f7ff f988 	bl	800e1fc <__sinit>
 800eeec:	4b89      	ldr	r3, [pc, #548]	; (800f114 <_vfiprintf_r+0x240>)
 800eeee:	429d      	cmp	r5, r3
 800eef0:	d11b      	bne.n	800ef2a <_vfiprintf_r+0x56>
 800eef2:	6875      	ldr	r5, [r6, #4]
 800eef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eef6:	07d9      	lsls	r1, r3, #31
 800eef8:	d405      	bmi.n	800ef06 <_vfiprintf_r+0x32>
 800eefa:	89ab      	ldrh	r3, [r5, #12]
 800eefc:	059a      	lsls	r2, r3, #22
 800eefe:	d402      	bmi.n	800ef06 <_vfiprintf_r+0x32>
 800ef00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef02:	f7ff fa1e 	bl	800e342 <__retarget_lock_acquire_recursive>
 800ef06:	89ab      	ldrh	r3, [r5, #12]
 800ef08:	071b      	lsls	r3, r3, #28
 800ef0a:	d501      	bpl.n	800ef10 <_vfiprintf_r+0x3c>
 800ef0c:	692b      	ldr	r3, [r5, #16]
 800ef0e:	b9eb      	cbnz	r3, 800ef4c <_vfiprintf_r+0x78>
 800ef10:	4629      	mov	r1, r5
 800ef12:	4630      	mov	r0, r6
 800ef14:	f7fe f972 	bl	800d1fc <__swsetup_r>
 800ef18:	b1c0      	cbz	r0, 800ef4c <_vfiprintf_r+0x78>
 800ef1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef1c:	07dc      	lsls	r4, r3, #31
 800ef1e:	d50e      	bpl.n	800ef3e <_vfiprintf_r+0x6a>
 800ef20:	f04f 30ff 	mov.w	r0, #4294967295
 800ef24:	b01d      	add	sp, #116	; 0x74
 800ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2a:	4b7b      	ldr	r3, [pc, #492]	; (800f118 <_vfiprintf_r+0x244>)
 800ef2c:	429d      	cmp	r5, r3
 800ef2e:	d101      	bne.n	800ef34 <_vfiprintf_r+0x60>
 800ef30:	68b5      	ldr	r5, [r6, #8]
 800ef32:	e7df      	b.n	800eef4 <_vfiprintf_r+0x20>
 800ef34:	4b79      	ldr	r3, [pc, #484]	; (800f11c <_vfiprintf_r+0x248>)
 800ef36:	429d      	cmp	r5, r3
 800ef38:	bf08      	it	eq
 800ef3a:	68f5      	ldreq	r5, [r6, #12]
 800ef3c:	e7da      	b.n	800eef4 <_vfiprintf_r+0x20>
 800ef3e:	89ab      	ldrh	r3, [r5, #12]
 800ef40:	0598      	lsls	r0, r3, #22
 800ef42:	d4ed      	bmi.n	800ef20 <_vfiprintf_r+0x4c>
 800ef44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef46:	f7ff f9fd 	bl	800e344 <__retarget_lock_release_recursive>
 800ef4a:	e7e9      	b.n	800ef20 <_vfiprintf_r+0x4c>
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef50:	2320      	movs	r3, #32
 800ef52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef5a:	2330      	movs	r3, #48	; 0x30
 800ef5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f120 <_vfiprintf_r+0x24c>
 800ef60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef64:	f04f 0901 	mov.w	r9, #1
 800ef68:	4623      	mov	r3, r4
 800ef6a:	469a      	mov	sl, r3
 800ef6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef70:	b10a      	cbz	r2, 800ef76 <_vfiprintf_r+0xa2>
 800ef72:	2a25      	cmp	r2, #37	; 0x25
 800ef74:	d1f9      	bne.n	800ef6a <_vfiprintf_r+0x96>
 800ef76:	ebba 0b04 	subs.w	fp, sl, r4
 800ef7a:	d00b      	beq.n	800ef94 <_vfiprintf_r+0xc0>
 800ef7c:	465b      	mov	r3, fp
 800ef7e:	4622      	mov	r2, r4
 800ef80:	4629      	mov	r1, r5
 800ef82:	4630      	mov	r0, r6
 800ef84:	f7ff ff93 	bl	800eeae <__sfputs_r>
 800ef88:	3001      	adds	r0, #1
 800ef8a:	f000 80aa 	beq.w	800f0e2 <_vfiprintf_r+0x20e>
 800ef8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef90:	445a      	add	r2, fp
 800ef92:	9209      	str	r2, [sp, #36]	; 0x24
 800ef94:	f89a 3000 	ldrb.w	r3, [sl]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	f000 80a2 	beq.w	800f0e2 <_vfiprintf_r+0x20e>
 800ef9e:	2300      	movs	r3, #0
 800efa0:	f04f 32ff 	mov.w	r2, #4294967295
 800efa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efa8:	f10a 0a01 	add.w	sl, sl, #1
 800efac:	9304      	str	r3, [sp, #16]
 800efae:	9307      	str	r3, [sp, #28]
 800efb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efb4:	931a      	str	r3, [sp, #104]	; 0x68
 800efb6:	4654      	mov	r4, sl
 800efb8:	2205      	movs	r2, #5
 800efba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efbe:	4858      	ldr	r0, [pc, #352]	; (800f120 <_vfiprintf_r+0x24c>)
 800efc0:	f7f1 f90e 	bl	80001e0 <memchr>
 800efc4:	9a04      	ldr	r2, [sp, #16]
 800efc6:	b9d8      	cbnz	r0, 800f000 <_vfiprintf_r+0x12c>
 800efc8:	06d1      	lsls	r1, r2, #27
 800efca:	bf44      	itt	mi
 800efcc:	2320      	movmi	r3, #32
 800efce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efd2:	0713      	lsls	r3, r2, #28
 800efd4:	bf44      	itt	mi
 800efd6:	232b      	movmi	r3, #43	; 0x2b
 800efd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efdc:	f89a 3000 	ldrb.w	r3, [sl]
 800efe0:	2b2a      	cmp	r3, #42	; 0x2a
 800efe2:	d015      	beq.n	800f010 <_vfiprintf_r+0x13c>
 800efe4:	9a07      	ldr	r2, [sp, #28]
 800efe6:	4654      	mov	r4, sl
 800efe8:	2000      	movs	r0, #0
 800efea:	f04f 0c0a 	mov.w	ip, #10
 800efee:	4621      	mov	r1, r4
 800eff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eff4:	3b30      	subs	r3, #48	; 0x30
 800eff6:	2b09      	cmp	r3, #9
 800eff8:	d94e      	bls.n	800f098 <_vfiprintf_r+0x1c4>
 800effa:	b1b0      	cbz	r0, 800f02a <_vfiprintf_r+0x156>
 800effc:	9207      	str	r2, [sp, #28]
 800effe:	e014      	b.n	800f02a <_vfiprintf_r+0x156>
 800f000:	eba0 0308 	sub.w	r3, r0, r8
 800f004:	fa09 f303 	lsl.w	r3, r9, r3
 800f008:	4313      	orrs	r3, r2
 800f00a:	9304      	str	r3, [sp, #16]
 800f00c:	46a2      	mov	sl, r4
 800f00e:	e7d2      	b.n	800efb6 <_vfiprintf_r+0xe2>
 800f010:	9b03      	ldr	r3, [sp, #12]
 800f012:	1d19      	adds	r1, r3, #4
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	9103      	str	r1, [sp, #12]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	bfbb      	ittet	lt
 800f01c:	425b      	neglt	r3, r3
 800f01e:	f042 0202 	orrlt.w	r2, r2, #2
 800f022:	9307      	strge	r3, [sp, #28]
 800f024:	9307      	strlt	r3, [sp, #28]
 800f026:	bfb8      	it	lt
 800f028:	9204      	strlt	r2, [sp, #16]
 800f02a:	7823      	ldrb	r3, [r4, #0]
 800f02c:	2b2e      	cmp	r3, #46	; 0x2e
 800f02e:	d10c      	bne.n	800f04a <_vfiprintf_r+0x176>
 800f030:	7863      	ldrb	r3, [r4, #1]
 800f032:	2b2a      	cmp	r3, #42	; 0x2a
 800f034:	d135      	bne.n	800f0a2 <_vfiprintf_r+0x1ce>
 800f036:	9b03      	ldr	r3, [sp, #12]
 800f038:	1d1a      	adds	r2, r3, #4
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	9203      	str	r2, [sp, #12]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	bfb8      	it	lt
 800f042:	f04f 33ff 	movlt.w	r3, #4294967295
 800f046:	3402      	adds	r4, #2
 800f048:	9305      	str	r3, [sp, #20]
 800f04a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f130 <_vfiprintf_r+0x25c>
 800f04e:	7821      	ldrb	r1, [r4, #0]
 800f050:	2203      	movs	r2, #3
 800f052:	4650      	mov	r0, sl
 800f054:	f7f1 f8c4 	bl	80001e0 <memchr>
 800f058:	b140      	cbz	r0, 800f06c <_vfiprintf_r+0x198>
 800f05a:	2340      	movs	r3, #64	; 0x40
 800f05c:	eba0 000a 	sub.w	r0, r0, sl
 800f060:	fa03 f000 	lsl.w	r0, r3, r0
 800f064:	9b04      	ldr	r3, [sp, #16]
 800f066:	4303      	orrs	r3, r0
 800f068:	3401      	adds	r4, #1
 800f06a:	9304      	str	r3, [sp, #16]
 800f06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f070:	482c      	ldr	r0, [pc, #176]	; (800f124 <_vfiprintf_r+0x250>)
 800f072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f076:	2206      	movs	r2, #6
 800f078:	f7f1 f8b2 	bl	80001e0 <memchr>
 800f07c:	2800      	cmp	r0, #0
 800f07e:	d03f      	beq.n	800f100 <_vfiprintf_r+0x22c>
 800f080:	4b29      	ldr	r3, [pc, #164]	; (800f128 <_vfiprintf_r+0x254>)
 800f082:	bb1b      	cbnz	r3, 800f0cc <_vfiprintf_r+0x1f8>
 800f084:	9b03      	ldr	r3, [sp, #12]
 800f086:	3307      	adds	r3, #7
 800f088:	f023 0307 	bic.w	r3, r3, #7
 800f08c:	3308      	adds	r3, #8
 800f08e:	9303      	str	r3, [sp, #12]
 800f090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f092:	443b      	add	r3, r7
 800f094:	9309      	str	r3, [sp, #36]	; 0x24
 800f096:	e767      	b.n	800ef68 <_vfiprintf_r+0x94>
 800f098:	fb0c 3202 	mla	r2, ip, r2, r3
 800f09c:	460c      	mov	r4, r1
 800f09e:	2001      	movs	r0, #1
 800f0a0:	e7a5      	b.n	800efee <_vfiprintf_r+0x11a>
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	3401      	adds	r4, #1
 800f0a6:	9305      	str	r3, [sp, #20]
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	f04f 0c0a 	mov.w	ip, #10
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0b4:	3a30      	subs	r2, #48	; 0x30
 800f0b6:	2a09      	cmp	r2, #9
 800f0b8:	d903      	bls.n	800f0c2 <_vfiprintf_r+0x1ee>
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d0c5      	beq.n	800f04a <_vfiprintf_r+0x176>
 800f0be:	9105      	str	r1, [sp, #20]
 800f0c0:	e7c3      	b.n	800f04a <_vfiprintf_r+0x176>
 800f0c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e7f0      	b.n	800f0ae <_vfiprintf_r+0x1da>
 800f0cc:	ab03      	add	r3, sp, #12
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	462a      	mov	r2, r5
 800f0d2:	4b16      	ldr	r3, [pc, #88]	; (800f12c <_vfiprintf_r+0x258>)
 800f0d4:	a904      	add	r1, sp, #16
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	f7fd fb38 	bl	800c74c <_printf_float>
 800f0dc:	4607      	mov	r7, r0
 800f0de:	1c78      	adds	r0, r7, #1
 800f0e0:	d1d6      	bne.n	800f090 <_vfiprintf_r+0x1bc>
 800f0e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0e4:	07d9      	lsls	r1, r3, #31
 800f0e6:	d405      	bmi.n	800f0f4 <_vfiprintf_r+0x220>
 800f0e8:	89ab      	ldrh	r3, [r5, #12]
 800f0ea:	059a      	lsls	r2, r3, #22
 800f0ec:	d402      	bmi.n	800f0f4 <_vfiprintf_r+0x220>
 800f0ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0f0:	f7ff f928 	bl	800e344 <__retarget_lock_release_recursive>
 800f0f4:	89ab      	ldrh	r3, [r5, #12]
 800f0f6:	065b      	lsls	r3, r3, #25
 800f0f8:	f53f af12 	bmi.w	800ef20 <_vfiprintf_r+0x4c>
 800f0fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0fe:	e711      	b.n	800ef24 <_vfiprintf_r+0x50>
 800f100:	ab03      	add	r3, sp, #12
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	462a      	mov	r2, r5
 800f106:	4b09      	ldr	r3, [pc, #36]	; (800f12c <_vfiprintf_r+0x258>)
 800f108:	a904      	add	r1, sp, #16
 800f10a:	4630      	mov	r0, r6
 800f10c:	f7fd fdc2 	bl	800cc94 <_printf_i>
 800f110:	e7e4      	b.n	800f0dc <_vfiprintf_r+0x208>
 800f112:	bf00      	nop
 800f114:	0800f46c 	.word	0x0800f46c
 800f118:	0800f48c 	.word	0x0800f48c
 800f11c:	0800f44c 	.word	0x0800f44c
 800f120:	0800f652 	.word	0x0800f652
 800f124:	0800f65c 	.word	0x0800f65c
 800f128:	0800c74d 	.word	0x0800c74d
 800f12c:	0800eeaf 	.word	0x0800eeaf
 800f130:	0800f658 	.word	0x0800f658

0800f134 <_read_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d07      	ldr	r5, [pc, #28]	; (800f154 <_read_r+0x20>)
 800f138:	4604      	mov	r4, r0
 800f13a:	4608      	mov	r0, r1
 800f13c:	4611      	mov	r1, r2
 800f13e:	2200      	movs	r2, #0
 800f140:	602a      	str	r2, [r5, #0]
 800f142:	461a      	mov	r2, r3
 800f144:	f7f3 f9fa 	bl	800253c <_read>
 800f148:	1c43      	adds	r3, r0, #1
 800f14a:	d102      	bne.n	800f152 <_read_r+0x1e>
 800f14c:	682b      	ldr	r3, [r5, #0]
 800f14e:	b103      	cbz	r3, 800f152 <_read_r+0x1e>
 800f150:	6023      	str	r3, [r4, #0]
 800f152:	bd38      	pop	{r3, r4, r5, pc}
 800f154:	200042e8 	.word	0x200042e8

0800f158 <__ascii_wctomb>:
 800f158:	b149      	cbz	r1, 800f16e <__ascii_wctomb+0x16>
 800f15a:	2aff      	cmp	r2, #255	; 0xff
 800f15c:	bf85      	ittet	hi
 800f15e:	238a      	movhi	r3, #138	; 0x8a
 800f160:	6003      	strhi	r3, [r0, #0]
 800f162:	700a      	strbls	r2, [r1, #0]
 800f164:	f04f 30ff 	movhi.w	r0, #4294967295
 800f168:	bf98      	it	ls
 800f16a:	2001      	movls	r0, #1
 800f16c:	4770      	bx	lr
 800f16e:	4608      	mov	r0, r1
 800f170:	4770      	bx	lr

0800f172 <abort>:
 800f172:	b508      	push	{r3, lr}
 800f174:	2006      	movs	r0, #6
 800f176:	f000 f82b 	bl	800f1d0 <raise>
 800f17a:	2001      	movs	r0, #1
 800f17c:	f000 f854 	bl	800f228 <_exit>

0800f180 <_raise_r>:
 800f180:	291f      	cmp	r1, #31
 800f182:	b538      	push	{r3, r4, r5, lr}
 800f184:	4604      	mov	r4, r0
 800f186:	460d      	mov	r5, r1
 800f188:	d904      	bls.n	800f194 <_raise_r+0x14>
 800f18a:	2316      	movs	r3, #22
 800f18c:	6003      	str	r3, [r0, #0]
 800f18e:	f04f 30ff 	mov.w	r0, #4294967295
 800f192:	bd38      	pop	{r3, r4, r5, pc}
 800f194:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f196:	b112      	cbz	r2, 800f19e <_raise_r+0x1e>
 800f198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f19c:	b94b      	cbnz	r3, 800f1b2 <_raise_r+0x32>
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f000 f830 	bl	800f204 <_getpid_r>
 800f1a4:	462a      	mov	r2, r5
 800f1a6:	4601      	mov	r1, r0
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1ae:	f000 b817 	b.w	800f1e0 <_kill_r>
 800f1b2:	2b01      	cmp	r3, #1
 800f1b4:	d00a      	beq.n	800f1cc <_raise_r+0x4c>
 800f1b6:	1c59      	adds	r1, r3, #1
 800f1b8:	d103      	bne.n	800f1c2 <_raise_r+0x42>
 800f1ba:	2316      	movs	r3, #22
 800f1bc:	6003      	str	r3, [r0, #0]
 800f1be:	2001      	movs	r0, #1
 800f1c0:	e7e7      	b.n	800f192 <_raise_r+0x12>
 800f1c2:	2400      	movs	r4, #0
 800f1c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	4798      	blx	r3
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	e7e0      	b.n	800f192 <_raise_r+0x12>

0800f1d0 <raise>:
 800f1d0:	4b02      	ldr	r3, [pc, #8]	; (800f1dc <raise+0xc>)
 800f1d2:	4601      	mov	r1, r0
 800f1d4:	6818      	ldr	r0, [r3, #0]
 800f1d6:	f7ff bfd3 	b.w	800f180 <_raise_r>
 800f1da:	bf00      	nop
 800f1dc:	20000028 	.word	0x20000028

0800f1e0 <_kill_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	4d07      	ldr	r5, [pc, #28]	; (800f200 <_kill_r+0x20>)
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	4611      	mov	r1, r2
 800f1ec:	602b      	str	r3, [r5, #0]
 800f1ee:	f000 f813 	bl	800f218 <_kill>
 800f1f2:	1c43      	adds	r3, r0, #1
 800f1f4:	d102      	bne.n	800f1fc <_kill_r+0x1c>
 800f1f6:	682b      	ldr	r3, [r5, #0]
 800f1f8:	b103      	cbz	r3, 800f1fc <_kill_r+0x1c>
 800f1fa:	6023      	str	r3, [r4, #0]
 800f1fc:	bd38      	pop	{r3, r4, r5, pc}
 800f1fe:	bf00      	nop
 800f200:	200042e8 	.word	0x200042e8

0800f204 <_getpid_r>:
 800f204:	f000 b800 	b.w	800f208 <_getpid>

0800f208 <_getpid>:
 800f208:	4b02      	ldr	r3, [pc, #8]	; (800f214 <_getpid+0xc>)
 800f20a:	2258      	movs	r2, #88	; 0x58
 800f20c:	601a      	str	r2, [r3, #0]
 800f20e:	f04f 30ff 	mov.w	r0, #4294967295
 800f212:	4770      	bx	lr
 800f214:	200042e8 	.word	0x200042e8

0800f218 <_kill>:
 800f218:	4b02      	ldr	r3, [pc, #8]	; (800f224 <_kill+0xc>)
 800f21a:	2258      	movs	r2, #88	; 0x58
 800f21c:	601a      	str	r2, [r3, #0]
 800f21e:	f04f 30ff 	mov.w	r0, #4294967295
 800f222:	4770      	bx	lr
 800f224:	200042e8 	.word	0x200042e8

0800f228 <_exit>:
 800f228:	e7fe      	b.n	800f228 <_exit>
	...

0800f22c <_init>:
 800f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22e:	bf00      	nop
 800f230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f232:	bc08      	pop	{r3}
 800f234:	469e      	mov	lr, r3
 800f236:	4770      	bx	lr

0800f238 <_fini>:
 800f238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f23a:	bf00      	nop
 800f23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f23e:	bc08      	pop	{r3}
 800f240:	469e      	mov	lr, r3
 800f242:	4770      	bx	lr
